{"version":3,"sources":["components-elements/BackgroundImageWithLoadingSpinner/BackgroundImageWithLoadingSpinner.tsx","components-elements/Buttons/BareButton.tsx","components-elements/Buttons/PrimaryButton.tsx","components-elements/Icons/ArrowIcon.tsx","components-elements/Icons/BurgerIcon.tsx","components-elements/Icons/CrossIcon.tsx","components-elements/Icons/MagnifyingGlassIcon.tsx","components-elements/Input/Input.tsx","components-elements/LoadingSpinner/LoadingSpinner.tsx","components-elements/Text/TextHeadingLarge.tsx","components-elements/Text/TextHeadingMedium.tsx","components-elements/Text/TextHeadingSmall.tsx","components-elements/Text/TextMedium.tsx","components-elements/Text/TextSmall.tsx","components-elements/index.ts","components-layout/index.ts","services/image-loader.service.ts","components-layout/ImageGridItem/ImageGridItem.tsx","components-layout/SummaryColumn/index.ts","helpers/Animations/animations.const.ts","helpers/Animations/fade.animations.ts","helpers/index.ts","components-layout/ImageGrid/ImageGrid.tsx","components-layout/SummaryColumn/SummaryColumn.tsx","components-layout/SummaryColumnList/index.ts","components-layout/SummaryColumnList/SummaryColumnList.tsx","components-main/AboutEatSeasonal/AboutEatSeasonal.tsx","components-main/AndroidAppDownload/AndroidAppDownload.tsx","components-main/BottomTabs/BottomTabs.tsx","store/actions/all-basic-season-data.actions.ts","store/actions/current-food-details-data.actions.ts","store/actions/current-season-data.actions.ts","store/actions/init.actions.ts","store/actions/route.actions.ts","store/actions/ui.actions.ts","const/tabs.enum.ts","store/selectors/all-season-data.selectors.ts","store/selectors/current-food-details-data.selectors.ts","store/selectors/current-season-data.selectors.ts","const/urls.const.ts","store/selectors/route.selectors.ts","store/selectors/ui.selectors.ts","store/selectors/combined-selectors/current-food-data-and-basic-season.selectors.ts","store/selectors/combined-selectors/current-season-data-with-search.selectors.ts","config/index.ts","store/epics/tracking.epics.ts","store/epics/index.ts","store/epics/init.epics.ts","store/epics/current-season-data.epics.ts","services/retrieve-backend-data.ts","store/epics/all-basic-season-data.epics.ts","store/epics/route.epics.ts","store/epics/current-food-details-data.epics.ts","store/reducers/current-food-details-data.reducer.ts","store/reducers/current-season-data.reducer.ts","store/reducers/all-basic-season-data.reducer.ts","store/reducers/ui.reducer.ts","store/reducers/index.ts","components-main/BottomTabs/BottomTabs.connector.ts","components-main/CurrentSeasonName/CurrentSeasonName.connector.ts","components-main/CurrentSeasonName/CurrentSeasonName.tsx","components-main/FoodDetailsLoader/FoodDetailsLoader.connector.ts","components-main/FoodDetailsLoader/FoodDetailsLoader.tsx","components-main/FoodDetailsTopSection/FoodDetailsTopSection.connector.ts","components-main/FoodDetailsTopSection/FoodDetailsTopSection.tsx","components-main/FoodTable/FoodTable.connector.ts","components-main/FoodTable/FoodTable.tsx","components-main/Header/Header.connector.ts","components-main/Header/Header.tsx","components-layout/PageLayout/PageLayout.tsx","components-main/SeasonMenu/SeasonMenu.tsx","components-main/SeasonMenu/SeasonMenu.connector.ts","components-main/PageWithMenu/PageWithMenu.tsx","components-main/SearchBar/SearchBar.tsx","components-main/SearchBar/SearchBar.connector.ts","components-main/SeasonsForFood/SeasonsForFood.connector.ts","components-main/SeasonsForFood/SeasonsForFood.tsx","components-main/ViewWebAppVersion/ViewWebAppVersion.connector.ts","components-main/ViewWebAppVersion/ViewWebAppVersion.tsx","components-main/ViewAppLinks/ViewAppLinks.tsx","components-main/WhyEatSeasonal/WhyEatSeasonal.tsx","components-pages/FoodDetailsPage/FoodDetailsPage.tsx","components-pages/FoodTablePage/FoodTablePage.tsx","components-pages/IntroPage/IntroPage.tsx","components-app/App.tsx","serviceWorker.js","index.tsx"],"names":["FadeInOutAnimation","fadeInOutAnimation","BackgroundImageWithLoadingSpinner","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isVisible","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","loadImage","src","setState","stop","apply","arguments","react_default","createElement","react_pose_es","className","style","backgroundImage","concat","children","LoadingSpinner_LoadingSpinner_LoadingSpinner","Component","BareButton","_ref","onClick","PrimaryButton","ArrowIcon","viewBox","strokeLinecap","strokeWidth","stroke","x1","y1","x2","y2","BurgerIcon","height","width","y","CrossIcon","points","MagnifyingGlassIcon","d","Input","_ref$type","type","placeholder","onChange","_onChange","_x","toString","event","target","LoadingSpinner","TextHeadingLarge","TextHeadingMedium","TextHeadingSmall","TextMedium","TextSmall","__webpack_require__","__webpack_exports__","BackgroundImageWithLoadingSpinner_BackgroundImageWithLoadingSpinner_BackgroundImageWithLoadingSpinner","BareButton_BareButton","PrimaryButton_PrimaryButton","ArrowIcon_ArrowIcon","BurgerIcon_BurgerIcon","CrossIcon_CrossIcon","MagnifyingGlassIcon_MagnifyingGlassIcon","Input_Input_Input","TextHeadingLarge_TextHeadingLarge","TextHeadingMedium_TextHeadingMedium","TextHeadingSmall_TextHeadingSmall","TextMedium_TextMedium","TextSmall_TextSmall","_ImageGrid_ImageGrid__WEBPACK_IMPORTED_MODULE_1__","_SummaryColumn__WEBPACK_IMPORTED_MODULE_2__","o","_SummaryColumnList__WEBPACK_IMPORTED_MODULE_3__","loadingImages","imageSrc","Promise","resolve","image","document","push","addEventListener","createImageOnLoadPromise","ImageGridItem","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_elements__WEBPACK_IMPORTED_MODULE_2__","id","imageUrlSmall","name","_SummaryColumn__WEBPACK_IMPORTED_MODULE_0__","_SummaryColumn_interface__WEBPACK_IMPORTED_MODULE_1__","length","undefined","_ref$enterDelay","enterDelay","_ref$exitDelay","exitDelay","_ref$enterDuration","enterDuration","_ref$exitDuration","exitDuration","posed","enter","delay","opacity","transition","duration","exit","fade_animations_fadeInOutAnimation","ImageGrid","_ImageGridItem_ImageGridItem__WEBPACK_IMPORTED_MODULE_2__","_components_elements__WEBPACK_IMPORTED_MODULE_3__","data","map","item","assign","SummaryColumn","imageUrl","text","title","_SummaryColumnList_interface__WEBPACK_IMPORTED_MODULE_0__","_SummaryColumnList__WEBPACK_IMPORTED_MODULE_1__","SummaryColumnList","columns","column","index","AboutEatSeasonal","objectDestructuringEmpty","components_elements","AndroidAppDownload","href","alt","addTabClasses","isSelected","SET_ALL_BASIC_SEASON_DATA_START","SET_ALL_BASIC_SEASON_DATA_SUCCESS","SET_CURRENT_FOOD_DETAILS_DATA_START","SET_CURRENT_FOOD_DETAILS_DATA_SUCCESS","SET_CURRENT_SEASON_DATA_START","SET_CURRENT_SEASON_DATA_SUCCESS","INIT_APP","GO_TO_WEB_VERSION","GO_BACK_FROM_FOOD_DETAILS","OPEN_MENU","CLOSE_MENU","SELECT_SEASON","FOOD_DETAILS_SELECT_SEASON","GO_TO_FOOD_TAB","GO_TO_RECIPES_TABS","SEARCH_BAR_CHANGED","SHOW_SEARCH_BAR","HIDE_SEARCH_BAR","FOOD_ITEM_CLICKED","RECIPE_ITEM_CLICKED","TABS","selectAllBasicSeasonDataState","allBasicSeasonData","selectIsBasicSeasonDataLoading","createSelector","isLoading","selectAllBasicSeasonData","selectCurrentFoodDetailsDataState","currentFoodDetailsData","selectIsCurrentFoodDetailsLoading","currentFoodDetails","selectCurrentFoodDetails","selectCurrentFoodDetailsName","selectCurrentFoodDetailsImageUrl","selectCurrentFoodDetailsSeasons","seasons","selectCurrentSeasonDataState","currentSeasonData","selectIsCurrentSeasonLoading","selectCurrentSeason","selectCurrentSeasonFood","currentSeason","food","selectCurrentSeasonRecipes","recipes","selectCurrentSeasonIndex","currentSeasonIndex","selectCurrentSeasonName","selectCurrentFoodDetailsParams","createMatchSelector","selectCurrentFoodDetailsId","routeParams","params","selectUiState","ui","selectIsMenuOpen","uiState","isMenuOpen","selectCurrentTab","currentTab","selectIsCurrentTabFood","FOOD","selectIsCurrentTabRecipes","RECIPES","selectCurrentSearchTerm","searchTerm","toLowerCase","selectIsSearchBarVisible","isSearchBarVisible","selectIsFoodDataOrBasicSeasonsLoading","isCurrentFoodDetailsLoading","isBasicSeasonDataLoading","selectSeasonsSelectedForFood","foodDetailsSeasons","basicSeasons","some","foodDetailSeason","getDataThatContainsSearchTerm","filter","includes","selectVisibleFoodData","selectVisibleRecipeData","BACKEND_URL","process","SEASON_DATA_URL","FOOD_DETAILS_DATA_URL","ACTIONS_TO_TRACK","rootEpic","combineEpics","of","pipe","mapTo","actions$","ofType","state$","withLatestFrom","slicedToArray","switchMap","seasonIndex","fetch","then","resp","json","getSeasonDataBySeasonIndex","foodData","seasonData","setAllBasicSeasonDataSuccess","_ref2","ga","ignoreElements","recipeId","action","recipeItemId","find","recipe","window","open","linkUrl","foodItemId","foodDetailsId","Boolean","foodId","currentFoodData","setCurrentFoodDetailsDataSuccess","getDefaultState","Date","getUTCMonth","epicMiddleware","createEpicMiddleware","storeHistory","createHashHistory","store","createStore","combineReducers","objectSpread","router","connectRouter","newSearchTerm","compose","applyMiddleware","routerMiddleware","run","connect","isCurrentTabFood","isCurrentTabRecipes","dispatch","goToFoodTab","goToRecipesTab","CurrentSeasonNameConnecter","currentSeasonName","FoodDetailsLoaderConnecter","FoodDetailsTopSectionConnecter","foodImageUrl","foodName","onGoBack","FoodTableConnecter","onFoodClick","foodItemClicked","onRecipeClick","recipeItemClicked","components_layout","HeaderConnecter","onMenuOpen","SearchBarConnecter","PageLayout","OverlayFadeInOutAnimation","SeasonMenuConnecter","onClose","onSeasonSelected","selectSeason","PageWithMenu","PageLayout_PageLayout_PageLayout","getSearchBarClassName","onHideSearchBar","onSearchChanged","searchBarChanged","onShowSearchBar","ref","input","querySelector","focus","focusOnInputIfSearchVisible","SeasonsForFoodConnecter","seasonsSelectedForFood","foodDetailsSelectSeason","react","substring","ViewWebAppVersionConnector","onGoToWebVersion","ViewAppLinks","AndroidAppDownload_AndroidAppDownload_AndroidAppDownload","summaryColumns","WhyEatSeasonal","FoodDetailsPage","PageWithMenu_PageWithMenu","FoodTablePage","IntroPage","ViewAppLinks_ViewAppLinks_ViewAppLinks","AboutEatSeasonal_AboutEatSeasonal_AboutEatSeasonal","WhyEatSeasonal_WhyEatSeasonal_WhyEatSeasonal","App","es","esm","history","react_router","path","component","exact","location","hostname","match","rootElement","getElementById","hasChildNodes","hydrate","App_App","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6MAkBMA,EAAqBC,cASdC,EAAb,SAAAC,GAKE,SAAAD,EAAYE,GAAyD,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACnEG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,WAAW,GAHsDR,EALvE,OAAAC,OAAAQ,EAAA,EAAAR,CAAAJ,EAAAC,GAAAG,OAAAS,EAAA,EAAAT,CAAAJ,EAAA,EAAAc,IAAA,oBAAAC,MAAA,eAAAC,EAAAZ,OAAAa,EAAA,EAAAb,CAAAc,EAAAC,EAAAC,KAAA,SAAAC,IAAA,OAAAH,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAaUC,YAAUpB,KAAKJ,MAAMyB,KAb/B,OAcIrB,KAAKsB,SAAS,CACZjB,WAAW,IAfjB,wBAAAY,EAAAM,SAAAR,EAAAf,SAAA,yBAAAU,EAAAc,MAAAxB,KAAAyB,YAAA,KAAAjB,IAAA,SAAAC,MAAA,WAoBI,OACEiB,EAAAb,EAAAc,cAACC,EAAA,EAAD,KAEI5B,KAAKI,MAAMC,UACPqB,EAAAb,EAAAc,cAACnC,EAAD,CAAoBgB,IAAI,+BACxBqB,UAAU,0CACVC,MAAO,CAAEC,gBAAe,OAAAC,OAAShC,KAAKJ,MAAMyB,IAApB,OACtBrB,KAAKJ,MAAMqC,UAEbP,EAAAb,EAAAc,cAACnC,EAAD,CAAoBgB,IAAI,8BACxBqB,UAAU,2CACVH,EAAAb,EAAAc,cAACO,EAAD,YA/BdxC,EAAA,CACQyC,aCzBKC,SAGR,SAAAC,GAAA,IACHR,EADGQ,EACHR,UACAI,EAFGI,EAEHJ,SACAK,EAHGD,EAGHC,QAHG,OAKHZ,EAAAb,EAAAc,cAAA,UAAQE,UAAS,GAAAG,OAAMH,GAAa,GAAnB,kBAAwCS,QAASA,GAC9DL,KCTOM,SAGR,SAAAF,GAAA,IACHR,EADGQ,EACHR,UACAI,EAFGI,EAEHJ,SACAK,EAHGD,EAGHC,QAHG,OAKHZ,EAAAb,EAAAc,cAAA,UAAQE,UAAS,GAAAG,OAAMH,GAAa,GAAnB,qBACfS,QAASA,GACPL,KCVOO,SAAY,kBACvBd,EAAAb,EAAAc,cAAA,OAAKE,UAAU,SAASY,QAAQ,aAC9Bf,EAAAb,EAAAc,cAAA,KAAGe,cAAc,QAAQC,YAAY,IAAIC,OAAO,QAC9ClB,EAAAb,EAAAc,cAAA,QAAMkB,GAAG,IAAIC,GAAG,KAAKC,GAAG,IAAIC,GAAG,MAC/BtB,EAAAb,EAAAc,cAAA,QAAMkB,GAAG,IAAIC,GAAG,KAAKC,GAAG,IAAIC,GAAG,OAC/BtB,EAAAb,EAAAc,cAAA,QAAMkB,GAAG,IAAIC,GAAG,KAAKC,GAAG,KAAKC,GAAG,WCLzBC,EAAa,kBACxBvB,EAAAb,EAAAc,cAAA,OAAKc,QAAQ,YAAYZ,UAAU,UACjCH,EAAAb,EAAAc,cAAA,QAAMuB,OAAO,IAAIC,MAAM,KAAKC,EAAE,MAC9B1B,EAAAb,EAAAc,cAAA,QAAMuB,OAAO,IAAIC,MAAM,KAAKC,EAAE,OAC9B1B,EAAAb,EAAAc,cAAA,QAAMuB,OAAO,IAAIC,MAAM,KAAKC,EAAE,SCJrBC,EAAY,kBACvB3B,EAAAb,EAAAc,cAAA,OAAKE,UAAU,SAASY,QAAQ,aAE9Bf,EAAAb,EAAAc,cAAA,WAAS2B,OAAO,0GCHPC,EAAsB,kBACjC7B,EAAAb,EAAAc,cAAA,OAAKE,UAAU,SAASY,QAAQ,aAE9Bf,EAAAb,EAAAc,cAAA,QAAM6B,EAAE,onBCHCC,SAKR,SAAApB,GAAA,IACHJ,EADGI,EACHJ,SACAJ,EAFGQ,EAEHR,UAFG6B,EAAArB,EAGHsB,YAHG,IAAAD,EAGI,OAHJA,EAIHE,EAJGvB,EAIHuB,YACAC,EALGxB,EAKHwB,SALG,OAOHnC,EAAAb,EAAAc,cAAA,SACEE,UAAS,GAAAG,OAAMH,GAAa,GAAnB,YACT+B,YAAaA,EACbD,KAAMA,EACNE,SAAQ,SAAAC,GAAA,SAAAD,EAAAE,GAAA,OAAAD,EAAAtC,MAAAxB,KAAAyB,WAAA,OAAAoC,EAAAG,SAAA,kBAAAF,EAAAE,YAAAH,EAAA,CAAE,SAACI,GAAD,OAAWJ,EAASI,EAAMC,OAAOzD,UACzCwB,KChBOkC,SAAiB,kBAC5BzC,EAAAb,EAAAc,cAAA,OAAKE,UAAU,qBACbH,EAAAb,EAAAc,cAAA,OAAKE,UAAU,2BACfH,EAAAb,EAAAc,cAAA,OAAKE,UAAU,2BACfH,EAAAb,EAAAc,cAAA,OAAKE,UAAU,2BACfH,EAAAb,EAAAc,cAAA,OAAKE,UAAU,8BCLNuC,SAAwC,SAAA/B,GAAA,IACnDR,EADmDQ,EACnDR,UACAI,EAFmDI,EAEnDJ,SAFmD,OAInDP,EAAAb,EAAAc,cAAA,QAAME,UAAS,GAAAG,OAAMH,GAAa,GAAnB,0BACXI,KCLOoC,UAAyC,SAAAhC,GAAA,IACpDR,EADoDQ,EACpDR,UACAI,EAFoDI,EAEpDJ,SAFoD,OAIpDP,EAAAb,EAAAc,cAAA,QAAME,UAAS,GAAAG,OAAMH,GAAa,GAAnB,2BACXI,KCLOqC,UAAwC,SAAAjC,GAAA,IACnDR,EADmDQ,EACnDR,UACAI,EAFmDI,EAEnDJ,SAFmD,OAInDP,EAAAb,EAAAc,cAAA,QAAME,UAAS,GAAAG,OAAMH,GAAa,GAAnB,0BACXI,KCLOsC,UAAkC,SAAAlC,GAAA,IAC7CR,EAD6CQ,EAC7CR,UACAI,EAF6CI,EAE7CJ,SAF6C,OAI7CP,EAAAb,EAAAc,cAAA,QAAME,UAAS,GAAAG,OAAMH,GAAa,GAAnB,mBACXI,KCLOuC,UAAiC,SAAAnC,GAAA,IAC5CR,EAD4CQ,EAC5CR,UACAI,EAF4CI,EAE5CJ,SAF4C,OAI5CP,EAAAb,EAAAc,cAAA,QAAME,UAAS,GAAAG,OAAMH,GAAa,GAAnB,kBACXI,KCTNwC,EAAAjB,EAAAkB,EAAA,sBAAAC,IAAAF,EAAAjB,EAAAkB,EAAA,sBAAAE,IAAAH,EAAAjB,EAAAkB,EAAA,sBAAAG,IAAAJ,EAAAjB,EAAAkB,EAAA,sBAAAI,IAAAL,EAAAjB,EAAAkB,EAAA,sBAAAK,IAAAN,EAAAjB,EAAAkB,EAAA,sBAAAM,IAAAP,EAAAjB,EAAAkB,EAAA,sBAAAO,IAAAR,EAAAjB,EAAAkB,EAAA,sBAAAQ,IAAAT,EAAAjB,EAAAkB,EAAA,sBAAAxC,IAAAuC,EAAAjB,EAAAkB,EAAA,sBAAAS,IAAAV,EAAAjB,EAAAkB,EAAA,sBAAAU,IAAAX,EAAAjB,EAAAkB,EAAA,sBAAAW,IAAAZ,EAAAjB,EAAAkB,EAAA,sBAAAY,IAAAb,EAAAjB,EAAAkB,EAAA,sBAAAa,mECAAd,EAAA,QAAAe,EAAAf,EAAA,IAAAA,EAAAjB,EAAAkB,EAAA,8BAAAc,EAAA,QAAAC,EAAAhB,EAAA,IAAAA,EAAAiB,EAAAD,EAAA,sBAAAhB,EAAAjB,EAAAkB,EAAA,sCAAAe,EAAA,wBAAAE,EAAAlB,EAAA,IAAAA,EAAAiB,EAAAC,EAAA,sBAAAlB,EAAAjB,EAAAkB,EAAA,sCAAAiB,EAAA,qECAAlB,EAAAjB,EAAAkB,EAAA,sBAAAtD,IAAA,IAAMwE,EAAgB,GAeTxE,EAAY,SACvByE,GAGA,OAjB+B,SAC/BA,GAEA,OAAO,IAAIC,QAAQ,SAACC,GAClB,IAAMC,EAAQC,SAAStE,cAAc,OACrCqE,EAAM3E,IAAMwE,EACZD,EAAcM,KAAKF,GACnBA,EAAMG,iBAAiB,OAAQ,WAC7BJ,EAAQC,OAQUI,CAAyBP,mCClBjDpB,EAAAjB,EAAAkB,EAAA,sBAAA2B,IAAA,IAAAC,EAAA7B,EAAA,GAAA8B,EAAA9B,EAAA+B,EAAAF,GAAAG,GAAAhC,EAAA,KAAAA,EAAA,IAaa4B,EAAqC,SAAAhE,GAAA,IAChDqE,EADgDrE,EAChDqE,GACAC,EAFgDtE,EAEhDsE,cACArE,EAHgDD,EAGhDC,QACAsE,EAJgDvE,EAIhDuE,KAJgD,OAMhDL,EAAA1F,EAAAc,cAAA,OAAKW,QAAS,kBAAMA,GAAWA,EAAQoE,IACrC7E,UAAU,qBACV0E,EAAA1F,EAAAc,cAAA,OAAKE,UAAU,4BACb0E,EAAA1F,EAAAc,cAAA,OAAKE,UAAU,4BACb0E,EAAA1F,EAAAc,cAAC8E,EAAA,EAAD,CAAmCpF,IAAKsF,KAE1CJ,EAAA1F,EAAAc,cAAC8E,EAAA,EAAD,CAAY5E,UAAU,2BACnB+E,oCC1BT,IAAAC,EAAApC,EAAA,IAAAA,EAAAjB,EAAAkB,EAAA,kCAAAmC,EAAA,QAAAC,EAAArC,EAAA,IAAAA,EAAAiB,EAAAoB,EAAA,sBAAArC,EAAAjB,EAAAkB,EAAA,sCAAAoC,EAAA,gECAO,YCMMrH,EAAqB,eAAA4C,EAAAZ,UAAAsF,OAAA,QAAAC,IAAAvF,UAAA,GAAAA,UAAA,GAM9B,GAN8BwF,EAAA5E,EAChC6E,kBADgC,IAAAD,EACnB,EADmBA,EAAAE,EAAA9E,EAEhC+E,iBAFgC,IAAAD,EAEpB,EAFoBA,EAAAE,EAAAhF,EAGhCiF,qBAHgC,IAAAD,EDNI,ICMJA,EAAAE,EAAAlF,EAIhCmF,oBAJgC,IAAAD,EDNI,ICMJA,EAAA7D,EAAArB,EAKhCsB,YALgC,IAAAD,EAKzB,MALyBA,EAAA,OAMvB+D,IAAM9D,GAAM,CACrB+D,MAAO,CACLC,MAAOT,EACPU,QAAS,EACTC,WAAY,CACVC,SAAUR,IAGdS,KAAM,CACJJ,MAAOP,EACPQ,QAAS,EACTC,WAAY,CACVC,SAAUN,OCxBhB/C,EAAAjB,EAAAkB,EAAA,sBAAAsD,yCCAAvD,EAAAjB,EAAAkB,EAAA,sBAAAuD,IAAA,IAAA3B,EAAA7B,EAAA,GAAA8B,EAAA9B,EAAA+B,EAAAF,GAAA4B,GAAAzD,EAAA,KAAAA,EAAA,KAAA0D,EAAA1D,EAAA,GAUawD,EAA6B,SAAA5F,GAAA,IACxC+F,EADwC/F,EACxC+F,KACA9F,EAFwCD,EAExCC,QAFwC,OAIxCiE,EAAA1F,EAAAc,cAAA,OAAKE,UAAU,gBAEXuG,GAAQA,EAAKrB,OACTqB,EAAKC,IAAI,SAACC,GAAD,OACT/B,EAAA1F,EAAAc,cAACuG,EAAA,EAADpI,OAAAyI,OAAA,CACE/H,IAAK8H,EAAK1B,MACN0B,EAFN,CAGEhG,QAASA,OAEXiE,EAAA1F,EAAAc,cAACwG,EAAA,EAAD,CAAYtG,UAAU,4BAAtB,oDCvBV4C,EAAAjB,EAAAkB,EAAA,sBAAA8D,IAAA,IAAAlC,EAAA7B,EAAA,GAAA8B,EAAA9B,EAAA+B,EAAAF,GAAAG,GAAAhC,EAAA,KAAAA,EAAA,IAaa+D,EAAqC,SAAAnG,GAAA,IAChDoG,EADgDpG,EAChDoG,SACAC,EAFgDrG,EAEhDqG,KACAC,EAHgDtG,EAGhDsG,MAHgD,OAKhDpC,EAAA1F,EAAAc,cAAA,OAAKE,UAAU,oBAEX4G,GAAYlC,EAAA1F,EAAAc,cAAA,OAAKN,IAAKoH,EAAU5G,UAAU,4BAE5C0E,EAAA1F,EAAAc,cAAA,MAAIE,UAAU,6BACZ0E,EAAA1F,EAAAc,cAAC8E,EAAA,EAAD,KACIkC,IAGNpC,EAAA1F,EAAAc,cAAC8E,EAAA,EAAD,KACIiC,mDC5BR,IAAAE,EAAAnE,EAAA,IAAAA,EAAAiB,EAAAkD,EAAA,sBAAAnE,EAAAjB,EAAAkB,EAAA,sCAAAkE,EAAA,wBAAAC,EAAApE,EAAA,IAAAA,EAAAjB,EAAAkB,EAAA,sCAAAmE,EAAA,kDCAApE,EAAAjB,EAAAkB,EAAA,sBAAAoE,IAAA,IAAAxC,EAAA7B,EAAA,GAAA8B,EAAA9B,EAAA+B,EAAAF,GAAAb,GAAAhB,EAAA,KAAAA,EAAA,KAYaqE,EAA6C,SAAAzG,GAAA,IACxD0G,EADwD1G,EACxD0G,QADwD,OAGxDxC,EAAA1F,EAAAc,cAAA,MAAIE,UAAU,yBAEVkH,EAAQV,IAAI,SAACW,EAAQC,GAAT,OACV1C,EAAA1F,EAAAc,cAAC8D,EAAA,cAAD3F,OAAAyI,OAAA,GAAmBS,EAAnB,CAA2BxI,IAAKyI,6yDCT3BC,EAA4B,SAAA7G,GAAA,OAAAvC,OAAAqJ,EAAA,EAAArJ,CAAAuC,GACvCX,EAAAb,EAAAc,cAAA,OAAKE,UAAU,wBACbH,EAAAb,EAAAc,cAAA,MAAIE,UAAU,iCACZH,EAAAb,EAAAc,cAACyH,EAAA,EAAD,4BAIF1H,EAAAb,EAAAc,cAAA,KAAGE,UAAU,8BACXH,EAAAb,EAAAc,cAACyH,EAAA,EAAD,yRAOF1H,EAAAb,EAAAc,cAAA,KAAGE,UAAU,8BACXH,EAAAb,EAAAc,cAACyH,EAAA,EAAD,0QCrBOC,UAA8B,kBACzC3H,EAAAb,EAAAc,cAAA,KAAGE,UAAU,yBACXyH,KACA,yIAGA5H,EAAAb,EAAAc,cAAA,OAAKE,UAAU,gCACb0H,IAAI,wBACJlI,IAAI,gGCHJmI,UAAgB,SAACC,GAAD,4BAAAzH,OAElByH,EACI,gCACA,MCVKC,EACX,kCAUK,IAAMC,EACX,oCCZK,IAAMC,EACX,sCAUK,IAAMC,EACX,wCCZK,IAAMC,EAAgC,gCAUtC,IAAMC,EACX,kCCZK,IAAMC,EAAW,WCAjB,IAAMC,EAAoB,oBAO1B,IAAMC,EAA4B,4BCPlC,IAAMC,EAAY,YAOlB,IAAMC,EAAa,aAUnB,IAAMC,EAAgB,gBAUtB,IAAMC,EAA6B,6BAUnC,IAAMC,EAAiB,iBAOvB,IAAMC,EAAqB,qBAU3B,IAAMC,EAAqB,qBAU3B,IAAMC,EAAkB,kBAOxB,IAAMC,EAAkB,kBAUxB,IAAMC,EAAoB,oBAa1B,IAAMC,EAAsB,0BChGvBC,SCKNC,EAAgC,SACpC3K,GADoC,OAEjCA,EAAM4K,oBAEEC,EAAiCC,YAC5CH,EACA,SAACC,GAAD,OAAiCA,EAAmBG,YAGzCC,EAA2BF,YACtCH,EACA,SAACC,GAAD,OAAmDA,EAAmB5C,OCPlEiD,EAAoC,SACxCjL,GADwC,OAEPA,EAAMkL,wBAE5BC,EAAoCL,YAC/CG,EACA,SAACG,GAAD,OAAiCA,EAAmBL,YAGzCM,EAA2BP,YACtCG,EACA,SAACG,GAAD,OAAmDA,EAAmBpD,OAG3DsD,EAA+BR,YAC1CO,EACA,SAACD,GAAD,OAA4CA,GAC1CA,EAAmB5E,OAGV+E,EAAmCT,YAC9CO,EACA,SAACD,GAAD,OAA4CA,GAC1CA,EAAmB7E,gBAGViF,EAAkCV,YAC7CO,EACA,SAACD,GAAD,OAAmDA,GACjDA,EAAmBK,UC5BjBC,EAA+B,SAAC1L,GAAD,OAAmBA,EAAM2L,mBAEjDC,EAA+Bd,YAC1CY,EACA,SAACC,GAAD,OAAgCA,EAAkBZ,YAGvCc,EAAsBf,YACjCY,EACA,SAACC,GAAD,OAAoDA,EAAkB3D,OAG3D8D,EAA0BhB,YACrCe,EACA,SAACE,GAAD,OAAwCA,GAAiBA,EAAcC,OAG5DC,EAA6BnB,YACxCe,EACA,SAACE,GAAD,OAA0CA,GACxCA,EAAcG,UAYLC,EAA2BrB,YACtCY,EACA,SAACC,GAAD,OAAuBA,EAAkBS,qBAG9BC,EAA0BvB,YACrCe,EACA,SAACE,GAAD,OAAuCA,GAAiBA,EAAcvF,yBHjD5DkE,2DIAL,ICIM4B,EAAiCC,YAAmB,GAAA3K,ODFjC,gBCEiC,SASpD4K,EAA6B1B,YACxCwB,EACA,SAACG,GAAD,OAAiBA,GAAeA,EAAYC,OAAOpG,KCX/CqG,EAAgB,SAAC3M,GAAD,OAAmBA,EAAM4M,IAElCC,GAAmB/B,YAC9B6B,EACA,SAACG,GAAD,OAAsBA,EAAQC,aAGnBC,GAAmBlC,YAC9B6B,EACA,SAACG,GAAD,OAAmBA,EAAQG,aAGhBC,GAAyBpC,YACpCkC,GACA,SAACC,GAAD,OAAyBA,IAAevC,EAAKyC,OAGlCC,GAA4BtC,YACvCkC,GACA,SAACC,GAAD,OAAyBA,IAAevC,EAAK2C,UAGlCC,GAA0BxC,YACrC6B,EACA,SAACG,GAAD,OAAiCA,EAAQS,YACvCT,EAAQS,WAAWC,gBAGVC,GAA2B3C,YACtC6B,EACA,SAACG,GAAD,OAAsBA,EAAQY,qBCvBnBC,GAAwC7C,YACnDK,EACAN,EACA,SAAC+C,EAA6BC,GAA9B,OACED,GAA+BC,IAItBC,GAA+BhD,YAC1CU,EACAR,EACA,SAAC+C,EAAoBC,GAArB,OACED,GAAsBC,GACpBA,EAAa/F,IAAI,SAAAhG,GAAA,IAAGqE,EAAHrE,EAAGqE,GAAIE,EAAPvE,EAAOuE,KAAP,MAAmB,CAClC6C,WAAY0E,EACTE,KAAK,SAACC,GAAD,OAAsBA,EAAiB5H,KAAOA,IACtDE,YCrBF2H,GAAgC,SACpCZ,EACAvF,GAFoC,OAGjCA,GAAQA,EAAKoG,OAAO,SAAAnM,GAAA,IAAGuE,EAAHvE,EAAGuE,KAAH,OACtB+G,GAAc/G,EAAKgH,cAAca,SAASd,MAGhCe,GAAwBxD,YACnCwC,GACAxB,EACA,SAACyB,EAAYvB,GAAb,OAA2CmC,GACzCZ,EACAvB,KAISuC,GAA0BzD,YACrCwC,GACArB,EACA,SAACsB,EAAYrB,GAAb,OAAgDiC,GAC9CZ,EACArB,iCC3BEsC,UAAcC,8CAAYD,aACzB,kEAEME,GACXD,8CAAYC,iBAAZ,GAAA9M,OAAkC4M,GAAlC,gBAEWG,GACXF,8CAAYE,uBAAZ,GAAA/M,OAAwC4M,GAAxC,kFCgBII,GAAmB,CACvB3E,EACAC,EACAH,EACAC,EACAG,EACAC,EACAP,EACAY,EACAD,YCNWqE,GAAWC,aCXkB,kBACxCC,aAAG,MAAMC,KACPC,afbK,CACL1L,KAAMqG,MgBsBkD,SAC1DsF,GAD0D,OAG1DA,EAASF,KACPG,aACEvF,EACAK,EACAC,GAEF+E,ajB/BK,CACL1L,KAAMmG,MiBkC6C,SACrDwF,EACAE,GAFqD,OAIrDF,EAASF,KACPG,aAAOzF,GACP2F,aAAeD,GACfnH,aAAI,SAAAhG,GAAA,IAAIjC,EAAJN,OAAA4P,GAAA,EAAA5P,CAAAuC,EAAA,aAAekK,EAAyBnM,KAC5CuP,aAAU,SAACC,GAAD,OCtC4B,SACxCA,GAEA,OAAOC,MAAK,GAAA7N,OACL8M,GADK,KAAA9M,OACc4N,IACxBE,KAAK,SAACC,GAAD,OAAUA,EAAKC,SDiCOC,CAA2BL,KACtDvH,aAAI,SAAC6H,GAAD,MjB/BC,CACLnE,kBiB8B8CmE,EjB7B9CvM,KAAMoG,OmBEmD,SAC3DuF,GAD2D,OAG3DA,EAASF,KACPG,aAAOvF,GACPqF,arBrBK,CACL1L,KAAM+F,MqBwB8C,SACtD4F,GADsD,OAGtDA,EAASF,KACPG,aAAO7F,GACPiG,aAAU,kBD7BLE,MAAMf,IAAiBgB,KAAK,SAACC,GAAD,OAAUA,EAAKC,WC8BhD3H,aAAI,SAAC8H,GAAD,OrBrBD,SACLA,GAEA,MAAO,CACLA,aACAxM,KAAMgG,GqBgBcyG,CAA6BD,OLFP,SAC5Cb,GAD4C,OAG5CA,EAASF,KACPZ,aAAO,SAAAnM,GAAA,IAAGsB,EAAHtB,EAAGsB,KAAH,OAAcqL,GAAiBP,SAAS9K,KAC/C0E,aAAI,SAAAgI,GAAA,IAAG1M,EAAH0M,EAAG1M,KAAH,OAAc2M,GAAG,OAAQ,QAAS3M,EAAMA,KAC5C4M,iBMnByC,SAC3CjB,GAD2C,OAG3CA,EAASF,KACPG,aAAOtF,GACPoF,aAAMnJ,aZ1BoB,YY8Be,SAC3CoJ,EACAE,GAF2C,OAI3CF,EAASF,KACPG,aAAO1E,GACP4E,aAAeD,GACfnH,aAAI,SAAAhG,GAAA,IbLuCmO,EaKvCH,EAAAvQ,OAAA4P,GAAA,EAAA5P,CAAAuC,EAAA,GACFoO,EADEJ,EAAA,GAEFjQ,EAFEiQ,EAAA,UbLuCG,EaStCC,EAA8BC,abRrCxF,YACEmB,EACA,SAACC,GAAD,OAAkCA,GAAWA,EAAQqE,KAAK,SAAAtO,GAAA,OAAAA,EAAGqE,KACpD8J,OaMLpQ,KAEJiI,aAAI,SAACuI,GAIH,OAHIA,GACFC,OAAOC,KAAKF,EAAOG,QAAS,UAEvB,CAAEpN,KAAM,QAKsB,SACzC2L,GADyC,OAGzCA,EAASF,KACPG,aAAO3E,GACPvC,aAAI,SAACoI,GAAD,OACFvK,aAAI,GAAAlE,OZ1DsB,gBY0DtB,KAAAA,OAAyByO,EAA4BO,iBAKnB,SAC1C1B,GAD0C,OAG1CA,EAASF,KACPG,aACErF,EACAI,EACAD,GAEFgF,aAAMnJ,aZzEoB,Ya0BmC,SAC/DoJ,GAD+D,OAG/DA,EAASF,KACPG,aAAO3E,GACPyE,atB1BK,CACL1L,KAAMiG,MsB6BkD,SAC1D0F,EACAE,GAF0D,OAI1DF,EAASF,KACPG,aACE3F,EACAI,GAEFyF,aAAeD,GACfnH,aAAI,SAAAhG,GAAA,IAAIjC,EAAJN,OAAA4P,GAAA,EAAA5P,CAAAuC,EAAA,aAAeuK,EAA2BxM,KAC9CoO,aAAO,SAACyC,GAAD,OAAmBC,QAAQD,KAClCtB,aAAU,SAACsB,GAAD,OH3BZE,EG2BkDF,EHzB3CpB,MAAK,GAAA7N,OAAI+M,GAAJ,KAAA/M,OAA6BmP,IACtCrB,KAAK,SAACC,GAAD,OAAUA,EAAKC,SAJS,IAChCmB,IG4BE9I,aAAI,SAAC+I,GAAD,OtBjCD,SACLA,GAEA,MAAO,CACL9F,uBAAwB8F,EACxBzN,KAAMkG,GsB4BmBwH,CAAiCD,oCCzCxDE,GAAkB,iBAAqC,CAC3DlJ,UAAMpB,EACNmE,WAAW,ICEb,IAAMmG,GAAkB,iBAAgC,CACtD9E,oBLKiD,IAAI+E,MAAOC,cKJ5DpJ,UAAMpB,EACNmE,WAAW,ICPb,IAAMmG,GAAkB,iBAAyB,CAC/ClJ,UAAMpB,EACNmE,WAAW,ICKb,IAAMmG,GAAkB,iBAAiB,CACvCjE,WAAYvC,EAAKyC,KACjBJ,YAAY,EACZW,oBAAoB,0BCUhB2D,GAAiBC,eACVC,GAAeC,eAEfC,GAAQC,aACnBC,aAAwB,CACtB/G,mBFpBG,WAGa,IAFlB5K,EAEkBqB,UAAAsF,OAAA,QAAAC,IAAAvF,UAAA,GAAAA,UAAA,GAFV6P,KACRb,EACkBhP,UAAAsF,OAAA,EAAAtF,UAAA,QAAAuF,EAClB,OAAQyJ,EAAO9M,MACb,KAAK+F,EACH,OAAO5J,OAAAkS,GAAA,EAAAlS,CAAA,GACFM,EADL,CAEE+K,WAAW,IAEf,KAAKxB,EACH,OAAO7J,OAAAkS,GAAA,EAAAlS,CAAA,GACFM,EADL,CAEEgI,KAAOqI,EAAyCN,WAChDhF,WAAW,IAEf,QACE,OAAO/K,IEITkL,uBJrBG,WAGyB,IAF9BlL,EAE8BqB,UAAAsF,OAAA,QAAAC,IAAAvF,UAAA,GAAAA,UAAA,GAFtB6P,KACRb,EAC8BhP,UAAAsF,OAAA,EAAAtF,UAAA,QAAAuF,EAC9B,OAAQyJ,EAAO9M,MACb,KAAKiG,EACH,OAAO9J,OAAAkS,GAAA,EAAAlS,CAAA,GACFM,EADL,CAEE+K,WAAW,IAEf,KAAKtB,EACH,OAAO/J,OAAAkS,GAAA,EAAAlS,CAAA,GACFM,EADL,CAEEgI,KAAOqI,EACJnF,uBACHH,WAAW,IAEf,QACE,OAAO/K,IIIT2L,kBHjBG,WAGoB,IAFzB3L,EAEyBqB,UAAAsF,OAAA,QAAAC,IAAAvF,UAAA,GAAAA,UAAA,GAFjB6P,KACRb,EACyBhP,UAAAsF,OAAA,EAAAtF,UAAA,QAAAuF,EACzB,OAAQyJ,EAAO9M,MACb,KAAKmG,EACH,OAAOhK,OAAAkS,GAAA,EAAAlS,CAAA,GACFM,EADL,CAEE+K,WAAW,IAEf,KAAKpB,EACH,OAAOjK,OAAAkS,GAAA,EAAAlS,CAAA,GACFM,EADL,CAEEgI,KAAOqI,EAAwC1E,kBAC/CZ,WAAW,IAEf,KAAKb,EACL,KAAKD,EACH,OAAOvK,OAAAkS,GAAA,EAAAlS,CAAA,GACFM,EADL,CAEEoM,mBAAqBiE,EAAyBb,cAElD,QACE,OAAOxP,IGLT6R,OAAQC,YAAcP,IACtB3E,GDhBG,WAGK,IAFV5M,EAEUqB,UAAAsF,OAAA,QAAAC,IAAAvF,UAAA,GAAAA,UAAA,GAFF6P,KACRb,EACUhP,UAAAsF,OAAA,EAAAtF,UAAA,QAAAuF,EACV,OAAQyJ,EAAO9M,MACb,KAAK0G,EACL,KAAKD,EACH,OAAOtK,OAAAkS,GAAA,EAAAlS,CAAA,GACFM,EADL,CAEE+M,YAAY,IAEhB,KAAKhD,EACH,OAAOrK,OAAAkS,GAAA,EAAAlS,CAAA,GACFM,EADL,CAEE+M,YAAY,IAEhB,KAAK5C,EACH,OAAOzK,OAAAkS,GAAA,EAAAlS,CAAA,GACFM,EADL,CAEEiN,WAAYvC,EAAKyC,OAErB,KAAK/C,EACH,OAAO1K,OAAAkS,GAAA,EAAAlS,CAAA,GACFM,EADL,CAEEiN,WAAYvC,EAAK2C,UAErB,KAAKhD,EACH,OAAO3K,OAAAkS,GAAA,EAAAlS,CAAA,GACFM,EADL,CAEEuN,WAAa8C,EAA6B0B,gBAE9C,KAAKzH,EACH,OAAO5K,OAAAkS,GAAA,EAAAlS,CAAA,GACFM,EADL,CAEE0N,oBAAoB,IAExB,KAAKnD,EACH,OAAO7K,OAAAkS,GAAA,EAAAlS,CAAA,GACFM,EADL,CAEE0N,oBAAoB,EACpBH,WAAY,KAEhB,QACE,OAAOvN,WCzBX4G,EACAoL,aACEC,aACEC,aAAiBX,IACjBF,MAINA,GAAec,IAAItD,IChBgBuD,YAdX,SACtBpS,GADsB,MAEI,CAC1BqS,iBAAkBnF,GAAuBlN,GACzCsS,oBAAqBlF,GAA0BpN,KAGtB,SACzBuS,GADyB,MAEI,CAC7BC,YAAa,kBAAMD,ExBcZ,CACLhP,KAAM4G,KwBdRsI,eAAgB,kBAAMF,ExBoBf,CACLhP,KAAM6G,OwBlByBgI,C9Bda,SAAAnQ,GAAA,IAC9CoQ,EAD8CpQ,EAC9CoQ,iBACAC,EAF8CrQ,EAE9CqQ,oBACAE,EAH8CvQ,EAG9CuQ,YACAC,EAJ8CxQ,EAI9CwQ,eAJ8C,OAM9CnR,EAAAb,EAAAc,cAAA,OAAKE,UAAU,iBACbH,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CACEvH,UAAW2H,EAAciJ,GACzBnQ,QAASsQ,GAFX,QAKAlR,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CACEvH,UAAW2H,EAAckJ,GACzBpQ,QAASuQ,GAFX,qB8BZJ,ICGaC,GAA6BN,YAPlB,SACtBpS,GADsB,MAEE,CACxB2S,kBAAmBtG,EAAwBrM,GAC3C+K,UAAWa,EAA6B5L,KAGAoS,CCXgB,SAAAnQ,GAAA,IACxD0Q,EADwD1Q,EACxD0Q,kBADwD,OAAA1Q,EAExD8I,UAMI,KAHAzJ,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CAAkBvH,UAAU,yBAC3BkR,KCIMC,WAA6BR,YANlB,SACtBpS,GADsB,MAEY,CAClC+K,UAAW4C,GAAsC3N,KAGToS,CCPT,SAAAnQ,GAAA,OAAAA,EAC/B8I,UAGIzJ,EAAAb,EAAAc,cAAA,OAAKE,UAAU,yBACfH,EAAAb,EAAAc,cAACyH,EAAA,EAAD,OAEA,QCaO6J,WAAiCT,YAdtB,SACtBpS,GADsB,MAEgB,CACtC8S,aAAcvH,EAAiCvL,GAC/C+S,SAAUzH,EAA6BtL,GACvC+K,UAAWI,EAAkCnL,KAGpB,SACzBuS,GADyB,MAEgB,CACzCS,SAAU,kBAAMT,E9BlBT,CACLhP,KAAMuG,O8BoBoCsI,CClBT,SAAAnQ,GAAA,IACnC6Q,EADmC7Q,EACnC6Q,aACAC,EAFmC9Q,EAEnC8Q,SACAhI,EAHmC9I,EAGnC8I,UACAiI,EAJmC/Q,EAInC+Q,SAJmC,OAMlCjI,EAiBC,KAhBEzJ,EAAAb,EAAAc,cAAA,OAAKE,UAAU,8BACjBH,EAAAb,EAAAc,cAAA,OAAKE,UAAU,uCACbH,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CACEvH,UAAU,0CACVS,QAAS8Q,GACT1R,EAAAb,EAAAc,cAACyH,EAAA,EAAD,OAEF1H,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CAAmBvH,UAAU,yCAC1BsR,IAIHD,GAAgBxR,EAAAb,EAAAc,cAAA,OAAKN,IAAK6R,EACxBrR,UAAU,iECKLwR,GAAqBb,YApBV,SACtBpS,GAEA,MAAO,CACLgM,KAAMsC,GAAsBtO,GAC5BqS,iBAAkBnF,GAAuBlN,GACzC+K,UAAWa,EAA6B5L,GACxCkM,QAASqC,GAAwBvO,KAIV,SACzBuS,GAEA,MAAO,CACLW,YAAa,SAACtC,GAAD,OAAgB2B,E/BkD1B,SACL3B,GAEA,MAAO,CACLA,aACArN,KAAMiH,G+BvDgC2I,CAAgBvC,KACtDwC,cAAe,SAAC9C,GAAD,OAAkBiC,E/B8D9B,SACLjC,GAEA,MAAO,CACLA,eACA/M,KAAMkH,G+BnEoC4I,CAAkB/C,OAI9B8B,CC1BT,SAAAnQ,GAAA,IACvBoQ,EADuBpQ,EACvBoQ,iBACAtH,EAFuB9I,EAEvB8I,UACAiB,EAHuB/J,EAGvB+J,KACAE,EAJuBjK,EAIvBiK,QACAgH,EALuBjR,EAKvBiR,YACAE,EANuBnR,EAMvBmR,cANuB,OAQvBrI,EACIzJ,EAAAb,EAAAc,cAAA,OAAKE,UAAU,yCACfH,EAAAb,EAAAc,cAACyH,EAAA,EAAD,OAEAqJ,EACE/Q,EAAAb,EAAAc,cAAC+R,GAAA,UAAD,CAAWtL,KAAMgE,EAAM9J,QAASgR,IAChC5R,EAAAb,EAAAc,cAAC+R,GAAA,UAAD,CAAWtL,KAAMkE,EAAShK,QAASkR,MCT9BG,WAAkBnB,YARP,iBAAO,IAEJ,SACzBG,GADyB,MAEC,CAC1BiB,WAAY,kBAAMjB,EjCXX,CACLhP,KAAMwG,OiCaqBqI,CCJkB,SAAAnQ,GAAA,IAC/CuR,EAD+CvR,EAC/CuR,WAD+C,OAG/ClS,EAAAb,EAAAc,cAAA,UAAQE,UAAU,YAChBH,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CAAYvH,UAAU,gBAAgBS,QAASsR,GAC7ClS,EAAAb,EAAAc,cAACyH,EAAA,EAAD,OAEF1H,EAAAb,EAAAc,cAAA,MAAIE,UAAU,kBACZH,EAAAb,EAAAc,cAACyH,EAAA,EAAD,sBAIF1H,EAAAb,EAAAc,cAACkS,GAAD,UCtBSC,WAAsB,SAAAzR,GAAA,IACjCJ,EADiCI,EACjCJ,SADiC,OAGjCP,EAAAb,EAAAc,cAAA,OAAKE,UAAU,iBACXI,gCCSA8R,GAA4BtU,eCmBrBuU,GAAsBxB,YAhBX,SACtBpS,GADsB,MAEK,CAC3B4K,mBAAoBI,EAAyBhL,GAC7CoM,mBAAoBD,EAAyBnM,GAC7C+K,UAAWF,EAA+B7K,GAC1C+M,WAAYF,GAAiB7M,KAGJ,SACzBuS,GADyB,MAEK,CAC9BsB,QAAS,kBAAMtB,ErCrBR,CACLhP,KAAMyG,KqCqBR8J,iBAAkB,SAACtE,GAAD,OAAyB+C,ErCbtC,SACL/C,GAEA,MAAO,CACLA,cACAjM,KAAM0G,GqCQ4C8J,CAAavE,OAGhC4C,CDjBT,SAAAnQ,GAAA,IACxB2I,EADwB3I,EACxB2I,mBACAwB,EAFwBnK,EAExBmK,mBACArB,EAHwB9I,EAGxB8I,UACAgC,EAJwB9K,EAIxB8K,WACA+G,EALwB7R,EAKxB6R,iBACAD,EANwB5R,EAMxB4R,QANwB,OAQxBvS,EAAAb,EAAAc,cAAA,WACED,EAAAb,EAAAc,cAACC,GAAA,EAAD,KAEIuL,GACAzL,EAAAb,EAAAc,cAACoS,GAAD,CAA2BvT,IAAI,sBAC7BqB,UAAU,yBACVS,QAAS2R,KAGfvS,EAAAb,EAAAc,cAAA,OACEE,UAAS,iBAAAG,OAAmBmL,EAAa,yBAA2B,KAEjEhC,EAcGzJ,EAAAb,EAAAc,cAAA,OAAKE,UAAU,0CACfH,EAAAb,EAAAc,cAACyH,EAAA,EAAD,OAdA4B,GAAsBA,EAAmB3C,IAAI,SAAAgI,EAAWpH,GAAX,IAAGrC,EAAHyJ,EAAGzJ,KAAH,OAC3ClF,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CACE5I,IAAKoG,EACL/E,UAAS,yBAAAG,OAELiH,IAAUuD,EACN,kCACA,IAERlK,QAAS,kBAAM4R,EAAiBjL,KAChCvH,EAAAb,EAAAc,cAACyH,EAAA,EAAD,KAAcxC,MAOxBlF,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CAAYvH,UAAU,2BACpBS,QAAS2R,GACTvS,EAAAb,EAAAc,cAACyH,EAAA,EAAD,WEtDKgL,GAAwB,SAAA/R,GAAA,IACnCJ,EADmCI,EACnCJ,SADmC,OAGnCP,EAAAb,EAAAc,cAAC0S,GAAD,KACE3S,EAAAb,EAAAc,cAACgS,GAAD,MACAjS,EAAAb,EAAAc,cAACqS,GAAD,MACE/R,ICIAqS,WAAwB,SAACxG,GAAD,MAC5B,gBAEIA,EACI,2BACA,MCWG+F,GAAqBrB,YAdV,SAACpS,GAAD,MAA0C,CAChE0N,mBAAoBD,GAAyBzN,KAGpB,SACzBuS,GADyB,MAEI,CAC7B4B,gBAAiB,kBAAM5B,ExCmDhB,CACLhP,KAAMgH,KwCnDR6J,gBAAiB,SAACrC,GAAD,OACfQ,ExC+BG,SACLR,GAEA,MAAO,CACLA,gBACAxO,KAAM8G,GwCpCIgK,CAAiBtC,KAE7BuC,gBAAiB,kBAAM/B,ExCwChB,CACLhP,KAAM+G,OwCtCwB8H,CDKa,SAAAnQ,GAAA,IAC7CyL,EAD6CzL,EAC7CyL,mBACAyG,EAF6ClS,EAE7CkS,gBACAC,EAH6CnS,EAG7CmS,gBACAE,EAJ6CrS,EAI7CqS,gBAJ6C,OAM7ChT,EAAAb,EAAAc,cAAA,OAAKE,UAAWyS,GAAsBxG,GACpC6G,IACE,SAACA,GAAD,OApB8B,SAClCA,EACA7G,GAEA,GAAI6G,GAAO7G,EAAoB,CAC7B,IAAM8G,EAAQD,EAAIE,cAAc,SAC5BD,GACFA,EAAME,SAcJC,CAA4BJ,EAAK7G,KAGrCpM,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CAAOvH,UAAU,sBACfgC,SAAU,SAACsO,GAAD,OAAmBqC,EAAgBrC,IAC7CvO,YAAY,WAEZkK,EACIpM,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CAAYvH,UAAU,8BACpBS,QAASiS,GACT7S,EAAAb,EAAAc,cAACyH,EAAA,EAAD,OAEF1H,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CAAYvH,UAAU,8BACpBS,QAASoS,GACThT,EAAAb,EAAAc,cAACyH,EAAA,EAAD,UE3BC4L,WAA0BxC,YAff,SACtBpS,GADsB,MAEQ,CAC9B+K,UAAWI,EAAkCnL,GAC7C6U,uBAAwB/G,GAA6B9N,KAG5B,SACzBuS,GADyB,MAEQ,CACjCuB,iBAAkB,SAACtE,GAAD,OAChB+C,EzCEG,SACL/C,GAEA,MAAO,CACLA,cACAjM,KAAM2G,GyCPG4K,CAAwBtF,OAIE4C,CCnBT,SAAAnQ,GAAA,IAC5B8I,EAD4B9I,EAC5B8I,UACA8J,EAF4B5S,EAE5B4S,uBACAf,EAH4B7R,EAG5B6R,iBAH4B,OAK3B/I,EAgDC,KA/CEzJ,EAAAb,EAAAc,cAACwT,EAAA,SAAD,KACFzT,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CACEvH,UAAU,mCADZ,4BAIAH,EAAAb,EAAAc,cAAA,OAAKE,UAAU,2BAEXoT,GAA0BA,EAAuB5M,IAAI,SAAAgI,EAKnDT,GALmD,IAEjDnG,EAFiD4G,EAEjD5G,WACA7C,EAHiDyJ,EAGjDzJ,KAHiD,OAOnDlF,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CACE5I,IAAKoG,EACL/E,UACE,6BAEI4H,EAAU,uCAEN,IAGVnH,QAAU,kBAAM4R,EAAiBtE,KACjClO,EAAAb,EAAAc,cAACyH,EAAA,EAAD,KACIxC,EAAKwO,UAAU,EAAG,QAM9B1T,EAAAb,EAAAc,cAAA,OACEE,UAAW,wEAGXH,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CAAWvH,UAAU,sCAArB,cAIFH,EAAAb,EAAAc,cAAA,OACEE,UAAU,gCACVH,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CAAWvH,UAAU,sCAArB,sBC3COwT,WAA6B7C,YARlB,iBAAO,IAEJ,SACzBG,GADyB,MAEY,CACrC2C,iBAAkB,kBAAM3C,E5CXjB,CACLhP,KAAMsG,O4CagCuI,CCR6B,SAAAnQ,GAAA,IACrEiT,EADqEjT,EACrEiT,iBADqE,OAGrE5T,EAAAb,EAAAc,cAACyH,EAAA,EAAD,CAAe9G,QAASgT,GAAxB,qBCDWC,GAAwB,kBACnC7T,EAAAb,EAAAc,cAAA,OAAKE,UAAU,oBACbH,EAAAb,EAAAc,cAAC6T,EAAD,MACA9T,EAAAb,EAAAc,cAAC0T,GAAD,QCAEI,WAAqC,CACzC1M,gBAGW2M,GAA0B,SAAArT,GAAA,OAAAvC,OAAAqJ,EAAA,EAAArJ,CAAAuC,GACrCX,EAAAb,EAAAc,cAAA,OAAKE,UAAU,sBACbH,EAAAb,EAAAc,cAAA,MAAIE,UAAU,+BACZH,EAAAb,EAAAc,cAACyH,EAAA,EAAD,2BAIF1H,EAAAb,EAAAc,cAAC+R,GAAA,kBAAsB+B,MCfdE,GAAkB,kBAC7BjU,EAAAb,EAAAc,cAACiU,GAAD,KACElU,EAAAb,EAAAc,cAAA,OAAKE,UAAU,6BACbH,EAAAb,EAAAc,cAACsR,GAAD,MACAvR,EAAAb,EAAAc,cAACqR,GAAD,MACAtR,EAAAb,EAAAc,cAACqT,GAAD,SCNOa,WAAgB,kBAC3BnU,EAAAb,EAAAc,cAACiU,GAAD,KACElU,EAAAb,EAAAc,cAAA,OAAKE,UAAU,2BACbH,EAAAb,EAAAc,cAACmR,GAAD,MACApR,EAAAb,EAAAc,cAAC0R,GAAD,UCJOyC,WAAY,kBACvBpU,EAAAb,EAAAc,cAAA,OAAKE,UAAU,gBACbH,EAAAb,EAAAc,cAAA,OAAKE,UAAU,6BACbH,EAAAb,EAAAc,cAAA,OAAKE,UAAU,6BAA6BR,IAAI,gBAChDK,EAAAb,EAAAc,cAACoU,GAAD,OAEFrU,EAAAb,EAAAc,cAACqU,EAAD,MACAtU,EAAAb,EAAAc,cAACsU,GAAD,MACAvU,EAAAb,EAAAc,cAAA,OAAKE,UAAU,wCACbH,EAAAb,EAAAc,cAACoU,GAAD,4BCGOG,GAAM,kBACjBxU,EAAAb,EAAAc,cAACwU,EAAA,EAAD,CAAUtE,MAAOA,IACfnQ,EAAAb,EAAAc,cAACyU,EAAA,EAAD,CAAiBC,QAAS1E,IACxBjQ,EAAAb,EAAAc,cAAA,OAAKE,UAAU,SACbH,EAAAb,EAAAc,cAAC2U,GAAA,EAAD,KACE5U,EAAAb,EAAAc,cAAC2U,GAAA,EAAD,CAAOC,K7C3BU,I6C2BSC,UAAWV,GAAWW,OAAK,IACrD/U,EAAAb,EAAAc,cAAC2U,GAAA,EAAD,CAAOC,K7C3Ba,Q6C2BSC,UAAWX,KACxCnU,EAAAb,EAAAc,cAAC2U,GAAA,EAAD,CAAOC,KAAI,GAAAvU,O7C3BW,gB6C2BX,QAA6BwU,UAAWb,UCjBzCzE,QACW,cAA7BL,OAAO6F,SAASC,UAEe,UAA7B9F,OAAO6F,SAASC,UAEhB9F,OAAO6F,SAASC,SAASC,MACvB,2DCZN,IAAMC,GAAc5Q,SAAS6Q,eAAe,QACxCD,IAAeA,GAAYE,gBAC7BC,kBAAQtV,EAAAb,EAAAc,cAACsV,GAAD,MAASJ,IAEjBK,iBAAOxV,EAAAb,EAAAc,cAACsV,GAAD,MAASJ,IDuHZ,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMvH,KAAK,SAAAwH,GACjCA,EAAaC","file":"static/js/main.e42b61dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './BackgroundImageWithLoadingSpinner.scss';\n\nimport {\n  loadImage\n} from '../../services/image-loader.service';\n\nimport {\n  LoadingSpinner\n} from '../../components-elements';\n\nimport {\n  fadeInOutAnimation\n} from '../../helpers';\n\nimport { PoseGroup } from 'react-pose';\n\nconst FadeInOutAnimation = fadeInOutAnimation();\n\ninterface IBackgroundImageWithLoadingSpinnerPropsInterface {\n  src: string;\n}\ninterface IBackgroundImageWithLoadingSpinnerStateInterface {\n  isVisible: boolean;\n}\n\nexport class BackgroundImageWithLoadingSpinner\nextends Component<\n  IBackgroundImageWithLoadingSpinnerPropsInterface,\n  IBackgroundImageWithLoadingSpinnerStateInterface\n> {\n  constructor(props: IBackgroundImageWithLoadingSpinnerPropsInterface) {\n    super(props);\n    this.state = {\n      isVisible: false\n    };\n  }\n\n  public async componentDidMount() {\n    await loadImage(this.props.src);\n    this.setState({\n      isVisible: true\n    });\n  }\n\n  public render() {\n    return (\n      <PoseGroup>\n        {\n          this.state.isVisible\n            ? <FadeInOutAnimation key='background-image-fade-in-out'\n              className='c-background-image-with-loading-spinner'\n              style={{ backgroundImage: `url(${this.props.src})` }}>\n              { this.props.children }\n            </FadeInOutAnimation>\n            : <FadeInOutAnimation key='loading-spinner-fade-in-out'\n              className='c-background-image-with-loading-spinner'>\n              <LoadingSpinner />\n            </FadeInOutAnimation>\n        }\n      </PoseGroup>\n    );\n  }\n}\n","import React, { SFC } from 'react';\nimport './BareButton.scss';\n\nexport const BareButton: SFC<{\n  className?: string,\n  onClick?: () => void\n}> = ({\n  className,\n  children,\n  onClick\n}) => (\n  <button className={`${(className || '')} c-bare-button`} onClick={onClick}>\n    { children }\n  </button>\n);\n","import React, { SFC } from 'react';\nimport './PrimaryButton.scss';\n\nexport const PrimaryButton: SFC<{\n  className?: string,\n  onClick?: () => void\n}> = ({\n  className,\n  children,\n  onClick\n}) => (\n  <button className={`${(className || '')} c-primary-button`}\n    onClick={onClick}>\n    { children }\n  </button>\n);\n","import React from 'react';\nimport './icon.scss';\n\nexport const ArrowIcon = () => (\n  <svg className='c-icon' viewBox='0 0 24 24'>\n    <g strokeLinecap='round' strokeWidth='2' stroke='#000'>\n      <line x1='1' y1='11' x2='6' y2='5' />\n      <line x1='1' y1='11' x2='6' y2='17' />\n      <line x1='2' y1='11' x2='22' y2='11' />\n    </g>\n  </svg>\n);\n","import React from 'react';\nimport './icon.scss';\n\nexport const BurgerIcon = () => (\n  <svg viewBox='0 0 24 24' className='c-icon'>\n    <rect height='2' width='24' y='5'></rect>\n    <rect height='2' width='24' y='11'></rect>\n    <rect height='2' width='24' y='17'></rect>\n  </svg>\n);\n","import React from 'react';\nimport './icon.scss';\n\nexport const CrossIcon = () => (\n  <svg className='c-icon' viewBox='0 0 24 24'>\n    {/* tslint:disable-next-line */}\n    <polygon points='19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12' />\n  </svg>\n);\n","import React from 'react';\nimport './icon.scss';\n\nexport const MagnifyingGlassIcon = () => (\n  <svg className='c-icon' viewBox='0 0 32 32'>\n    {/* tslint:disable-next-line */}\n    <path d='M19.4271164,21.4271164 C18.0372495,22.4174803 16.3366522,23 14.5,23 C9.80557939,23 6,19.1944206 6,14.5 C6,9.80557939 9.80557939,6 14.5,6 C19.1944206,6 23,9.80557939 23,14.5 C23,16.3366522 22.4174803,18.0372495 21.4271164,19.4271164 L27.0119176,25.0119176 C27.5621186,25.5621186 27.5575313,26.4424687 27.0117185,26.9882815 L26.9882815,27.0117185 C26.4438648,27.5561352 25.5576204,27.5576204 25.0119176,27.0119176 L19.4271164,21.4271164 L19.4271164,21.4271164 Z M14.5,21 C18.0898511,21 21,18.0898511 21,14.5 C21,10.9101489 18.0898511,8 14.5,8 C10.9101489,8 8,10.9101489 8,14.5 C8,18.0898511 10.9101489,21 14.5,21 L14.5,21 Z' />\n  </svg>\n);\n","import React, { SFC } from 'react';\nimport './Input.scss';\n\nexport const Input: SFC<{\n  className?: string,\n  type?: 'text' | 'number',\n  placeholder?: string,\n  onChange: (newValue: string) => void\n}> = ({\n  children,\n  className,\n  type = 'text',\n  placeholder,\n  onChange\n}) => (\n  <input\n    className={`${(className || '')} c-input`}\n    placeholder={placeholder}\n    type={type}\n    onChange={(event) => onChange(event.target.value)}>\n    { children }\n  </input>\n);\n","import React from 'react';\n\nimport './LoadingSpinner.scss';\n\nexport const LoadingSpinner = () => (\n  <div className='c-loading-spinner'>\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n  </div>\n);\n","import React, { SFC } from 'react';\nimport './TextHeadingLarge.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextHeadingLarge: SFC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-heading-large`}>\n    { children }\n  </span>\n);\n","import React, { SFC } from 'react';\nimport './TextHeadingMedium.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextHeadingMedium: SFC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-heading-medium`}>\n    { children }\n  </span>\n);\n","import React, { SFC } from 'react';\nimport './TextHeadingSmall.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextHeadingSmall: SFC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-heading-small`}>\n    { children }\n  </span>\n);\n","import React, { SFC } from 'react';\nimport './TextMedium.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextMedium: SFC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-medium`}>\n    { children }\n  </span>\n);\n","import React, { SFC } from 'react';\nimport './TextSmall.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextSmall: SFC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-small`}>\n    { children }\n  </span>\n);\n","export * from './BackgroundImageWithLoadingSpinner/BackgroundImageWithLoadingSpinner';\n\nexport * from './Buttons';\n\nexport * from './Icons';\n\nexport * from './Input';\n\nexport * from './LoadingSpinner/LoadingSpinner';\n\nexport * from './Text';\n","export * from './ImageGridItem/ImageGridItem';\n\nexport * from './ImageGrid/ImageGrid';\n\nexport * from './SummaryColumn';\n\nexport * from './SummaryColumnList';\n","const loadingImages = [];\n\nconst createImageOnLoadPromise = (\n  imageSrc: string\n): Promise<HTMLImageElement> => {\n  return new Promise((resolve) => {\n    const image = document.createElement('img');\n    image.src = imageSrc;\n    loadingImages.push(image);\n    image.addEventListener('load', () => {\n      resolve(image);\n    });\n  });\n};\n\nexport const loadImage = (\n  imageSrc: string\n): Promise<HTMLImageElement> => {\n  const onLoadPromise = createImageOnLoadPromise(imageSrc);\n  return onLoadPromise;\n};\n","import React, { SFC } from 'react';\n\nimport './ImageGridItem.scss';\n\nimport {\n  TextMedium\n} from '../../components-elements';\n\nimport {\n  BackgroundImageWithLoadingSpinner\n} from '../../components-elements';\nimport { IImageGridItem } from './ImageGridItem.interface';\n\nexport const ImageGridItem: SFC<IImageGridItem> = ({\n  id,\n  imageUrlSmall,\n  onClick,\n  name\n}) => (\n  <div onClick={() => onClick && onClick(id)}\n    className='c-image-grid-item'>\n    <div className='c-image-grid-item__inner'>\n      <div className='c-image-grid-item__image'>\n        <BackgroundImageWithLoadingSpinner src={imageUrlSmall}/>\n      </div>\n      <TextMedium className='c-image-grid-item__text'>\n        {name}\n      </TextMedium>\n    </div>\n  </div>\n);\n","export * from './SummaryColumn';\n\nexport * from './SummaryColumn.interface';\n","export const DEFAULT_ANIMATION_TIME = 500;\n","import posed from 'react-pose';\n\nimport {\n  DEFAULT_ANIMATION_TIME\n} from './animations.const';\n\nexport const fadeInOutAnimation = ({\n  enterDelay = 0,\n  exitDelay = 0,\n  enterDuration = DEFAULT_ANIMATION_TIME,\n  exitDuration = DEFAULT_ANIMATION_TIME,\n  type = 'div'\n} = {}) => posed[type]({\n  enter: {\n    delay: enterDelay,\n    opacity: 1,\n    transition: {\n      duration: enterDuration\n    }\n  },\n  exit: {\n    delay: exitDelay,\n    opacity: 0,\n    transition: {\n      duration: exitDuration\n    }\n  }\n});\n","export * from './Animations';\n","import React, { SFC } from 'react';\n\nimport './ImageGrid.scss';\n\nimport {\n  ImageGridItem\n} from '../ImageGridItem/ImageGridItem';\nimport { IImageGrid } from './ImageGrid.interface';\nimport { TextMedium } from '../../components-elements';\n\nexport const ImageGrid: SFC<IImageGrid> = ({\n  data,\n  onClick\n}) => (\n  <div className='c-image-grid'>\n    {\n      data && data.length\n        ? data.map((item) => (\n          <ImageGridItem\n            key={item.name}\n            {...item}\n            onClick={onClick} />\n        ))\n        : <TextMedium className='c-image-grid__no-results'>\n            No results found\n          </TextMedium>\n    }\n  </div>\n);\n","import React, { SFC } from 'react';\n\nimport './SummaryColumn.scss';\n\nimport {\n  TextMedium,\n  TextHeadingSmall\n} from '../../components-elements';\n\nimport {\n  ISummaryColumn\n} from './SummaryColumn.interface';\n\nexport const SummaryColumn: SFC<ISummaryColumn> = ({\n  imageUrl,\n  text,\n  title\n}) => (\n  <div className='c-summary-column'>\n    {\n      imageUrl && <img src={imageUrl} className='c-summary-column__image' />\n    }\n    <h3 className='c-summary-column__heading'>\n      <TextHeadingSmall>\n        { title }\n      </TextHeadingSmall>\n    </h3>\n    <TextMedium>\n      { text }\n    </TextMedium>\n  </div>\n);\n","export * from './SummaryColumnList.interface';\n\nexport * from './SummaryColumnList';\n","import React, { SFC } from 'react';\n\nimport './SummaryColumnList.scss';\n\nimport {\n  SummaryColumn\n} from './../SummaryColumn';\n\nimport {\n  ISummaryColumnList\n} from './SummaryColumnList.interface';\n\nexport const SummaryColumnList: SFC<ISummaryColumnList> = ({\n  columns\n}) => (\n  <ul className='c-summary-column-list'>\n    {\n      columns.map((column, index) => (\n        <SummaryColumn {...column} key={index} />\n      ))\n    }\n  </ul>\n);\n","import React, { SFC } from 'react';\n\nimport './AboutEatSeasonal.scss';\n\nimport {\n  TextHeadingLarge,\n  TextMedium\n} from '../../components-elements';\n\nexport const AboutEatSeasonal: SFC<{}> = ({}) => (\n  <div className='c-about-eat-seasonal'>\n    <h2 className='c-about-eat-seasonal__heading'>\n      <TextHeadingLarge>\n        About Eat Seasonal\n      </TextHeadingLarge>\n    </h2>\n    <p className='c-about-eat-seasonal__text'>\n      <TextMedium>\n        Eat Seasonal started because we wanted a way to easily see what fruit\n        and vegetables are in seasons. Walking around a supermarket, trying to\n        plan seasonal meals becomes much easier when you can quickly access\n        information on everything that's in season through your phone.\n      </TextMedium>\n    </p>\n    <p className='c-about-eat-seasonal__text'>\n      <TextMedium>\n        The app and website give you quick and simple view of all the food\n        currently in seasons. They also provide a recipes section including\n        carefully selected recipes which use ingredients which are mostly in\n        seasons. New recipes are being added all the time!\n      </TextMedium>\n    </p>\n  </div>\n);\n","import React, { SFC } from 'react';\n\nimport './AndroidAppDownload.scss';\n\nexport const AndroidAppDownload: SFC<{}> = () => (\n  <a className='c-android-app-download'\n    href={\n    'https://play.google.com/store/apps/details?id=com.chrisbdev.seasonal&p' +\n      'campaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'\n  }>\n    <img className='c-android-app-download__image'\n      alt='Get it on Google Play'\n      src='https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png'/>\n  </a>\n);\n","import React, { SFC } from 'react';\n\nimport './BottomTabs.scss';\n\nimport {\n  BareButton\n} from '../../components-elements';\nimport { IBottomTabProps } from './BottomTabs.interface';\n\nconst addTabClasses = (isSelected: boolean) => (\n  `c-bottom-tabs__tab ${\n    isSelected\n      ? ' c-bottom-tabs__tab--selected'\n      : ''\n  }`\n);\n\nexport const BottomTabs: SFC<IBottomTabProps> = ({\n  isCurrentTabFood,\n  isCurrentTabRecipes,\n  goToFoodTab,\n  goToRecipesTab\n}) => (\n  <nav className='c-bottom-tabs'>\n    <BareButton\n      className={addTabClasses(isCurrentTabFood)}\n      onClick={goToFoodTab}>\n      Food\n    </BareButton>\n    <BareButton\n      className={addTabClasses(isCurrentTabRecipes)}\n      onClick={goToRecipesTab}>\n      Recipes\n    </BareButton>\n  </nav>\n);\n","import { Action } from 'redux';\nimport { IBaseSeason } from '@chrisb-dev/seasonal-shared';\n\nexport const SET_ALL_BASIC_SEASON_DATA_START =\n  'SET_ALL_BASIC_SEASON_DATA_START';\nexport function setAllBasicSeasonDataStart(): Action {\n  return {\n    type: SET_ALL_BASIC_SEASON_DATA_START\n  };\n}\n\nexport interface ISetAllBasicSeasonDataSuccess extends Action {\n  seasonData: IBaseSeason[];\n}\nexport const SET_ALL_BASIC_SEASON_DATA_SUCCESS =\n  'SET_ALL_BASIC_SEASON_DATA_SUCCESS';\nexport function setAllBasicSeasonDataSuccess(\n  seasonData: IBaseSeason[]\n): ISetAllBasicSeasonDataSuccess {\n  return {\n    seasonData,\n    type: SET_ALL_BASIC_SEASON_DATA_SUCCESS\n  };\n}\n","import { IHydratedFood } from '@chrisb-dev/seasonal-shared';\nimport { Action } from 'redux';\n\nexport const SET_CURRENT_FOOD_DETAILS_DATA_START =\n  'SET_CURRENT_FOOD_DETAILS_DATA_START';\nexport function setCurrentFoodDetailsDataStart(): Action {\n  return {\n    type: SET_CURRENT_FOOD_DETAILS_DATA_START\n  };\n}\n\nexport interface ISetCurrentFoodDetailsDataSuccess extends Action {\n  currentFoodDetailsData: IHydratedFood;\n}\nexport const SET_CURRENT_FOOD_DETAILS_DATA_SUCCESS =\n  'SET_CURRENT_FOOD_DETAILS_DATA_SUCCESS';\nexport function setCurrentFoodDetailsDataSuccess(\n  currentFoodData: IHydratedFood\n): ISetCurrentFoodDetailsDataSuccess {\n  return {\n    currentFoodDetailsData: currentFoodData,\n    type: SET_CURRENT_FOOD_DETAILS_DATA_SUCCESS\n  };\n}\n","import { IHydratedSeason } from '@chrisb-dev/seasonal-shared';\nimport { Action } from 'redux';\n\nexport const SET_CURRENT_SEASON_DATA_START = 'SET_CURRENT_SEASON_DATA_START';\nexport function setCurrentSeasonDataStart(): Action {\n  return {\n    type: SET_CURRENT_SEASON_DATA_START\n  };\n}\n\nexport interface ISetCurrentSeasonDataSuccess extends Action {\n  currentSeasonData: IHydratedSeason;\n}\nexport const SET_CURRENT_SEASON_DATA_SUCCESS =\n  'SET_CURRENT_SEASON_DATA_SUCCESS';\nexport function setCurrentSeasonDataSuccess(\n  currentSeasonData: IHydratedSeason\n): ISetCurrentSeasonDataSuccess {\n  return {\n    currentSeasonData,\n    type: SET_CURRENT_SEASON_DATA_SUCCESS\n  };\n}\n","import { Action } from 'redux';\n\nexport const INIT_APP = 'INIT_APP';\nexport function initApp(): Action {\n  return {\n    type: INIT_APP\n  };\n}\n","import { Action } from 'redux';\n\nexport const GO_TO_WEB_VERSION = 'GO_TO_WEB_VERSION';\nexport function goToWebVersion(): Action {\n  return {\n    type: GO_TO_WEB_VERSION\n  };\n}\n\nexport const GO_BACK_FROM_FOOD_DETAILS = 'GO_BACK_FROM_FOOD_DETAILS';\nexport function goBackFromFoodDetails(): Action {\n  return {\n    type: GO_BACK_FROM_FOOD_DETAILS\n  };\n}\n","import { Action } from 'redux';\n\nexport const OPEN_MENU = 'OPEN_MENU';\nexport function openMenu(): Action {\n  return {\n    type: OPEN_MENU\n  };\n}\n\nexport const CLOSE_MENU = 'CLOSE_MENU';\nexport function closeMenu(): Action {\n  return {\n    type: CLOSE_MENU\n  };\n}\n\nexport interface ISelectSeason extends Action {\n  seasonIndex: number;\n}\nexport const SELECT_SEASON = 'SELECT_SEASON';\nexport function selectSeason(\n  seasonIndex: number\n): ISelectSeason {\n  return {\n    seasonIndex,\n    type: SELECT_SEASON\n  };\n}\n\nexport const FOOD_DETAILS_SELECT_SEASON = 'FOOD_DETAILS_SELECT_SEASON';\nexport function foodDetailsSelectSeason(\n  seasonIndex: number\n): ISelectSeason {\n  return {\n    seasonIndex,\n    type: FOOD_DETAILS_SELECT_SEASON\n  };\n}\n\nexport const GO_TO_FOOD_TAB = 'GO_TO_FOOD_TAB';\nexport function goToFoodTab(): Action {\n  return {\n    type: GO_TO_FOOD_TAB\n  };\n}\n\nexport const GO_TO_RECIPES_TABS = 'GO_TO_RECIPES_TABS';\nexport function goToRecipesTab(): Action {\n  return {\n    type: GO_TO_RECIPES_TABS\n  };\n}\n\nexport interface ISearchBarChanged extends Action {\n  newSearchTerm: string;\n}\nexport const SEARCH_BAR_CHANGED = 'SEARCH_BAR_CHANGED';\nexport function searchBarChanged(\n  newSearchTerm: string\n): ISearchBarChanged {\n  return {\n    newSearchTerm,\n    type: SEARCH_BAR_CHANGED\n  };\n}\n\nexport const SHOW_SEARCH_BAR = 'SHOW_SEARCH_BAR';\nexport function showSearchBar(): Action {\n  return {\n    type: SHOW_SEARCH_BAR\n  };\n}\n\nexport const HIDE_SEARCH_BAR = 'HIDE_SEARCH_BAR';\nexport function hideSearchBar(): Action {\n  return {\n    type: HIDE_SEARCH_BAR\n  };\n}\n\nexport interface IFoodItemClicked extends Action {\n  foodItemId: string;\n}\nexport const FOOD_ITEM_CLICKED = 'FOOD_ITEM_CLICKED';\nexport function foodItemClicked(\n  foodItemId: string\n): IFoodItemClicked {\n  return {\n    foodItemId,\n    type: FOOD_ITEM_CLICKED\n  };\n}\n\nexport interface IRecipeItemClicked extends Action {\n  recipeItemId: string;\n}\nexport const RECIPE_ITEM_CLICKED = 'RECIPE_ITEM_CLICKED';\nexport function recipeItemClicked(\n  recipeItemId: string\n): IRecipeItemClicked {\n  return {\n    recipeItemId,\n    type: RECIPE_ITEM_CLICKED\n  };\n}\n","export enum TABS {\n  FOOD,\n  RECIPES\n}\n","\nimport { createSelector } from 'reselect';\nimport { IState } from '../../interfaces';\nimport { IBaseSeason } from '@chrisb-dev/seasonal-shared';\n\nconst selectAllBasicSeasonDataState = (\n  state: IState\n) => state.allBasicSeasonData;\n\nexport const selectIsBasicSeasonDataLoading = createSelector(\n  selectAllBasicSeasonDataState,\n  (allBasicSeasonData): boolean => allBasicSeasonData.isLoading\n);\n\nexport const selectAllBasicSeasonData = createSelector(\n  selectAllBasicSeasonDataState,\n  (allBasicSeasonData): IBaseSeason[] | undefined => allBasicSeasonData.data\n);\n","import { createSelector } from 'reselect';\nimport {\n  IState, ICurrentFoodDetailsDataState\n} from '../../interfaces';\nimport {\n  IHydratedFood,\n  IBaseSeason\n} from '@chrisb-dev/seasonal-shared';\n\nconst selectCurrentFoodDetailsDataState = (\n  state: IState\n): ICurrentFoodDetailsDataState => state.currentFoodDetailsData;\n\nexport const selectIsCurrentFoodDetailsLoading = createSelector(\n  selectCurrentFoodDetailsDataState,\n  (currentFoodDetails): boolean => currentFoodDetails.isLoading\n);\n\nexport const selectCurrentFoodDetails = createSelector(\n  selectCurrentFoodDetailsDataState,\n  (currentFoodDetails): IHydratedFood | undefined => currentFoodDetails.data\n);\n\nexport const selectCurrentFoodDetailsName = createSelector(\n  selectCurrentFoodDetails,\n  (currentFoodDetails): string | undefined => currentFoodDetails &&\n    currentFoodDetails.name\n);\n\nexport const selectCurrentFoodDetailsImageUrl = createSelector(\n  selectCurrentFoodDetails,\n  (currentFoodDetails): string | undefined => currentFoodDetails &&\n    currentFoodDetails.imageUrlSmall\n);\n\nexport const selectCurrentFoodDetailsSeasons = createSelector(\n  selectCurrentFoodDetails,\n  (currentFoodDetails): IBaseSeason[] | undefined => currentFoodDetails &&\n    currentFoodDetails.seasons\n);\n","import { createSelector } from 'reselect';\nimport {\n  IState\n} from '../../interfaces';\nimport {\n  IHydratedSeason,\n  IFood,\n  IRecipe\n} from '@chrisb-dev/seasonal-shared';\n\nconst selectCurrentSeasonDataState = (state: IState) => state.currentSeasonData;\n\nexport const selectIsCurrentSeasonLoading = createSelector(\n  selectCurrentSeasonDataState,\n  (currentSeasonData): boolean => currentSeasonData.isLoading\n);\n\nexport const selectCurrentSeason = createSelector(\n  selectCurrentSeasonDataState,\n  (currentSeasonData): IHydratedSeason | undefined => currentSeasonData.data\n);\n\nexport const selectCurrentSeasonFood = createSelector(\n  selectCurrentSeason,\n  (currentSeason): IFood[] | undefined => currentSeason && currentSeason.food\n);\n\nexport const selectCurrentSeasonRecipes = createSelector(\n  selectCurrentSeason,\n  (currentSeason): IRecipe[] | undefined => currentSeason &&\n    currentSeason.recipes\n);\n\nexport const selectCurrentSeasonRecipesById = (recipeId: string) => (\n  createSelector(\n    selectCurrentSeasonRecipes,\n    (recipes): IRecipe | undefined => recipes && recipes.find(({ id }) => (\n      id === recipeId\n    ))\n  )\n);\n\nexport const selectCurrentSeasonIndex = createSelector(\n  selectCurrentSeasonDataState,\n  (currentSeasonData) => currentSeasonData.currentSeasonIndex\n);\n\nexport const selectCurrentSeasonName = createSelector(\n  selectCurrentSeason,\n  (currentSeason): string | undefined => currentSeason && currentSeason.name\n);\n","export const LANDING_URL = '/';\nexport const FOOD_TABLE_URL = '/food';\nexport const FOOD_DETAILS_URL = '/food-details';\n","import { createMatchSelector, RouterRootState } from 'connected-react-router';\nimport { FOOD_DETAILS_URL } from '../../const';\nimport { createSelector } from 'reselect';\n\nexport const selectCurrentFoodDetailsParams = createMatchSelector<\n  RouterRootState,\n  {\n    id: string\n  }\n>(\n  `${FOOD_DETAILS_URL}/:id`\n);\n\nexport const selectCurrentFoodDetailsId = createSelector(\n  selectCurrentFoodDetailsParams,\n  (routeParams) => routeParams && routeParams.params.id\n);\n","import { createSelector } from 'reselect';\nimport { IState } from '../../interfaces';\nimport { TABS } from '../../const';\n\nconst selectUiState = (state: IState) => state.ui;\n\nexport const selectIsMenuOpen = createSelector(\n  selectUiState,\n  (uiState): boolean => uiState.isMenuOpen\n);\n\nexport const selectCurrentTab = createSelector(\n  selectUiState,\n  (uiState): TABS => uiState.currentTab\n);\n\nexport const selectIsCurrentTabFood = createSelector(\n  selectCurrentTab,\n  (currentTab): boolean => currentTab === TABS.FOOD\n);\n\nexport const selectIsCurrentTabRecipes = createSelector(\n  selectCurrentTab,\n  (currentTab): boolean => currentTab === TABS.RECIPES\n);\n\nexport const selectCurrentSearchTerm = createSelector(\n  selectUiState,\n  (uiState): string | undefined => uiState.searchTerm &&\n    uiState.searchTerm.toLowerCase()\n);\n\nexport const selectIsSearchBarVisible = createSelector(\n  selectUiState,\n  (uiState): boolean => uiState.isSearchBarVisible\n);\n","import { createSelector } from 'reselect';\nimport {\n  selectIsCurrentFoodDetailsLoading,\n  selectCurrentFoodDetailsSeasons\n} from '../current-food-details-data.selectors';\nimport {\n  selectIsBasicSeasonDataLoading,\n  selectAllBasicSeasonData\n} from '../all-season-data.selectors';\nimport { ISelectableItem } from '@chrisb-dev/seasonal-shared';\n\nexport const selectIsFoodDataOrBasicSeasonsLoading = createSelector(\n  selectIsCurrentFoodDetailsLoading,\n  selectIsBasicSeasonDataLoading,\n  (isCurrentFoodDetailsLoading, isBasicSeasonDataLoading): boolean => (\n    isCurrentFoodDetailsLoading || isBasicSeasonDataLoading\n  )\n);\n\nexport const selectSeasonsSelectedForFood = createSelector(\n  selectCurrentFoodDetailsSeasons,\n  selectAllBasicSeasonData,\n  (foodDetailsSeasons, basicSeasons): ISelectableItem[] | undefined => (\n    foodDetailsSeasons && basicSeasons &&\n      basicSeasons.map(({ id, name }) => ({\n        isSelected: foodDetailsSeasons\n          .some((foodDetailSeason) => foodDetailSeason.id === id),\n        name\n      }))\n));\n","\nimport { createSelector } from 'reselect';\nimport { selectCurrentSearchTerm } from '../ui.selectors';\nimport { selectCurrentSeasonFood, selectCurrentSeasonRecipes } from '../current-season-data.selectors';\nimport { IFood, IRecipe } from '@chrisb-dev/seasonal-shared';\n\nconst getDataThatContainsSearchTerm = <T extends { name: string }>(\n  searchTerm: string | undefined,\n  data: T[] | undefined\n) => data && data.filter(({ name }) => (\n  !searchTerm || name.toLowerCase().includes(searchTerm)\n));\n\nexport const selectVisibleFoodData = createSelector(\n  selectCurrentSearchTerm,\n  selectCurrentSeasonFood,\n  (searchTerm, food): IFood[] | undefined => getDataThatContainsSearchTerm(\n    searchTerm,\n    food\n  )\n);\n\nexport const selectVisibleRecipeData = createSelector(\n  selectCurrentSearchTerm,\n  selectCurrentSeasonRecipes,\n  (searchTerm, recipes): IRecipe[] | undefined => getDataThatContainsSearchTerm(\n    searchTerm,\n    recipes\n  )\n);\n","const BACKEND_URL = process.env.BACKEND_URL\n    || 'https://6usraevcmc.execute-api.eu-west-2.amazonaws.com/prod/v1';\n\nexport const SEASON_DATA_URL =\n  process.env.SEASON_DATA_URL || `${BACKEND_URL}/season-data`;\n\nexport const FOOD_DETAILS_DATA_URL =\n  process.env.FOOD_DETAILS_DATA_URL || `${BACKEND_URL}/food-data`;\n","import { ActionsObservable } from 'redux-observable';\n\nimport {\n  SELECT_SEASON,\n  FOOD_DETAILS_SELECT_SEASON,\n  OPEN_MENU,\n  CLOSE_MENU,\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS,\n  GO_TO_WEB_VERSION,\n  RECIPE_ITEM_CLICKED,\n  FOOD_ITEM_CLICKED\n} from '../actions';\n\nimport {\n  map,\n  filter,\n  ignoreElements\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { Observable } from 'rxjs';\nimport { SeasonalEpic } from './seasonal-epic.type';\n\nconst ACTIONS_TO_TRACK = [\n  SELECT_SEASON,\n  FOOD_DETAILS_SELECT_SEASON,\n  OPEN_MENU,\n  CLOSE_MENU,\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS,\n  GO_TO_WEB_VERSION,\n  RECIPE_ITEM_CLICKED,\n  FOOD_ITEM_CLICKED\n];\n\nexport const trackActionEpic$: SeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    filter(({ type }) => ACTIONS_TO_TRACK.includes(type)),\n    map(({ type }) => ga('send', 'event', type, type)),\n    ignoreElements()\n  )\n);\n","import { combineEpics } from 'redux-observable';\n\nimport {\n  getCurrentSeasonDataStartEpic$,\n  getCurrentSeasonDataEpic$\n} from './current-season-data.epics';\n\nimport { initAppEpic$ } from './init.epics';\n\nimport {\n  getAllBasicSeasonDataStartEpic$,\n  getAllBasicSeasonDataEpic$\n} from './all-basic-season-data.epics';\nimport { trackActionEpic$ } from './tracking.epics';\n\nimport {\n  goToWebVersion$,\n  goToRecipeLink$,\n  goToFoodLink$,\n  goToFoodTable$\n} from './route.epics';\nimport {\n  getCurrentFoodDetailsDataEpic$,\n  getCurrentFoodDetailsDataStartEpic$\n} from './current-food-details-data.epics';\n\nexport const rootEpic = combineEpics(\n  initAppEpic$,\n  getCurrentSeasonDataStartEpic$,\n  getCurrentSeasonDataEpic$,\n  getAllBasicSeasonDataStartEpic$,\n  getAllBasicSeasonDataEpic$,\n  trackActionEpic$,\n  goToWebVersion$,\n  goToRecipeLink$,\n  goToFoodLink$,\n  goToFoodTable$,\n  getCurrentFoodDetailsDataStartEpic$,\n  getCurrentFoodDetailsDataEpic$\n);\n","import {\n  initApp\n} from '../actions';\n\nimport {\n  of,\n  Observable\n} from 'rxjs';\n\nimport {\n  mapTo\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { SeasonalEpic } from './seasonal-epic.type';\n\nexport const initAppEpic$: SeasonalEpic = (): Observable<Action> => (\n  of(null).pipe(\n    mapTo(initApp())\n  )\n);\n","import { ofType, StateObservable, ActionsObservable } from 'redux-observable';\n\nimport {\n  getSeasonDataBySeasonIndex\n} from '../../services';\n\nimport {\n  INIT_APP,\n  SET_CURRENT_SEASON_DATA_START,\n  setCurrentSeasonDataSuccess,\n  setCurrentSeasonDataStart,\n  SELECT_SEASON,\n  FOOD_DETAILS_SELECT_SEASON\n} from '../actions';\n\nimport {\n  map,\n  switchMap,\n  withLatestFrom,\n  mapTo\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { IState } from '../../interfaces';\nimport { selectCurrentSeasonIndex } from '../selectors';\nimport { Observable } from 'rxjs';\nimport { SeasonalEpic } from './seasonal-epic.type';\n\nexport const getCurrentSeasonDataStartEpic$: SeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      INIT_APP,\n      SELECT_SEASON,\n      FOOD_DETAILS_SELECT_SEASON\n    ),\n    mapTo(setCurrentSeasonDataStart())\n  )\n);\n\nexport const getCurrentSeasonDataEpic$: SeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(SET_CURRENT_SEASON_DATA_START),\n    withLatestFrom(state$),\n    map(([, state]) => selectCurrentSeasonIndex(state)),\n    switchMap((seasonIndex) => getSeasonDataBySeasonIndex(seasonIndex)),\n    map((foodData) => setCurrentSeasonDataSuccess(foodData))\n  )\n);\n","import {\n  FOOD_DETAILS_DATA_URL,\n  SEASON_DATA_URL\n} from '././../config';\nimport { IBaseSeason, IHydratedSeason, IHydratedFood } from '@chrisb-dev/seasonal-shared';\n\nexport const getAllSeasonData = (): Promise<IBaseSeason[]> => {\n  return fetch(SEASON_DATA_URL).then((resp) => resp.json());\n};\n\nexport const getSeasonDataBySeasonIndex = (\n  seasonIndex: number\n): Promise<IHydratedSeason> => {\n  return fetch(\n      `${SEASON_DATA_URL}/${seasonIndex}`\n  ).then((resp) => resp.json());\n};\n\nexport const getCurrentSeasonIndex = (): number => new Date().getUTCMonth();\n\nexport const getFoodDetailsData = (\n  foodId: string | null\n): Promise<IHydratedFood> => {\n  return fetch(`${FOOD_DETAILS_DATA_URL}/${foodId}`)\n    .then((resp) => resp.json());\n};\n","import { ofType, ActionsObservable } from 'redux-observable';\n\nimport {\n  getAllSeasonData\n} from '../../services';\n\nimport {\n  INIT_APP,\n  SET_ALL_BASIC_SEASON_DATA_START,\n  setAllBasicSeasonDataStart,\n  setAllBasicSeasonDataSuccess\n} from '../actions';\n\nimport {\n  map,\n  switchMap,\n  mapTo\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { Observable } from 'rxjs';\nimport { SeasonalEpic } from './seasonal-epic.type';\n\nexport const getAllBasicSeasonDataStartEpic$: SeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(INIT_APP),\n    mapTo(setAllBasicSeasonDataStart())\n  )\n);\n\nexport const getAllBasicSeasonDataEpic$: SeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(SET_ALL_BASIC_SEASON_DATA_START),\n    switchMap(() => getAllSeasonData()),\n    map((seasonData) => setAllBasicSeasonDataSuccess(seasonData))\n  )\n);\n","import { ActionsObservable, ofType, StateObservable } from 'redux-observable';\nimport {\n  mapTo, withLatestFrom, map\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { Observable } from 'rxjs';\nimport { SeasonalEpic } from './seasonal-epic.type';\nimport {\n  RECIPE_ITEM_CLICKED,\n  IRecipeItemClicked,\n  GO_TO_WEB_VERSION,\n  FOOD_ITEM_CLICKED,\n  IFoodItemClicked,\n  GO_BACK_FROM_FOOD_DETAILS,\n  FOOD_DETAILS_SELECT_SEASON,\n  SELECT_SEASON\n} from '../actions';\nimport { push } from 'connected-react-router';\nimport { FOOD_TABLE_URL, FOOD_DETAILS_URL } from '../../const';\nimport { IState } from '../../interfaces';\nimport { selectCurrentSeasonRecipesById } from '../selectors';\n\nexport const goToWebVersion$: SeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(GO_TO_WEB_VERSION),\n    mapTo(push(FOOD_TABLE_URL))\n  )\n);\n\nexport const goToRecipeLink$: SeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(RECIPE_ITEM_CLICKED),\n    withLatestFrom(state$),\n    map(([\n      action,\n      state\n    ]) => selectCurrentSeasonRecipesById(\n        (action as IRecipeItemClicked).recipeItemId\n      )(state)\n    ),\n    map((recipe) => {\n      if (recipe) {\n        window.open(recipe.linkUrl, '_blank');\n      }\n      return { type: '' };\n    })\n  )\n);\n\nexport const goToFoodLink$: SeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(FOOD_ITEM_CLICKED),\n    map((action) => (\n      push(`${FOOD_DETAILS_URL}/${(action as IFoodItemClicked).foodItemId}`)\n    ))\n  )\n);\n\nexport const goToFoodTable$: SeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      GO_BACK_FROM_FOOD_DETAILS,\n      FOOD_DETAILS_SELECT_SEASON,\n      SELECT_SEASON\n    ),\n    mapTo(push(FOOD_TABLE_URL))\n  )\n);\n","import { ofType, StateObservable, ActionsObservable } from 'redux-observable';\n\nimport {\n  getFoodDetailsData\n} from '../../services';\n\nimport {\n  SET_CURRENT_FOOD_DETAILS_DATA_START,\n  setCurrentFoodDetailsDataSuccess,\n  setCurrentFoodDetailsDataStart,\n  FOOD_ITEM_CLICKED,\n  INIT_APP\n} from '../actions';\n\nimport {\n  map,\n  switchMap,\n  withLatestFrom,\n  mapTo,\n  filter\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { IState } from '../../interfaces';\nimport { selectCurrentFoodDetailsId } from '../selectors';\nimport { Observable } from 'rxjs';\nimport { SeasonalEpic } from './seasonal-epic.type';\n\nexport const getCurrentFoodDetailsDataStartEpic$: SeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(FOOD_ITEM_CLICKED),\n    mapTo(setCurrentFoodDetailsDataStart())\n  )\n);\n\nexport const getCurrentFoodDetailsDataEpic$: SeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      SET_CURRENT_FOOD_DETAILS_DATA_START,\n      INIT_APP\n    ),\n    withLatestFrom(state$),\n    map(([, state]) => selectCurrentFoodDetailsId(state)),\n    filter((foodDetailsId) => Boolean(foodDetailsId)),\n    switchMap((foodDetailsId) => getFoodDetailsData(foodDetailsId)),\n    map((currentFoodData) => setCurrentFoodDetailsDataSuccess(currentFoodData))\n  )\n);\n","import {\n  SET_CURRENT_FOOD_DETAILS_DATA_START,\n  SET_CURRENT_FOOD_DETAILS_DATA_SUCCESS,\n  ISetCurrentFoodDetailsDataSuccess\n} from '../actions';\nimport { ICurrentFoodDetailsDataState } from '../../interfaces';\nimport { Action } from 'redux';\n\nconst getDefaultState = (): ICurrentFoodDetailsDataState => ({\n  data: undefined,\n  isLoading: true\n});\n\nexport function currentFoodDetailsDataReducer(\n  state = getDefaultState(),\n  action: Action\n): ICurrentFoodDetailsDataState {\n  switch (action.type) {\n    case SET_CURRENT_FOOD_DETAILS_DATA_START:\n      return {\n        ...state,\n        isLoading: true\n      };\n    case SET_CURRENT_FOOD_DETAILS_DATA_SUCCESS:\n      return {\n        ...state,\n        data: (action as ISetCurrentFoodDetailsDataSuccess)\n          .currentFoodDetailsData,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  SET_CURRENT_SEASON_DATA_START,\n  SET_CURRENT_SEASON_DATA_SUCCESS,\n  ISetCurrentSeasonDataSuccess,\n  SELECT_SEASON,\n  FOOD_DETAILS_SELECT_SEASON,\n  ISelectSeason\n} from '../actions';\nimport { ICurrentSeasonDataState } from '../../interfaces';\nimport { Action } from 'redux';\nimport { getCurrentSeasonIndex } from '../../services';\n\nconst getDefaultState = (): ICurrentSeasonDataState => ({\n  currentSeasonIndex: getCurrentSeasonIndex(),\n  data: undefined,\n  isLoading: true\n});\n\nexport function currentSeasonDataReducer(\n  state = getDefaultState(),\n  action: Action\n): ICurrentSeasonDataState {\n  switch (action.type) {\n    case SET_CURRENT_SEASON_DATA_START:\n      return {\n        ...state,\n        isLoading: true\n      };\n    case SET_CURRENT_SEASON_DATA_SUCCESS:\n      return {\n        ...state,\n        data: (action as ISetCurrentSeasonDataSuccess).currentSeasonData,\n        isLoading: false\n      };\n    case FOOD_DETAILS_SELECT_SEASON:\n    case SELECT_SEASON:\n      return {\n        ...state,\n        currentSeasonIndex: (action as ISelectSeason).seasonIndex\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  SET_ALL_BASIC_SEASON_DATA_START,\n  SET_ALL_BASIC_SEASON_DATA_SUCCESS,\n  ISetAllBasicSeasonDataSuccess\n} from '../actions';\nimport { ISeasonDataState } from '../../interfaces';\nimport { Action } from 'redux';\n\nconst getDefaultState = (): ISeasonDataState => ({\n  data: undefined,\n  isLoading: true\n});\n\nexport function allBasicSeasonDataReducer(\n  state = getDefaultState(),\n  action: Action\n): ISeasonDataState {\n  switch (action.type) {\n    case SET_ALL_BASIC_SEASON_DATA_START:\n      return {\n        ...state,\n        isLoading: true\n      };\n    case SET_ALL_BASIC_SEASON_DATA_SUCCESS:\n      return {\n        ...state,\n        data: (action as ISetAllBasicSeasonDataSuccess).seasonData,\n        isLoading: false\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  CLOSE_MENU,\n  OPEN_MENU,\n  SELECT_SEASON,\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS,\n  SEARCH_BAR_CHANGED,\n  ISearchBarChanged,\n  SHOW_SEARCH_BAR,\n  HIDE_SEARCH_BAR\n} from '../actions';\nimport { IUiState } from '../../interfaces';\nimport { Action } from 'redux';\nimport { TABS } from '../../const';\n\nconst getDefaultState = (): IUiState => ({\n  currentTab: TABS.FOOD,\n  isMenuOpen: false,\n  isSearchBarVisible: false\n});\n\nexport function uiReducer(\n  state = getDefaultState(),\n  action: Action\n): IUiState {\n  switch (action.type) {\n    case SELECT_SEASON:\n    case CLOSE_MENU:\n      return {\n        ...state,\n        isMenuOpen: false\n      };\n    case OPEN_MENU:\n      return {\n        ...state,\n        isMenuOpen: true\n      };\n    case GO_TO_FOOD_TAB:\n      return {\n        ...state,\n        currentTab: TABS.FOOD\n      };\n    case GO_TO_RECIPES_TABS:\n      return {\n        ...state,\n        currentTab: TABS.RECIPES\n      };\n    case SEARCH_BAR_CHANGED:\n      return {\n        ...state,\n        searchTerm: (action as ISearchBarChanged).newSearchTerm\n      };\n    case SHOW_SEARCH_BAR:\n      return {\n        ...state,\n        isSearchBarVisible: true\n      };\n    case HIDE_SEARCH_BAR:\n      return {\n        ...state,\n        isSearchBarVisible: false,\n        searchTerm: ''\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  Action,\n  applyMiddleware,\n  combineReducers,\n  createStore,\n  compose\n} from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\n\nimport {\n  currentFoodDetailsDataReducer\n} from './current-food-details-data.reducer';\n\nimport { currentSeasonDataReducer } from './current-season-data.reducer';\n\nimport { allBasicSeasonDataReducer } from './all-basic-season-data.reducer';\n\nimport { uiReducer } from './ui.reducer';\n\nimport {\n  rootEpic\n} from '../epics';\n\nimport { IState } from '../../interfaces';\n\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { createHashHistory } from 'history';\n\nconst epicMiddleware = createEpicMiddleware<Action, Action, IState, {}>();\nexport const storeHistory = createHashHistory();\n\nexport const store = createStore(\n  combineReducers<IState>({\n    allBasicSeasonData: allBasicSeasonDataReducer,\n    currentFoodDetailsData: currentFoodDetailsDataReducer,\n    currentSeasonData: currentSeasonDataReducer,\n    router: connectRouter(storeHistory),\n    ui: uiReducer\n  }),\n  undefined,\n  compose(\n    applyMiddleware(\n      routerMiddleware(storeHistory),\n      epicMiddleware\n    )\n  )\n);\nepicMiddleware.run(rootEpic);\n","import { connect } from 'react-redux';\nimport {\n  BottomTabs\n} from './BottomTabs';\nimport {\n  goToFoodTab,\n  goToRecipesTab,\n  selectIsCurrentTabFood,\n  selectIsCurrentTabRecipes\n} from '../../store';\nimport {\n  IBottomTabDispatchProps,\n  IBottomTabInputProps\n} from './BottomTabs.interface';\nimport { Dispatch } from 'redux';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (\n  state: IState\n): IBottomTabInputProps => ({\n  isCurrentTabFood: selectIsCurrentTabFood(state),\n  isCurrentTabRecipes: selectIsCurrentTabRecipes(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IBottomTabDispatchProps => ({\n  goToFoodTab: () => dispatch(goToFoodTab()),\n  goToRecipesTab: () => dispatch(goToRecipesTab())\n});\n\nexport const BottomTabsConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BottomTabs);\n","import { connect } from 'react-redux';\nimport {\n  CurrentSeasonName\n} from './CurrentSeasonName';\nimport {\n  selectCurrentSeasonName,\n  selectIsCurrentSeasonLoading\n} from '../../store';\nimport {\n  ICurrentSeasonName\n} from './CurrentSeasonName.interface';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (\n  state: IState\n): ICurrentSeasonName => ({\n  currentSeasonName: selectCurrentSeasonName(state),\n  isLoading: selectIsCurrentSeasonLoading(state)\n});\n\nexport const CurrentSeasonNameConnecter = connect(\n  mapStateToProps\n)(CurrentSeasonName);\n","import React, { SFC } from 'react';\n\nimport './CurrentSeasonName.scss';\n\nimport {\n  TextHeadingSmall\n} from '../../components-elements';\nimport { ICurrentSeasonName } from './CurrentSeasonName.interface';\n\nexport const CurrentSeasonName: SFC<ICurrentSeasonName> = ({\n  currentSeasonName,\n  isLoading\n}) => (\n  !isLoading\n    ? <TextHeadingSmall className='c-current-season-name'>\n      {currentSeasonName}\n    </TextHeadingSmall>\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodDetailsLoader\n} from './FoodDetailsLoader';\nimport {\n  selectIsFoodDataOrBasicSeasonsLoading\n} from '../../store';\n\nimport { IState } from '../../interfaces';\nimport {\n  IFoodDetailsLoaderInputProps\n} from './FoodDetailsLoader.interface';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodDetailsLoaderInputProps => ({\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state)\n});\n\nexport const FoodDetailsLoaderConnecter = connect(\n  mapStateToProps\n)(FoodDetailsLoader);\n","import React from 'react';\n\nimport './FoodDetailsLoader.scss';\n\nimport {\n  LoadingSpinner\n} from '../../components-elements';\n\nimport {\n  IFoodDetailsLoaderInputProps\n} from './FoodDetailsLoader.interface';\n\nexport const FoodDetailsLoader = ({\n  isLoading\n}: IFoodDetailsLoaderInputProps) => (\n  isLoading\n    ? <div className='c-food-details-loader'>\n      <LoadingSpinner />\n    </div>\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodDetailsTopSection\n} from './FoodDetailsTopSection';\nimport {\n  goBackFromFoodDetails,\n  selectCurrentFoodDetailsName,\n  selectCurrentFoodDetailsImageUrl,\n  selectIsCurrentFoodDetailsLoading\n} from '../../store';\n\nimport { IState } from '../../interfaces';\nimport {\n  IFoodDetailsTopSectionInputProps,\n  IFoodDetailsTopSectionDispatchProps\n} from './FoodDetailsTopSection.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodDetailsTopSectionInputProps => ({\n  foodImageUrl: selectCurrentFoodDetailsImageUrl(state),\n  foodName: selectCurrentFoodDetailsName(state),\n  isLoading: selectIsCurrentFoodDetailsLoading(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IFoodDetailsTopSectionDispatchProps => ({\n  onGoBack: () => dispatch(goBackFromFoodDetails())\n});\n\nexport const FoodDetailsTopSectionConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FoodDetailsTopSection);\n","import React from 'react';\n\nimport './FoodDetailsTopSection.scss';\n\nimport {\n  ArrowIcon,\n  BareButton,\n  TextHeadingMedium\n} from '../../components-elements';\n\nimport {\n  ISeasonForFoodTopSectionProps\n} from './FoodDetailsTopSection.interface';\n\nexport const FoodDetailsTopSection = ({\n  foodImageUrl,\n  foodName,\n  isLoading,\n  onGoBack\n}: ISeasonForFoodTopSectionProps) => (\n  !isLoading\n    ? <div className='c-food-details-top-section'>\n    <div className='c-food-details-top-section__top-bar'>\n      <BareButton\n        className='c-food-details-top-section__back-button'\n        onClick={onGoBack}>\n        <ArrowIcon />\n      </BareButton>\n      <TextHeadingMedium className='c-food-details-top-section__food-name'>\n        {foodName}\n      </TextHeadingMedium>\n    </div>\n    {\n      foodImageUrl && <img src={foodImageUrl}\n        className='c-food-details-top-section__food-image'/>\n    }\n  </div>\n  : null\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodTable\n} from './FoodTable';\nimport {\n  selectIsCurrentSeasonLoading,\n  selectVisibleRecipeData,\n  selectIsCurrentTabFood,\n  selectVisibleFoodData,\n  foodItemClicked,\n  recipeItemClicked\n} from '../../store';\nimport { IState } from '../../interfaces';\nimport {\n  IFoodTableInputProps,\n  IFoodTableDispatchProps\n} from './FoodTable.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodTableInputProps => {\n  return {\n    food: selectVisibleFoodData(state),\n    isCurrentTabFood: selectIsCurrentTabFood(state),\n    isLoading: selectIsCurrentSeasonLoading(state),\n    recipes: selectVisibleRecipeData(state)\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IFoodTableDispatchProps => {\n  return {\n    onFoodClick: (foodItemId) => dispatch(foodItemClicked(foodItemId)),\n    onRecipeClick: (recipeItemId) => dispatch(recipeItemClicked(recipeItemId))\n  };\n};\n\nexport const FoodTableConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FoodTable);\n","import React from 'react';\n\nimport './FoodTable.scss';\n\nimport {\n  ImageGrid\n} from '../../components-layout';\n\nimport {\n  LoadingSpinner\n} from '../../components-elements';\nimport { IFoodTableProps } from './FoodTable.interface';\n\nexport const FoodTable = ({\n  isCurrentTabFood,\n  isLoading,\n  food,\n  recipes,\n  onFoodClick,\n  onRecipeClick\n}: IFoodTableProps) => (\n  isLoading\n    ? <div className='c-food-table__loading-spinner-wrapper'>\n      <LoadingSpinner />\n    </div>\n    : isCurrentTabFood\n      ? <ImageGrid data={food} onClick={onFoodClick} />\n      : <ImageGrid data={recipes} onClick={onRecipeClick} />\n);\n","import { connect } from 'react-redux';\nimport {\n  Header\n} from './Header';\nimport {\n  openMenu\n} from '../../store';\nimport { IHeaderDispatchProps } from './Header.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IHeaderDispatchProps => ({\n  onMenuOpen: () => dispatch(openMenu())\n});\n\nexport const HeaderConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Header);\n","import React, { SFC } from 'react';\n\nimport './Header.scss';\n\nimport {\n  BareButton,\n  BurgerIcon,\n  TextHeadingLarge\n} from '../../components-elements';\nimport {\n  SearchBarConnecter\n} from '../';\nimport { IHeaderDispatchProps } from './Header.interface';\n\nexport const Header: SFC<IHeaderDispatchProps> = ({\n  onMenuOpen\n}) => (\n  <header className='c-header'>\n    <BareButton className='c-header__btn' onClick={onMenuOpen}>\n      <BurgerIcon />\n    </BareButton>\n    <h1 className='c-header__text'>\n      <TextHeadingLarge>\n        Eat Seasonal\n      </TextHeadingLarge>\n    </h1>\n    <SearchBarConnecter />\n  </header>\n);\n","import React, { SFC } from 'react';\n\nimport './PageLayout.scss';\n\nexport const PageLayout: SFC<{}> = ({\n  children\n}) => (\n  <div className='c-page-layout'>\n    { children }\n  </div>\n);\n","import React from 'react';\n\nimport './SeasonMenu.scss';\n\nimport {\n  BareButton,\n  CrossIcon,\n  TextMedium,\n  LoadingSpinner\n} from '../../components-elements';\n\nimport {\n  fadeInOutAnimation\n} from '../../helpers';\nimport { PoseGroup } from 'react-pose';\nimport { ISeasonMenuProps } from './SeasonMenu.interface';\n\nconst OverlayFadeInOutAnimation = fadeInOutAnimation();\n\nexport const SeasonMenu = ({\n  allBasicSeasonData,\n  currentSeasonIndex,\n  isLoading,\n  isMenuOpen,\n  onSeasonSelected,\n  onClose\n}: ISeasonMenuProps) => (\n  <div>\n    <PoseGroup>\n      {\n        isMenuOpen &&\n        <OverlayFadeInOutAnimation key='season-menu-overlay'\n          className='c-season-menu__overlay'\n          onClick={onClose} />\n      }\n    </PoseGroup>\n    <nav\n      className={`c-season-menu ${isMenuOpen ? 'c-season-menu--is-open' : ''}`}>\n      {\n        !isLoading\n          ? allBasicSeasonData && allBasicSeasonData.map(({ name }, index) => (\n              <BareButton\n                key={name}\n                className={\n                  `c-season-menu__button ${\n                    index === currentSeasonIndex\n                      ? 'c-season-menu__button--selected'\n                      : ''\n                    }`}\n                onClick={() => onSeasonSelected(index)}>\n                <TextMedium>{ name }</TextMedium>\n              </BareButton>\n            ))\n          : <div className='c-season-menu__loading-spinner-wrapper'>\n            <LoadingSpinner />\n          </div>\n      }\n      <BareButton className='c-season-menu__close-btn'\n        onClick={onClose}>\n        <CrossIcon />\n      </BareButton>\n    </nav>\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  SeasonMenu\n} from './SeasonMenu';\nimport {\n  selectIsMenuOpen,\n  closeMenu,\n  selectAllBasicSeasonData,\n  selectIsBasicSeasonDataLoading,\n  selectSeason,\n  selectCurrentSeasonIndex\n} from '../../store';\n\nimport { IState } from '../../interfaces';\nimport {\n  ISeasonMenuInputProps,\n  ISeasonMenuDispatchProps\n} from './SeasonMenu.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): ISeasonMenuInputProps => ({\n  allBasicSeasonData: selectAllBasicSeasonData(state),\n  currentSeasonIndex: selectCurrentSeasonIndex(state),\n  isLoading: selectIsBasicSeasonDataLoading(state),\n  isMenuOpen: selectIsMenuOpen(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISeasonMenuDispatchProps => ({\n  onClose: () => dispatch(closeMenu()),\n  onSeasonSelected: (seasonIndex: number) => dispatch(selectSeason(seasonIndex))\n});\n\nexport const SeasonMenuConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SeasonMenu);\n","import React, { SFC } from 'react';\nimport { PageLayout } from '../../components-layout/PageLayout/PageLayout';\nimport { HeaderConnecter } from '../Header/Header.connector';\nimport { SeasonMenuConnecter } from '../SeasonMenu/SeasonMenu.connector';\n\nexport const PageWithMenu: SFC<{}> = ({\n  children\n}) => (\n  <PageLayout>\n    <HeaderConnecter />\n    <SeasonMenuConnecter />\n    { children }\n  </PageLayout>\n);\n","import React, { SFC } from 'react';\n\nimport './SearchBar.scss';\n\nimport { ISearchBarProps } from './SearchBar.interface';\nimport {\n  Input\n} from '../../components-elements';\n\nimport {\n  BareButton,\n  CrossIcon,\n  MagnifyingGlassIcon\n} from '../../components-elements';\n\nconst getSearchBarClassName = (isSearchBarVisible: boolean) => (\n  'c-search-bar' +\n    (\n      isSearchBarVisible\n        ? ' c-search-bar--show-full'\n        : ''\n    )\n);\n\nconst focusOnInputIfSearchVisible = (\n  ref: HTMLDivElement | undefined,\n  isSearchBarVisible: boolean\n) => {\n  if (ref && isSearchBarVisible) {\n    const input = ref.querySelector('input');\n    if (input) {\n      input.focus();\n    }\n  }\n};\n\nexport const SearchBar: SFC<ISearchBarProps> = ({\n  isSearchBarVisible,\n  onHideSearchBar,\n  onSearchChanged,\n  onShowSearchBar\n}) => (\n  <div className={getSearchBarClassName(isSearchBarVisible)}\n    ref={\n      (ref: HTMLDivElement) => (\n        focusOnInputIfSearchVisible(ref, isSearchBarVisible)\n      )\n    }>\n    <Input className='c-search-bar__input'\n      onChange={(newSearchTerm) => onSearchChanged(newSearchTerm)}\n      placeholder='Search' />\n    {\n      isSearchBarVisible\n        ? <BareButton className='c-search-bar__search-button'\n            onClick={onHideSearchBar}>\n            <CrossIcon />\n          </BareButton>\n        : <BareButton className='c-search-bar__search-button'\n            onClick={onShowSearchBar}>\n            <MagnifyingGlassIcon />\n          </BareButton>\n    }\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  SearchBar\n} from './SearchBar';\nimport {\n  searchBarChanged,\n  selectIsSearchBarVisible,\n  showSearchBar,\n  hideSearchBar\n} from '../../store';\nimport {\n  ISearchBarDispatchProps,\n  ISearchBarInputProps\n} from './SearchBar.interface';\nimport { Dispatch } from 'redux';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (state: IState): ISearchBarInputProps => ({\n  isSearchBarVisible: selectIsSearchBarVisible(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISearchBarDispatchProps => ({\n  onHideSearchBar: () => dispatch(hideSearchBar()),\n  onSearchChanged: (newSearchTerm: string) => (\n    dispatch((searchBarChanged(newSearchTerm)))\n  ),\n  onShowSearchBar: () => dispatch(showSearchBar())\n});\n\nexport const SearchBarConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchBar);\n","import { connect } from 'react-redux';\nimport {\n  SeasonsForFood\n} from './SeasonsForFood';\nimport {\n  selectSeasonsSelectedForFood,\n  selectIsCurrentFoodDetailsLoading,\n  foodDetailsSelectSeason\n} from '../../store';\n\nimport { IState } from '../../interfaces';\nimport {\n  ISeasonForFoodInputProps,\n  ISeasonForFoodDispatchProps\n} from './SeasonsForFood.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): ISeasonForFoodInputProps => ({\n  isLoading: selectIsCurrentFoodDetailsLoading(state),\n  seasonsSelectedForFood: selectSeasonsSelectedForFood(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISeasonForFoodDispatchProps => ({\n  onSeasonSelected: (seasonIndex: number) => (\n    dispatch(foodDetailsSelectSeason(seasonIndex))\n  )\n});\n\nexport const SeasonsForFoodConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SeasonsForFood);\n","import React, { Fragment } from 'react';\n\nimport './SeasonsForFood.scss';\n\nimport {\n  TextMedium,\n  TextHeadingMedium,\n  TextSmall,\n  BareButton\n} from '../../components-elements';\n\nimport { ISeasonForFoodProps } from './SeasonsForFood.interface';\n\nexport const SeasonsForFood = ({\n  isLoading,\n  seasonsSelectedForFood,\n  onSeasonSelected\n}: ISeasonForFoodProps) => (\n  !isLoading\n    ? <Fragment>\n    <TextHeadingMedium\n      className='c-season-for-food__list-heading'>\n      When are they in season?\n    </TextHeadingMedium>\n    <div className='c-season-for-food__list'>\n      {\n        seasonsSelectedForFood && seasonsSelectedForFood.map((\n          {\n            isSelected,\n            name\n          },\n          seasonIndex\n        ) => (\n          <BareButton\n            key={name}\n            className={\n              `c-season-for-food__season` +\n                (\n                  isSelected\n                    ? ` c-season-for-food__season--selected`\n                    : ''\n                )\n              }\n            onClick={ () => onSeasonSelected(seasonIndex) }>\n            <TextMedium>\n              { name.substring(0, 3) }\n            </TextMedium>\n          </BareButton>\n        ))\n      }\n    </div>\n    <div\n      className={`c-season-food__in-season-key ` +\n        `c-season-food__in-season-key--in-season`\n      }>\n      <TextSmall className='c-season-food__in-season-key__text'>\n        In season\n      </TextSmall>\n    </div>\n    <div\n      className='c-season-food__in-season-key'>\n      <TextSmall className='c-season-food__in-season-key__text'>\n        Not in season\n      </TextSmall>\n    </div>\n  </Fragment>\n  : null\n);\n","import { connect } from 'react-redux';\nimport {\n  ViewWebAppVersion\n} from './ViewWebAppVersion';\nimport {\n  goToWebVersion\n} from '../../store';\nimport { IViewWebAppVersionDispatchProps } from './ViewWebAppVersion.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IViewWebAppVersionDispatchProps => ({\n  onGoToWebVersion: () => dispatch((goToWebVersion()))\n});\n\nexport const ViewWebAppVersionConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewWebAppVersion);\n","import React, { SFC } from 'react';\n\nimport {\n  PrimaryButton\n} from '../../components-elements';\n\nimport {\n  IViewWebAppVersionDispatchProps\n} from './ViewWebAppVersion.interface';\n\nexport const ViewWebAppVersion: SFC<IViewWebAppVersionDispatchProps> = ({\n  onGoToWebVersion\n}) => (\n  <PrimaryButton onClick={onGoToWebVersion}>\n    To web version\n  </PrimaryButton>\n);\n","import React, { SFC } from 'react';\n\nimport './ViewAppLinks.scss';\n\nimport {\n  AndroidAppDownload\n} from '../AndroidAppDownload/AndroidAppDownload';\n\nimport {\n  ViewWebAppVersionConnector\n} from '../ViewWebAppVersion/ViewWebAppVersion.connector';\n\nexport const ViewAppLinks: SFC<{}> = () => (\n  <div className='c-view-app-links'>\n    <AndroidAppDownload />\n    <ViewWebAppVersionConnector />\n  </div>\n);\n","import React, { SFC } from 'react';\n\nimport './WhyEatSeasonal.scss';\n\nimport {\n  TextHeadingLarge\n} from '../../components-elements';\n\nimport {\n  ISummaryColumnList,\n  SummaryColumnList\n} from '../../components-layout';\n\nimport columns from './why-eat-seasonal-columns.json';\n\nconst summaryColumns: ISummaryColumnList = {\n  columns\n};\n\nexport const WhyEatSeasonal: SFC<{}> = ({}) => (\n  <div className='c-why-eat-seasonal'>\n    <h2 className='c-why-eat-seasonal__heading'>\n      <TextHeadingLarge>\n        Why Eat Seasonal?\n      </TextHeadingLarge>\n    </h2>\n    <SummaryColumnList {...summaryColumns} />\n  </div>\n);\n","import React from 'react';\n\nimport './FoodDetailsPage.scss';\n\nimport {\n  FoodDetailsLoaderConnecter,\n  FoodDetailsTopSectionConnecter,\n  PageWithMenu,\n  SeasonsForFoodConnecter\n} from '../../components-main';\n\nexport const FoodDetailsPage = () => (\n  <PageWithMenu>\n    <div className='c-food-details-page__main'>\n      <FoodDetailsTopSectionConnecter />\n      <FoodDetailsLoaderConnecter />\n      <SeasonsForFoodConnecter />\n    </div>\n  </PageWithMenu>\n);\n","import React from 'react';\n\nimport './FoodTablePage.scss';\n\nimport {\n  CurrentSeasonNameConnecter,\n  FoodTableConnecter,\n  PageWithMenu\n} from '../../components-main';\n\nexport const FoodTablePage = () => (\n  <PageWithMenu>\n    <div className='c-food-table-page__main'>\n      <CurrentSeasonNameConnecter />\n      <FoodTableConnecter />\n    </div>\n  </PageWithMenu>\n);\n","import React from 'react';\n\nimport './IntroPage.scss';\n\nimport {\n  AboutEatSeasonal,\n  ViewAppLinks,\n  WhyEatSeasonal\n} from '../../components-main';\n\nexport const IntroPage = () => (\n  <div className='c-intro-page'>\n    <div className='c-intro-page__top-section'>\n      <img className='c-intro-page__splash-image' src='/splash.png'/>\n      <ViewAppLinks />\n    </div>\n    <AboutEatSeasonal />\n    <WhyEatSeasonal />\n    <div className='c-intro-page__mobile-extra-app-links'>\n      <ViewAppLinks />\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport {\n  IntroPage,\n  FoodTablePage,\n  FoodDetailsPage\n} from '../components-pages';\nimport './App.scss';\n\nimport { Provider } from 'react-redux';\nimport { store, storeHistory } from '../store/reducers';\n\nimport { Route, Switch } from 'react-router';\n\nimport {\n  FOOD_TABLE_URL,\n  LANDING_URL,\n  FOOD_DETAILS_URL\n} from '../const';\n\nimport { ConnectedRouter } from 'connected-react-router';\n\nexport const App = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={storeHistory}>\n      <div className='c-app'>\n        <Switch>\n          <Route path={LANDING_URL} component={IntroPage} exact />\n          <Route path={FOOD_TABLE_URL} component={FoodTablePage} />\n          <Route path={`${FOOD_DETAILS_URL}/:id`} component={FoodDetailsPage} />\n        </Switch>\n      </div>\n    </ConnectedRouter>\n  </Provider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './styles/index.scss';\nimport { App } from './components-app/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\nif (rootElement && rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}