{"version":3,"sources":["elements/Buttons/BareButton.tsx","elements/Icons/BurgerIcon.tsx","elements/Icons/CrossIcon.tsx","elements/LoadingSpinner/LoadingSpinner.tsx","elements/Text/TextHeadingLarge.tsx","elements/Text/TextMedium.tsx","organisms/BottomTabs/BottomTabs.tsx","store/actions/all-basic-season-data.actions.ts","store/actions/current-season-data.actions.ts","store/actions/init.actions.ts","store/actions/ui.actions.ts","const/tabs.enum.ts","store/selectors/all-season-data.selectors.ts","store/selectors/current-season-data.selectors.ts","store/selectors/ui.selectors.ts","services/image-loader.service.ts","config/index.js","store/epics/index.ts","store/epics/init.epics.ts","store/epics/current-season-data.epics.ts","services/retrieve-backend-data.ts","store/epics/all-basic-season-data.epics.ts","store/reducers/current-season-data.reducer.ts","store/reducers/all-basic-season-data.reducer.ts","store/reducers/ui.reducer.ts","store/reducers/index.ts","organisms/BottomTabs/BottomTabs.connector.ts","helpers/Animations/fade.animations.ts","helpers/Animations/animations.const.ts","organisms/SeasonMenu/SeasonMenu.tsx","organisms/SeasonMenu/SeasonMenu.connector.ts","organisms/Header/Header.connector.ts","organisms/Header/Header.tsx","molecules/BackgroundImageWithLoadingSpinner/BackgroundImageWithLoadingSpinner.tsx","molecules/ImageGridItem/ImageGridItem.tsx","molecules/ImageGrid/ImageGrid.tsx","organisms/FoodTable/FoodTable.connector.ts","organisms/FoodTable/FoodTable.tsx","pages/FoodPage/FoodPage.tsx","app/App.tsx","serviceWorker.js","index.tsx"],"names":["BareButton","_ref","className","children","onClick","react_default","a","createElement","concat","BurgerIcon","viewBox","height","width","y","CrossIcon","points","LoadingSpinner","TextHeadingLarge","TextMedium","addTabClasses","isSelected","SET_ALL_BASIC_SEASON_DATA_START","SET_ALL_BASIC_SEASON_DATA_SUCCESS","SET_CURRENT_SEASON_DATA_START","SET_CURRENT_SEASON_DATA_SUCCESS","INIT_APP","OPEN_MENU","CLOSE_MENU","SELECT_SEASON","GO_TO_FOOD_TAB","GO_TO_RECIPES_TABS","TABS","selectAllBasicSeasonDataState","state","allBasicSeasonData","selectIsBasicSeasonDataLoading","createSelector","isLoading","selectAllBasicSeasonData","data","selectCurrentSeasonDataState","currentSeasonData","selectIsCurrentSeasonLoading","selectCurrentSeason","selectCurrentSeasonFood","currentSeason","food","selectCurrentSeasonRecipes","recipes","selectCurrentSeasonIndex","currentSeasonIndex","selectUiState","ui","selectIsMenuOpen","uiState","isMenuOpen","selectCurrentTab","currentTab","selectIsCurrentTabFood","FOOD","selectIsCurrentTabRecipes","RECIPES","loadingImages","loadImage","imageSrc","Promise","resolve","image","document","src","push","addEventListener","createImageOnLoadPromise","BACKEND_URL","process","SEASON_DATA_URL","rootEpic","combineEpics","of","pipe","map","type","actions$","ofType","state$","withLatestFrom","Object","slicedToArray","switchMap","seasonIndex","fetch","then","resp","json","getSeasonDataBySeasonIndex","foodData","seasonData","setAllBasicSeasonDataSuccess","getDefaultState","Date","getUTCMonth","undefined","epicMiddleware","createEpicMiddleware","store","createStore","combineReducers","arguments","length","action","objectSpread","applyMiddleware","run","BottomTabsConnecter","connect","isCurrentTabFood","isCurrentTabRecipes","dispatch","goToFoodTab","goToRecipesTab","BareButton_BareButton","fadeInOutAnimation","_ref$enterDelay","enterDelay","_ref$exitDelay","exitDelay","_ref$enterDuration","enterDuration","_ref$exitDuration","exitDuration","_ref$type","posed","enter","delay","opacity","transition","duration","exit","OverlayFadeInOutAnimation","SeasonMenuConnecter","onClose","onSeasonSelected","selectSeason","react_pose_es","key","LoadingSpinner_LoadingSpinner_LoadingSpinner","_ref2","index","name","TextMedium_TextMedium","CrossIcon_CrossIcon","HeaderConnecter","onMenuOpen","BurgerIcon_BurgerIcon","TextHeadingLarge_TextHeadingLarge","FadeInOutAnimation","BackgroundImageWithLoadingSpinner","_Component","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","isVisible","inherits","createClass","value","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","setState","stop","apply","style","backgroundImage","Component","ImageGridItem","imageUrlSmall","BackgroundImageWithLoadingSpinner_BackgroundImageWithLoadingSpinner_BackgroundImageWithLoadingSpinner","ImageGrid","item","ImageGridItem_ImageGridItem_ImageGridItem","FoodTableConnecter","ImageGrid_ImageGrid_ImageGrid","FoodPage","App","es","FoodPage_FoodPage","Boolean","window","location","hostname","match","rootElement","getElementById","hasChildNodes","hydrate","App_App","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5257a927.chunk.js","sourcesContent":["import React, { SFC } from 'react';\nimport './BareButton.scss';\n\nexport const BareButton: SFC<{\n  className?: string,\n  onClick?: () => void,\n}> = ({\n  className,\n  children,\n  onClick\n}) => (\n  <button className={`${(className || '')} c-bare-button`} onClick={onClick}>\n    { children }\n  </button>\n);\n","import React from 'react';\nimport './icon.scss';\n\nexport const BurgerIcon = () => (\n  <svg viewBox='0 0 24 24' className='c-icon'>\n    <rect height='2' width='24' y='5'></rect>\n    <rect height='2' width='24' y='11'></rect>\n    <rect height='2' width='24' y='17'></rect>\n  </svg>\n);\n","import React from 'react';\nimport './icon.scss';\n\nexport const CrossIcon = () => (\n  <svg className='c-icon' viewBox='0 0 24 24'>\n    <polygon points='19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12' />\n  </svg>\n);\n","import React from 'react';\n\nimport './LoadingSpinner.scss';\n\nexport const LoadingSpinner = () => (\n  <div className='c-loading-spinner'>\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n  </div>\n);\n","import React, { SFC } from 'react';\nimport './TextHeadingLarge.scss';\nimport { TextInterface } from './Text.interface';\n\nexport const TextHeadingLarge: SFC<TextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-heading-large`}>\n    { children }\n  </span>\n);\n","import React, { SFC } from 'react';\nimport './TextMedium.scss';\nimport { TextInterface } from './Text.interface';\n\nexport const TextMedium: SFC<TextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-medium`}>\n    { children }\n  </span>\n);\n","import React, { SFC } from 'react';\n\nimport './BottomTabs.scss';\n\nimport {\n  BareButton\n} from '../../elements';\nimport { BottomTabProps } from './BottomTabs.interface';\n\nconst addTabClasses = (isSelected: boolean) => (\n  `c-bottom-tabs__tab ${\n    isSelected\n      ? ' c-bottom-tabs__tab--selected'\n      : ''\n  }`\n);\n\nexport const BottomTabs: SFC<BottomTabProps> = ({\n  isCurrentTabFood,\n  isCurrentTabRecipes,\n  goToFoodTab,\n  goToRecipesTab\n}) => (\n  <nav className='c-bottom-tabs'>\n    <BareButton\n      className={addTabClasses(isCurrentTabFood)}\n      onClick={goToFoodTab}>\n      Food\n    </BareButton>\n    <BareButton\n      className={addTabClasses(isCurrentTabRecipes)}\n      onClick={goToRecipesTab}>\n      Recipes\n    </BareButton>\n  </nav>\n);\n","import { Action } from 'redux';\nimport { Season } from '../../interfaces';\n\nexport const SET_ALL_BASIC_SEASON_DATA_START =\n  'SET_ALL_BASIC_SEASON_DATA_START';\nexport function setAllBasicSeasonDataStart(): Action {\n  return {\n    type: SET_ALL_BASIC_SEASON_DATA_START,\n  }\n}\n\nexport interface SetAllBasicSeasonDataSuccess extends Action {\n  seasonData: Season[];\n}\nexport const SET_ALL_BASIC_SEASON_DATA_SUCCESS =\n  'SET_ALL_BASIC_SEASON_DATA_SUCCESS';\nexport function setAllBasicSeasonDataSuccess(\n  seasonData: Season[]\n): SetAllBasicSeasonDataSuccess {\n  return {\n    seasonData,\n    type: SET_ALL_BASIC_SEASON_DATA_SUCCESS,\n  }\n}\n","import { HydratedSeason } from '../../interfaces';\nimport { Action } from 'redux';\n\nexport const SET_CURRENT_SEASON_DATA_START = 'SET_CURRENT_SEASON_DATA_START';\nexport function setCurrentSeasonDataStart(): Action {\n  return {\n    type: SET_CURRENT_SEASON_DATA_START,\n  }\n}\n\nexport interface SetCurrentSeasonDataSuccess extends Action {\n  currentSeasonData: HydratedSeason;\n}\nexport const SET_CURRENT_SEASON_DATA_SUCCESS =\n  'SET_CURRENT_SEASON_DATA_SUCCESS';\nexport function setCurrentSeasonDataSuccess(\n  currentSeasonData: HydratedSeason\n): SetCurrentSeasonDataSuccess {\n  return {\n    currentSeasonData,\n    type: SET_CURRENT_SEASON_DATA_SUCCESS,\n  }\n}\n","import { Action } from 'redux';\n\nexport const INIT_APP = 'INIT_APP';\nexport function initApp(): Action {\n  return {\n    type: INIT_APP,\n  }\n}\n","import { Action } from 'redux';\n\nexport const OPEN_MENU = 'OPEN_MENU';\nexport function openMenu(): Action {\n  return {\n    type: OPEN_MENU\n  };\n}\n\nexport const CLOSE_MENU = 'CLOSE_MENU';\nexport function closeMenu(): Action {\n  return {\n    type: CLOSE_MENU\n  };\n}\n\nexport interface SelectSeason extends Action {\n  seasonIndex: number;\n}\nexport const SELECT_SEASON = 'SELECT_SEASON';\nexport function selectSeason(\n  seasonIndex: number,\n): SelectSeason {\n  return {\n    seasonIndex,\n    type: SELECT_SEASON\n  };\n}\n\nexport const GO_TO_FOOD_TAB = 'GO_TO_FOOD_TAB';\nexport function goToFoodTab(): Action {\n  return {\n    type: GO_TO_FOOD_TAB\n  };\n}\n\nexport const GO_TO_RECIPES_TABS = 'GO_TO_RECIPES_TABS';\nexport function goToRecipesTab(): Action {\n  return {\n    type: GO_TO_RECIPES_TABS\n  };\n}\n","export enum TABS {\n  FOOD,\n  RECIPES\n};\n","\nimport { createSelector } from 'reselect';\nimport { State, Season } from '../../interfaces';\n\nconst selectAllBasicSeasonDataState = (\n  state: State\n) => state.allBasicSeasonData;\n\nexport const selectIsBasicSeasonDataLoading = createSelector(\n  selectAllBasicSeasonDataState,\n  (allBasicSeasonData): boolean => allBasicSeasonData.isLoading\n);\n\nexport const selectAllBasicSeasonData = createSelector(\n  selectAllBasicSeasonDataState,\n  (allBasicSeasonData): Season[] | undefined => allBasicSeasonData.data\n);\n","import { createSelector } from 'reselect';\nimport {\n  State,\n  HydratedSeason,\n  Food,\n  Recipe\n} from '../../interfaces';\n\nconst selectCurrentSeasonDataState = (state: State) => state.currentSeasonData;\n\nexport const selectIsCurrentSeasonLoading = createSelector(\n  selectCurrentSeasonDataState,\n  (currentSeasonData): boolean => currentSeasonData.isLoading\n);\n\nexport const selectCurrentSeason = createSelector(\n  selectCurrentSeasonDataState,\n  (currentSeasonData): HydratedSeason | undefined => currentSeasonData.data\n);\n\nexport const selectCurrentSeasonFood = createSelector(\n  selectCurrentSeason,\n  (currentSeason): Food[] | undefined => currentSeason && currentSeason.food\n);\n\nexport const selectCurrentSeasonRecipes = createSelector(\n  selectCurrentSeason,\n  (currentSeason): Recipe[] | undefined => currentSeason &&\n    currentSeason.recipes\n);\n\nexport const selectCurrentSeasonIndex = createSelector(\n  selectCurrentSeasonDataState,\n  (currentSeasonData) => currentSeasonData.currentSeasonIndex,\n);\n","import { createSelector } from 'reselect';\nimport { State } from '../../interfaces';\nimport { TABS } from '../../const';\n\nconst selectUiState = (state: State) => state.ui;\n\nexport const selectIsMenuOpen = createSelector(\n  selectUiState,\n  (uiState): boolean => uiState.isMenuOpen\n);\n\nexport const selectCurrentTab = createSelector(\n  selectUiState,\n  (uiState) => uiState.currentTab\n);\n\nexport const selectIsCurrentTabFood = createSelector(\n  selectCurrentTab,\n  (currentTab) => currentTab === TABS.FOOD\n);\n\nexport const selectIsCurrentTabRecipes = createSelector(\n  selectCurrentTab,\n  (currentTab) => currentTab === TABS.RECIPES\n);\n","const loadingImages = [];\n\nconst createImageOnLoadPromise = (\n  imageSrc: string\n): Promise<HTMLImageElement> => {\n  return new Promise((resolve) => {\n    const image = document.createElement('img');\n    image.src = imageSrc;\n    loadingImages.push(image);\n    image.addEventListener('load', () => {\n      resolve(image);\n    });\n  });\n}\n\nexport const loadImage = (\n  imageSrc: string\n): Promise<HTMLImageElement> => {\n  const onLoadPromise = createImageOnLoadPromise(imageSrc);\n  return onLoadPromise;\n}\n","const BACKEND_URL = process.env.BACKEND_URL\n    || 'https://6usraevcmc.execute-api.eu-west-2.amazonaws.com/prod';\n\nexport const SEASON_DATA_URL =\n  process.env.SEASON_DATA_URL || `${BACKEND_URL}/season-data`;\n","import { combineEpics } from 'redux-observable';\n\nimport {\n  getCurrentSeasonDataStartEpic,\n  getCurrentSeasonDataEpic,\n} from './current-season-data.epics';\n\nimport { initAppEpic } from './init.epics';\n\nimport {\n  getAllBasicSeasonDataStartEpic,\n  getAllBasicSeasonDataEpic\n} from './all-basic-season-data.epics';\n\nexport const rootEpic = combineEpics(\n  initAppEpic,\n  getCurrentSeasonDataStartEpic,\n  getCurrentSeasonDataEpic,\n  getAllBasicSeasonDataStartEpic,\n  getAllBasicSeasonDataEpic\n);\n","import {\n  initApp\n} from '../actions';\n\nimport {\n  of,\n  Observable\n} from 'rxjs';\n\nimport {\n  map\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { SeasonalEpic } from './seasonal-epic.type';\n\nexport const initAppEpic: SeasonalEpic = (): Observable<Action> => (\n  of(null).pipe(\n    map(() => initApp()),\n  )\n);\n","import { ofType, StateObservable, ActionsObservable } from 'redux-observable';\n\nimport {\n  getSeasonDataBySeasonIndex\n} from '../../services';\n\nimport {\n  INIT_APP,\n  SET_CURRENT_SEASON_DATA_START,\n  setCurrentSeasonDataSuccess,\n  setCurrentSeasonDataStart,\n  SELECT_SEASON\n} from '../actions';\n\nimport {\n  map,\n  switchMap,\n  withLatestFrom\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { State } from '../../interfaces';\nimport { selectCurrentSeasonIndex } from '../selectors';\nimport { Observable } from 'rxjs';\nimport { SeasonalEpic } from './seasonal-epic.type';\n\nexport const getCurrentSeasonDataStartEpic: SeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      INIT_APP,\n      SELECT_SEASON\n    ),\n    map(() => setCurrentSeasonDataStart())\n  )\n);\n\nexport const getCurrentSeasonDataEpic: SeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<State>,\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(SET_CURRENT_SEASON_DATA_START),\n    withLatestFrom(state$),\n    map(([, state]) => selectCurrentSeasonIndex(state)),\n    switchMap((seasonIndex) => getSeasonDataBySeasonIndex(seasonIndex)),\n    map((foodData) => setCurrentSeasonDataSuccess(foodData))\n  )\n);\n","import {\n    SEASON_DATA_URL\n} from '././../config';\nimport { Season, HydratedSeason } from '../interfaces';\n\nconst getAllSeasonData = (): Promise<Season[]> => {\n  return fetch(SEASON_DATA_URL).then((resp) => resp.json());\n};\n\nconst getSeasonDataBySeasonIndex = (\n  seasonIndex: number\n): Promise<HydratedSeason> => {\n  return fetch(\n      `${SEASON_DATA_URL}/${seasonIndex}`\n  ).then((resp) => resp.json());\n};\n\nconst getCurrentSeasonIndex = (): number => new Date().getUTCMonth();\n\nexport {\n    getAllSeasonData,\n    getCurrentSeasonIndex,\n    getSeasonDataBySeasonIndex\n};\n","import { ofType, ActionsObservable } from 'redux-observable';\n\nimport {\n  getAllSeasonData\n} from '../../services';\n\nimport {\n  INIT_APP,\n  SET_ALL_BASIC_SEASON_DATA_START,\n  setAllBasicSeasonDataStart,\n  setAllBasicSeasonDataSuccess\n} from '../actions';\n\nimport {\n  map,\n  switchMap\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { Observable } from 'rxjs';\nimport { SeasonalEpic } from './seasonal-epic.type';\n\nexport const getAllBasicSeasonDataStartEpic: SeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(INIT_APP),\n    map(() => setAllBasicSeasonDataStart())\n  )\n);\n\nexport const getAllBasicSeasonDataEpic: SeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(SET_ALL_BASIC_SEASON_DATA_START),\n    switchMap(() => getAllSeasonData()),\n    map((seasonData) => setAllBasicSeasonDataSuccess(seasonData))\n  )\n);\n","import {\n  SET_CURRENT_SEASON_DATA_START,\n  SET_CURRENT_SEASON_DATA_SUCCESS,\n  SetCurrentSeasonDataSuccess,\n  SELECT_SEASON,\n  SelectSeason\n} from '../actions';\nimport { CurrentSeasonDataState } from '../../interfaces';\nimport { Action } from 'redux';\nimport { getCurrentSeasonIndex } from '../../services';\n\nconst getDefaultState = (): CurrentSeasonDataState => ({\n  currentSeasonIndex: getCurrentSeasonIndex(),\n  data: undefined,\n  isLoading: true\n});\n\nexport function currentSeasonDataReducer(\n  state = getDefaultState(),\n  action: Action\n): CurrentSeasonDataState {\n  switch (action.type) {\n    case SET_CURRENT_SEASON_DATA_START:\n      return {\n        ...state,\n        isLoading: true\n      };\n    case SET_CURRENT_SEASON_DATA_SUCCESS:\n      return {\n        ...state,\n        data: (action as SetCurrentSeasonDataSuccess).currentSeasonData,\n        isLoading: false\n      };\n    case SELECT_SEASON:\n      return {\n        ...state,\n        currentSeasonIndex: (action as SelectSeason).seasonIndex,\n      };\n    default:\n      return state\n  }\n}\n","import {\n  SET_ALL_BASIC_SEASON_DATA_START,\n  SET_ALL_BASIC_SEASON_DATA_SUCCESS,\n  SetAllBasicSeasonDataSuccess\n} from '../actions';\nimport { SeasonDataState } from '../../interfaces';\nimport { Action } from 'redux';\n\nconst getDefaultState = (): SeasonDataState => ({\n  data: undefined,\n  isLoading: true\n});\n\nexport function allBasicSeasonDataReducer(\n  state = getDefaultState(),\n  action: Action\n): SeasonDataState {\n  switch (action.type) {\n    case SET_ALL_BASIC_SEASON_DATA_START:\n      return {\n        ...state,\n        isLoading: true\n      };\n    case SET_ALL_BASIC_SEASON_DATA_SUCCESS:\n      return {\n        ...state,\n        data: (action as SetAllBasicSeasonDataSuccess).seasonData,\n        isLoading: false\n      };\n    default:\n      return state\n  }\n}\n","import {\n  CLOSE_MENU,\n  OPEN_MENU,\n  SELECT_SEASON,\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS\n} from '../actions';\nimport { UiState } from '../../interfaces';\nimport { Action } from 'redux';\nimport { TABS } from '../../const';\n\nconst getDefaultState = (): UiState => ({\n  currentTab: TABS.FOOD,\n  isMenuOpen: false\n});\n\nexport function uiReducer(\n  state = getDefaultState(),\n  action: Action\n): UiState {\n  switch (action.type) {\n    case SELECT_SEASON:\n    case CLOSE_MENU:\n      return {\n        ...state,\n        isMenuOpen: false\n      };\n    case OPEN_MENU:\n      return {\n        ...state,\n        isMenuOpen: true\n      };\n    case GO_TO_FOOD_TAB:\n      return {\n        ...state,\n        currentTab: TABS.FOOD\n      };\n    case GO_TO_RECIPES_TABS:\n      return {\n        ...state,\n        currentTab: TABS.RECIPES\n      };\n    default:\n      return state\n  }\n}\n","import {\n  Action,\n  applyMiddleware,\n  combineReducers,\n  createStore\n} from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\n\nimport { currentSeasonDataReducer } from './current-season-data.reducer';\n\nimport { allBasicSeasonDataReducer } from './all-basic-season-data.reducer';\n\nimport { uiReducer } from './ui.reducer';\n\nimport {\n  rootEpic\n} from '../epics';\n\nimport { State } from '../../interfaces';\n\nconst epicMiddleware = createEpicMiddleware<Action, Action, State, {}>();\n\nexport const store = createStore(\n  combineReducers<State>({\n    allBasicSeasonData: allBasicSeasonDataReducer,\n    currentSeasonData: currentSeasonDataReducer,\n    ui: uiReducer\n  }),\n  applyMiddleware(epicMiddleware)\n);\nepicMiddleware.run(rootEpic);\n","import { connect } from 'react-redux';\nimport {\n  BottomTabs\n} from './BottomTabs';\nimport {\n  goToFoodTab,\n  goToRecipesTab,\n  selectIsCurrentTabFood,\n  selectIsCurrentTabRecipes\n} from '../../store';\nimport {\n  BottomTabDispatchProps,\n  BottomTabInputProps\n} from './BottomTabs.interface';\nimport { Dispatch } from 'redux';\nimport { State } from '../../interfaces';\n\nconst mapStateToProps = (\n  state: State\n): BottomTabInputProps => ({\n  isCurrentTabFood: selectIsCurrentTabFood(state),\n  isCurrentTabRecipes: selectIsCurrentTabRecipes(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): BottomTabDispatchProps => ({\n  goToFoodTab: () => dispatch(goToFoodTab()),\n  goToRecipesTab: () => dispatch(goToRecipesTab())\n});\n\nexport const BottomTabsConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BottomTabs);\n","import posed from 'react-pose';\n\nimport {\n  DEFAULT_ANIMATION_TIME\n} from './animations.const';\n\nexport const fadeInOutAnimation = ({\n  enterDelay = 0,\n  exitDelay = 0,\n  enterDuration = DEFAULT_ANIMATION_TIME,\n  exitDuration = DEFAULT_ANIMATION_TIME,\n  type = 'div'\n} = {}) => posed[type]({\n  enter: {\n    delay: enterDelay,\n    opacity: 1,\n    transition: {\n      duration: enterDuration\n    }\n  },\n  exit: {\n    delay: exitDelay,\n    opacity: 0,\n    transition: {\n      duration: exitDuration\n    }\n  }\n});\n","export const DEFAULT_ANIMATION_TIME = 500;\n","import React from 'react';\n\nimport './SeasonMenu.scss';\n\nimport {\n  BareButton,\n  CrossIcon,\n  TextMedium,\n  LoadingSpinner\n} from '../../elements';\n\nimport {\n  fadeInOutAnimation\n} from '../../helpers';\nimport { PoseGroup } from 'react-pose';\nimport { SeasonMenuProps } from './SeasonMenu.interface';\n\nconst OverlayFadeInOutAnimation = fadeInOutAnimation();\n\nexport const SeasonMenu = ({\n  allBasicSeasonData,\n  currentSeasonIndex,\n  isLoading,\n  isMenuOpen,\n  onSeasonSelected,\n  onClose\n}: SeasonMenuProps) => (\n  <div>\n    <PoseGroup>\n      {\n        isMenuOpen &&\n        <OverlayFadeInOutAnimation key='season-menu-overlay'\n          className='c-season-menu__overlay'\n          onClick={onClose} />\n      }\n    </PoseGroup>\n    <nav\n      className={`c-season-menu ${isMenuOpen ? 'c-season-menu--is-open' : ''}`}>\n      {\n        !isLoading\n          ? allBasicSeasonData && allBasicSeasonData.map(({ name }, index) => (\n              <BareButton\n                key={name}\n                className={\n                  `c-season-menu__button ${\n                    index === currentSeasonIndex\n                      ? 'c-season-menu__button--selected'\n                      : ''\n                    }`}\n                onClick={() => onSeasonSelected(index)}>\n                <TextMedium>{ name }</TextMedium>\n              </BareButton>\n            ))\n          : <div className='c-season-menu__loading-spinner-wrapper'>\n            <LoadingSpinner />\n          </div>\n      }\n      <BareButton className='c-season-menu__close-btn'\n        onClick={onClose}>\n        <CrossIcon />\n      </BareButton>\n    </nav>\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  SeasonMenu\n} from './SeasonMenu';\nimport {\n  selectIsMenuOpen,\n  closeMenu,\n  selectAllBasicSeasonData,\n  selectIsBasicSeasonDataLoading,\n  selectSeason,\n  selectCurrentSeasonIndex\n} from '../../store';\n\nimport { State } from '../../interfaces';\nimport {\n  SeasonMenuInputProps,\n  SeasonMenuDispatchProps\n} from './SeasonMenu.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: State\n): SeasonMenuInputProps => ({\n  allBasicSeasonData: selectAllBasicSeasonData(state),\n  currentSeasonIndex: selectCurrentSeasonIndex(state),\n  isLoading: selectIsBasicSeasonDataLoading(state),\n  isMenuOpen: selectIsMenuOpen(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): SeasonMenuDispatchProps => ({\n  onClose: () => dispatch(closeMenu()),\n  onSeasonSelected: (seasonIndex: number) => dispatch(selectSeason(seasonIndex))\n});\n\nexport const SeasonMenuConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SeasonMenu);\n","import { connect } from 'react-redux';\nimport {\n  Header\n} from './Header';\nimport {\n  openMenu\n} from '../../store';\nimport { HeaderDispatchProps } from './Header.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): HeaderDispatchProps => ({\n  onMenuOpen: () => dispatch(openMenu())\n});\n\nexport const HeaderConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Header);\n","import React, { SFC } from 'react';\n\nimport './Header.scss';\n\nimport {\n  BareButton,\n  BurgerIcon,\n  TextHeadingLarge\n} from '../../elements';\nimport { HeaderProps } from './Header.interface';\n\nexport const Header: SFC<HeaderProps> = ({\n  onMenuOpen\n}) => (\n  <header className='c-header'>\n    <BareButton className='c-header__btn' onClick={onMenuOpen}>\n      <BurgerIcon />\n    </BareButton>\n    <h1 className='c-header__text'>\n      <TextHeadingLarge>\n        Eat Seasonal\n      </TextHeadingLarge>\n    </h1>\n  </header>\n);\n","import React, { Component } from 'react';\n\nimport './BackgroundImageWithLoadingSpinner.scss';\n\nimport {\n  loadImage\n} from '../../services/image-loader.service';\n\nimport {\n  LoadingSpinner\n} from '../../elements';\n\nimport {\n  fadeInOutAnimation\n} from '../../helpers';\n\nimport { PoseGroup } from 'react-pose';\n\nconst FadeInOutAnimation = fadeInOutAnimation();\n\ninterface BackgroundImageWithLoadingSpinnerPropsInterface {\n  src: string;\n}\ninterface BackgroundImageWithLoadingSpinnerStateInterface {\n  isVisible: boolean;\n}\n\nexport class BackgroundImageWithLoadingSpinner\nextends Component<\n  BackgroundImageWithLoadingSpinnerPropsInterface,\n  BackgroundImageWithLoadingSpinnerStateInterface\n> {\n  constructor (props: BackgroundImageWithLoadingSpinnerPropsInterface) {\n    super(props);\n    this.state = {\n      isVisible: false\n    };\n  }\n\n  async componentDidMount () {\n    await loadImage(this.props.src);\n    this.setState({\n      isVisible: true\n    });\n  }\n\n  render () {\n    return (\n      <PoseGroup>\n        {\n          this.state.isVisible\n            ? <FadeInOutAnimation key='background-image-fade-in-out'\n              className='c-background-image-with-loading-spinner'\n              style={{ backgroundImage: `url(${this.props.src})` }}>\n              { this.props.children }\n            </FadeInOutAnimation>\n            : <FadeInOutAnimation key='loading-spinner-fade-in-out'\n              className='c-background-image-with-loading-spinner'>\n              <LoadingSpinner />\n            </FadeInOutAnimation>\n        }\n      </PoseGroup>\n    );\n  }\n}\n","import React, { SFC } from 'react';\n\nimport './ImageGridItem.scss';\n\nimport {\n  TextMedium\n} from '../../elements';\n\nimport {\n  BackgroundImageWithLoadingSpinner\n} from '../BackgroundImageWithLoadingSpinner/BackgroundImageWithLoadingSpinner';\nimport { ImageGridItemProps } from './ImageGridItem.interface';\n\nexport const ImageGridItem: SFC<ImageGridItemProps> = ({\n  imageUrlSmall,\n  name\n}) => (\n  <div className='c-image-grid-item'>\n    <div className='c-image-grid-item__inner'>\n      <div className='c-image-grid-item__image'>\n        <BackgroundImageWithLoadingSpinner src={imageUrlSmall}/>\n      </div>\n      <TextMedium className='c-image-grid-item__text'>\n        {name}\n      </TextMedium>\n    </div>\n  </div>\n);\n","import React, { SFC } from 'react';\n\nimport './ImageGrid.scss';\n\nimport {\n  ImageGridItem\n} from '../ImageGridItem/ImageGridItem';\nimport { ImageGridProps } from './ImageGrid.interface';\n\nexport const ImageGrid: SFC<ImageGridProps> = ({ data }) => (\n  <div className='c-image-grid'>\n    {\n      data && data.map((item) => (\n        <ImageGridItem\n          key={item.name}\n          imageUrlSmall={item.imageUrlSmall}\n          name={item.name} />\n      ))\n    }\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodTable\n} from './FoodTable';\nimport {\n  selectIsCurrentSeasonLoading,\n  selectCurrentSeasonFood,\n  selectCurrentSeasonRecipes,\n  selectIsCurrentTabFood\n} from '../../store';\nimport { State } from '../../interfaces';\nimport { FoodTableInputProps } from './FoodTable.interface';\n\nconst mapStateToProps = (\n  state: State\n): FoodTableInputProps => {\n  return {\n    isCurrentTabFood: selectIsCurrentTabFood(state),\n    isLoading: selectIsCurrentSeasonLoading(state),\n    food: selectCurrentSeasonFood(state),\n    recipes: selectCurrentSeasonRecipes(state)\n  }\n}\n\nexport const FoodTableConnecter = connect(\n  mapStateToProps\n)(FoodTable);\n","import React from 'react';\n\nimport './FoodTable.scss';\n\nimport {\n  ImageGrid\n} from '../../molecules';\n\nimport {\n  LoadingSpinner\n} from '../../elements';\nimport { FoodTableProps } from './FoodTable.interface';\n\nexport const FoodTable = ({\n  isCurrentTabFood,\n  isLoading,\n  food,\n  recipes\n}: FoodTableProps) => (\n  isLoading\n    ? <div className='c-food-table__loading-spinner-wrapper'>\n      <LoadingSpinner />\n    </div>\n    : isCurrentTabFood\n      ? <ImageGrid data={food} />\n      : <ImageGrid data={recipes} />\n);\n","import React from 'react';\n\nimport {\n  FoodTableConnecter\n} from '../../organisms';\n\nexport const FoodPage = () => (\n  <FoodTableConnecter />\n);\n","import React from 'react';\n\nimport {\n  BottomTabsConnecter,\n  SeasonMenuConnecter,\n  HeaderConnecter\n} from '../organisms';\n\nimport {\n  FoodPage\n} from '../pages';\nimport './App.scss';\n\nimport { Provider } from 'react-redux';\nimport { store } from '../store/reducers';\n\nexport const App = () => (\n  <Provider store={store}>\n    <div className='c-app'>\n      <HeaderConnecter />\n      <SeasonMenuConnecter />\n      <FoodPage />\n      <BottomTabsConnecter />\n    </div>\n  </Provider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './styles/index.scss';\nimport { App } from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\nif (rootElement && rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}