{"version":3,"sources":["services/image-loader.service.ts","components-elements/BackgroundImageWithLoadingSpinner/BackgroundImageWithLoadingSpinner.tsx","components-elements/Buttons/BareButton.tsx","components-elements/Buttons/PrimaryButton.tsx","components-elements/Icons/ArrowIcon.tsx","components-elements/Icons/BurgerIcon.tsx","components-elements/Icons/CrossIcon.tsx","components-elements/Icons/MagnifyingGlassIcon.tsx","components-elements/Input/Input.tsx","components-elements/LoadingSpinner/LoadingSpinner.tsx","components-elements/Text/TextHeadingLarge.tsx","components-elements/Text/TextHeadingMedium.tsx","components-elements/Text/TextHeadingSmall.tsx","components-elements/Text/TextMedium.tsx","components-elements/Text/TextSmall.tsx","components-elements/index.ts","components-layout/index.ts","components-layout/ImageGridItem/ImageGridItem.tsx","components-layout/SummaryColumn/index.ts","helpers/Animations/animations.const.ts","helpers/Animations/fade.animations.ts","helpers/index.ts","components-layout/ImageGrid/ImageGrid.tsx","components-layout/SummaryColumn/SummaryColumn.tsx","components-layout/SummaryColumnList/index.ts","components-layout/SummaryColumnList/SummaryColumnList.tsx","components-main/AboutEatSeasonal/AboutEatSeasonal.tsx","components-main/AndroidAppDownload/AndroidAppDownload.tsx","components-main/BottomTabs/BottomTabs.tsx","store/actions/route.actions.ts","store/actions/web-ui.actions.ts","const/tabs.enum.ts","const/urls.const.ts","store/selectors/route.selectors.ts","store/selectors/web-ui.selectors.ts","store/epics/tracking.epics.ts","store/epics/index.ts","store/epics/route.epics.ts","store/reducers/web-ui.reducer.ts","store/reducers/index.ts","components-main/BottomTabs/BottomTabs.connector.ts","components-main/CurrentSeasonName/CurrentSeasonName.connector.ts","components-main/CurrentSeasonName/CurrentSeasonName.tsx","components-main/FoodDetailsLoader/FoodDetailsLoader.connector.ts","components-main/FoodDetailsLoader/FoodDetailsLoader.tsx","components-main/FoodDetailsTopSection/FoodDetailsTopSection.connector.ts","components-main/FoodDetailsTopSection/FoodDetailsTopSection.tsx","components-main/FoodTable/FoodTable.connector.ts","components-main/FoodTable/FoodTable.tsx","components-main/Header/Header.connector.ts","components-main/Header/Header.tsx","components-layout/PageLayout/PageLayout.tsx","components-main/SeasonMenu/SeasonMenu.tsx","components-main/SeasonMenu/SeasonMenu.connector.ts","components-main/PageWithMenu/PageWithMenu.tsx","components-main/SearchBar/SearchBar.tsx","components-main/SearchBar/SearchBar.connector.ts","components-main/SeasonsForFood/SeasonsForFood.connector.ts","components-main/SeasonsForFood/SeasonsForFood.tsx","components-main/ViewWebAppVersion/ViewWebAppVersion.connector.ts","components-main/ViewWebAppVersion/ViewWebAppVersion.tsx","components-main/ViewAppLinks/ViewAppLinks.tsx","components-main/WhyEatSeasonal/WhyEatSeasonal.tsx","components-pages/FoodDetailsPage/FoodDetailsPage.tsx","components-pages/FoodTablePage/FoodTablePage.tsx","components-pages/IntroPage/IntroPage.tsx","components-app/App.tsx","serviceWorker.js","index.tsx"],"names":["loadingImages","loadImage","imageSrc","Promise","resolve","image","document","createElement","src","push","addEventListener","createImageOnLoadPromise","FadeInOutAnimation","fadeInOutAnimation","BackgroundImageWithLoadingSpinner","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isVisible","inherits","createClass","key","value","_componentDidMount","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","setState","stop","apply","arguments","react_default","react_pose_es","className","style","backgroundImage","concat","children","LoadingSpinner_LoadingSpinner_LoadingSpinner","Component","BareButton","_ref","onClick","PrimaryButton","ArrowIcon","viewBox","strokeLinecap","strokeWidth","stroke","x1","y1","x2","y2","BurgerIcon","height","width","y","CrossIcon","points","MagnifyingGlassIcon","d","Input","_ref$type","type","placeholder","onChange","_onChange","_x","toString","event","target","LoadingSpinner","TextHeadingLarge","TextHeadingMedium","TextHeadingSmall","TextMedium","TextSmall","__webpack_require__","__webpack_exports__","BackgroundImageWithLoadingSpinner_BackgroundImageWithLoadingSpinner_BackgroundImageWithLoadingSpinner","BareButton_BareButton","PrimaryButton_PrimaryButton","ArrowIcon_ArrowIcon","BurgerIcon_BurgerIcon","CrossIcon_CrossIcon","MagnifyingGlassIcon_MagnifyingGlassIcon","Input_Input_Input","TextHeadingLarge_TextHeadingLarge","TextHeadingMedium_TextHeadingMedium","TextHeadingSmall_TextHeadingSmall","TextMedium_TextMedium","TextSmall_TextSmall","_ImageGrid_ImageGrid__WEBPACK_IMPORTED_MODULE_1__","_SummaryColumn__WEBPACK_IMPORTED_MODULE_2__","o","_SummaryColumnList__WEBPACK_IMPORTED_MODULE_3__","ImageGridItem","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_elements__WEBPACK_IMPORTED_MODULE_2__","id","imageUrlSmall","name","_SummaryColumn__WEBPACK_IMPORTED_MODULE_0__","_SummaryColumn_interface__WEBPACK_IMPORTED_MODULE_1__","length","undefined","_ref$enterDelay","enterDelay","_ref$exitDelay","exitDelay","_ref$enterDuration","enterDuration","_ref$exitDuration","exitDuration","posed","enter","delay","opacity","transition","duration","exit","fade_animations_fadeInOutAnimation","ImageGrid","_ImageGridItem_ImageGridItem__WEBPACK_IMPORTED_MODULE_2__","_components_elements__WEBPACK_IMPORTED_MODULE_3__","data","map","item","assign","SummaryColumn","imageUrl","text","title","_SummaryColumnList_interface__WEBPACK_IMPORTED_MODULE_0__","_SummaryColumnList__WEBPACK_IMPORTED_MODULE_1__","SummaryColumnList","columns","column","index","AboutEatSeasonal","objectDestructuringEmpty","components_elements","AndroidAppDownload","href","alt","addTabClasses","isSelected","GO_TO_WEB_VERSION","GO_BACK_FROM_FOOD_DETAILS","GO_TO_FOOD_TAB","GO_TO_RECIPES_TABS","TABS","selectCurrentFoodDetailsParams","createMatchSelector","selectCurrentFoodDetailsId","createSelector","routeParams","params","selectCurrentTab","webUi","webUiState","currentTab","selectIsCurrentTabFood","FOOD","selectIsCurrentTabRecipes","RECIPES","ACTIONS_TO_TRACK","SELECT_SEASON","FOOD_DETAILS_SELECT_SEASON","OPEN_MENU","CLOSE_MENU","RECIPE_ITEM_CLICKED","FOOD_ITEM_CLICKED","rootEpic","combineEpics","toConsumableArray","rootEpics","actions$","pipe","filter","includes","_ref2","ga","ignoreElements","ofType","mapTo","state$","withLatestFrom","slicedToArray","action","selectCurrentSeasonRecipesById","recipeItemId","recipe","window","open","linkUrl","foodItemId","setCurrentFoodDetailsDataStart","INIT_APP","_ref3","foodDetailsId","Boolean","getDefaultState","epicMiddleware","createEpicMiddleware","storeHistory","createHashHistory","store","createStore","combineReducers","objectSpread","allReducers","router","connectRouter","compose","applyMiddleware","routerMiddleware","run","BottomTabsConnecter","connect","isCurrentTabFood","isCurrentTabRecipes","dispatch","goToFoodTab","goToRecipesTab","CurrentSeasonNameConnecter","currentSeasonName","selectCurrentSeasonName","isLoading","selectIsCurrentSeasonLoading","FoodDetailsLoaderConnecter","selectIsFoodDataOrBasicSeasonsLoading","FoodDetailsTopSectionConnecter","foodImageUrl","selectCurrentFoodDetailsImageUrl","foodName","selectCurrentFoodDetailsName","onGoBack","FoodTableConnecter","food","selectVisibleFoodData","recipes","selectVisibleRecipeData","onFoodClick","foodItemClicked","onRecipeClick","recipeItemClicked","components_layout","HeaderConnecter","onMenuOpen","openMenu","SearchBarConnecter","PageLayout","OverlayFadeInOutAnimation","SeasonMenuConnecter","allBasicSeasonData","selectAllBasicSeasonData","currentSeasonIndex","selectCurrentSeasonIndex","selectIsBasicSeasonDataLoading","isMenuOpen","selectIsMenuOpen","onClose","closeMenu","onSeasonSelected","seasonIndex","selectSeason","PageWithMenu","PageLayout_PageLayout_PageLayout","getSearchBarClassName","isSearchBarVisible","selectIsSearchBarVisible","onHideSearchBar","hideSearchBar","onSearchChanged","newSearchTerm","searchBarChanged","onShowSearchBar","showSearchBar","ref","input","querySelector","focus","focusOnInputIfSearchVisible","SeasonsForFoodConnecter","seasonsSelectedForFood","selectSeasonsSelectedForFood","foodDetailsSelectSeason","react","substring","ViewWebAppVersionConnector","onGoToWebVersion","ViewAppLinks","AndroidAppDownload_AndroidAppDownload_AndroidAppDownload","summaryColumns","WhyEatSeasonal","FoodDetailsPage","PageWithMenu_PageWithMenu","FoodTablePage","IntroPage","ViewAppLinks_ViewAppLinks_ViewAppLinks","AboutEatSeasonal_AboutEatSeasonal_AboutEatSeasonal","WhyEatSeasonal_WhyEatSeasonal_WhyEatSeasonal","App","es","esm","history","react_router","path","component","exact","location","hostname","match","rootElement","getElementById","hasChildNodes","hydrate","App_App","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42b98ae6.chunk.js","sourcesContent":["const loadingImages = [];\n\nconst createImageOnLoadPromise = (\n  imageSrc: string\n): Promise<HTMLImageElement> => {\n  return new Promise((resolve) => {\n    const image = document.createElement('img');\n    image.src = imageSrc;\n    loadingImages.push(image);\n    image.addEventListener('load', () => {\n      resolve(image);\n    });\n  });\n};\n\nexport const loadImage = (\n  imageSrc: string\n): Promise<HTMLImageElement> => {\n  const onLoadPromise = createImageOnLoadPromise(imageSrc);\n  return onLoadPromise;\n};\n","import React, { Component } from 'react';\n\nimport './BackgroundImageWithLoadingSpinner.scss';\n\nimport {\n  loadImage\n} from '../../services/image-loader.service';\n\nimport {\n  LoadingSpinner\n} from '../../components-elements';\n\nimport {\n  fadeInOutAnimation\n} from '../../helpers';\n\nimport { PoseGroup } from 'react-pose';\n\nconst FadeInOutAnimation = fadeInOutAnimation();\n\ninterface IBackgroundImageWithLoadingSpinnerPropsInterface {\n  src: string;\n}\ninterface IBackgroundImageWithLoadingSpinnerStateInterface {\n  isVisible: boolean;\n}\n\nexport class BackgroundImageWithLoadingSpinner\nextends Component<\n  IBackgroundImageWithLoadingSpinnerPropsInterface,\n  IBackgroundImageWithLoadingSpinnerStateInterface\n> {\n  constructor(props: IBackgroundImageWithLoadingSpinnerPropsInterface) {\n    super(props);\n    this.state = {\n      isVisible: false\n    };\n  }\n\n  public async componentDidMount() {\n    await loadImage(this.props.src);\n    this.setState({\n      isVisible: true\n    });\n  }\n\n  public render() {\n    return (\n      <PoseGroup>\n        {\n          this.state.isVisible\n            ? <FadeInOutAnimation key='background-image-fade-in-out'\n              className='c-background-image-with-loading-spinner'\n              style={{ backgroundImage: `url(${this.props.src})` }}>\n              { this.props.children }\n            </FadeInOutAnimation>\n            : <FadeInOutAnimation key='loading-spinner-fade-in-out'\n              className='c-background-image-with-loading-spinner'>\n              <LoadingSpinner />\n            </FadeInOutAnimation>\n        }\n      </PoseGroup>\n    );\n  }\n}\n","import React, { SFC } from 'react';\nimport './BareButton.scss';\n\nexport const BareButton: SFC<{\n  className?: string,\n  onClick?: () => void\n}> = ({\n  className,\n  children,\n  onClick\n}) => (\n  <button className={`${(className || '')} c-bare-button`} onClick={onClick}>\n    { children }\n  </button>\n);\n","import React, { SFC } from 'react';\nimport './PrimaryButton.scss';\n\nexport const PrimaryButton: SFC<{\n  className?: string,\n  onClick?: () => void\n}> = ({\n  className,\n  children,\n  onClick\n}) => (\n  <button className={`${(className || '')} c-primary-button`}\n    onClick={onClick}>\n    { children }\n  </button>\n);\n","import React from 'react';\nimport './icon.scss';\n\nexport const ArrowIcon = () => (\n  <svg className='c-icon' viewBox='0 0 24 24'>\n    <g strokeLinecap='round' strokeWidth='2' stroke='#000'>\n      <line x1='1' y1='11' x2='6' y2='5' />\n      <line x1='1' y1='11' x2='6' y2='17' />\n      <line x1='2' y1='11' x2='22' y2='11' />\n    </g>\n  </svg>\n);\n","import React from 'react';\nimport './icon.scss';\n\nexport const BurgerIcon = () => (\n  <svg viewBox='0 0 24 24' className='c-icon'>\n    <rect height='2' width='24' y='5'></rect>\n    <rect height='2' width='24' y='11'></rect>\n    <rect height='2' width='24' y='17'></rect>\n  </svg>\n);\n","import React from 'react';\nimport './icon.scss';\n\nexport const CrossIcon = () => (\n  <svg className='c-icon' viewBox='0 0 24 24'>\n    {/* tslint:disable-next-line */}\n    <polygon points='19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12' />\n  </svg>\n);\n","import React from 'react';\nimport './icon.scss';\n\nexport const MagnifyingGlassIcon = () => (\n  <svg className='c-icon' viewBox='0 0 32 32'>\n    {/* tslint:disable-next-line */}\n    <path d='M19.4271164,21.4271164 C18.0372495,22.4174803 16.3366522,23 14.5,23 C9.80557939,23 6,19.1944206 6,14.5 C6,9.80557939 9.80557939,6 14.5,6 C19.1944206,6 23,9.80557939 23,14.5 C23,16.3366522 22.4174803,18.0372495 21.4271164,19.4271164 L27.0119176,25.0119176 C27.5621186,25.5621186 27.5575313,26.4424687 27.0117185,26.9882815 L26.9882815,27.0117185 C26.4438648,27.5561352 25.5576204,27.5576204 25.0119176,27.0119176 L19.4271164,21.4271164 L19.4271164,21.4271164 Z M14.5,21 C18.0898511,21 21,18.0898511 21,14.5 C21,10.9101489 18.0898511,8 14.5,8 C10.9101489,8 8,10.9101489 8,14.5 C8,18.0898511 10.9101489,21 14.5,21 L14.5,21 Z' />\n  </svg>\n);\n","import React, { SFC } from 'react';\nimport './Input.scss';\n\nexport const Input: SFC<{\n  className?: string,\n  type?: 'text' | 'number',\n  placeholder?: string,\n  onChange: (newValue: string) => void\n}> = ({\n  children,\n  className,\n  type = 'text',\n  placeholder,\n  onChange\n}) => (\n  <input\n    className={`${(className || '')} c-input`}\n    placeholder={placeholder}\n    type={type}\n    onChange={(event) => onChange(event.target.value)}>\n    { children }\n  </input>\n);\n","import React from 'react';\n\nimport './LoadingSpinner.scss';\n\nexport const LoadingSpinner = () => (\n  <div className='c-loading-spinner'>\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n  </div>\n);\n","import React, { SFC } from 'react';\nimport './TextHeadingLarge.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextHeadingLarge: SFC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-heading-large`}>\n    { children }\n  </span>\n);\n","import React, { SFC } from 'react';\nimport './TextHeadingMedium.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextHeadingMedium: SFC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-heading-medium`}>\n    { children }\n  </span>\n);\n","import React, { SFC } from 'react';\nimport './TextHeadingSmall.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextHeadingSmall: SFC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-heading-small`}>\n    { children }\n  </span>\n);\n","import React, { SFC } from 'react';\nimport './TextMedium.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextMedium: SFC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-medium`}>\n    { children }\n  </span>\n);\n","import React, { SFC } from 'react';\nimport './TextSmall.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextSmall: SFC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-small`}>\n    { children }\n  </span>\n);\n","export * from './BackgroundImageWithLoadingSpinner/BackgroundImageWithLoadingSpinner';\n\nexport * from './Buttons';\n\nexport * from './Icons';\n\nexport * from './Input';\n\nexport * from './LoadingSpinner/LoadingSpinner';\n\nexport * from './Text';\n","export * from './ImageGridItem/ImageGridItem';\n\nexport * from './ImageGrid/ImageGrid';\n\nexport * from './SummaryColumn';\n\nexport * from './SummaryColumnList';\n","import React, { SFC } from 'react';\n\nimport './ImageGridItem.scss';\n\nimport {\n  TextMedium\n} from '../../components-elements';\n\nimport {\n  BackgroundImageWithLoadingSpinner\n} from '../../components-elements';\nimport { IImageGridItem } from './ImageGridItem.interface';\n\nexport const ImageGridItem: SFC<IImageGridItem> = ({\n  id,\n  imageUrlSmall,\n  onClick,\n  name\n}) => (\n  <div onClick={() => onClick && onClick(id)}\n    className='c-image-grid-item'>\n    <div className='c-image-grid-item__inner'>\n      <div className='c-image-grid-item__image'>\n        <BackgroundImageWithLoadingSpinner src={imageUrlSmall}/>\n      </div>\n      <TextMedium className='c-image-grid-item__text'>\n        {name}\n      </TextMedium>\n    </div>\n  </div>\n);\n","export * from './SummaryColumn';\n\nexport * from './SummaryColumn.interface';\n","export const DEFAULT_ANIMATION_TIME = 500;\n","import posed from 'react-pose';\n\nimport {\n  DEFAULT_ANIMATION_TIME\n} from './animations.const';\n\nexport const fadeInOutAnimation = ({\n  enterDelay = 0,\n  exitDelay = 0,\n  enterDuration = DEFAULT_ANIMATION_TIME,\n  exitDuration = DEFAULT_ANIMATION_TIME,\n  type = 'div'\n} = {}) => posed[type]({\n  enter: {\n    delay: enterDelay,\n    opacity: 1,\n    transition: {\n      duration: enterDuration\n    }\n  },\n  exit: {\n    delay: exitDelay,\n    opacity: 0,\n    transition: {\n      duration: exitDuration\n    }\n  }\n});\n","export * from './Animations';\n","import React, { SFC } from 'react';\n\nimport './ImageGrid.scss';\n\nimport {\n  ImageGridItem\n} from '../ImageGridItem/ImageGridItem';\nimport { IImageGrid } from './ImageGrid.interface';\nimport { TextMedium } from '../../components-elements';\n\nexport const ImageGrid: SFC<IImageGrid> = ({\n  data,\n  onClick\n}) => (\n  <div className='c-image-grid'>\n    {\n      data && data.length\n        ? data.map((item) => (\n          <ImageGridItem\n            key={item.name}\n            {...item}\n            onClick={onClick} />\n        ))\n        : <TextMedium className='c-image-grid__no-results'>\n            No results found\n          </TextMedium>\n    }\n  </div>\n);\n","import React, { SFC } from 'react';\n\nimport './SummaryColumn.scss';\n\nimport {\n  TextMedium,\n  TextHeadingSmall\n} from '../../components-elements';\n\nimport {\n  ISummaryColumn\n} from './SummaryColumn.interface';\n\nexport const SummaryColumn: SFC<ISummaryColumn> = ({\n  imageUrl,\n  text,\n  title\n}) => (\n  <div className='c-summary-column'>\n    {\n      imageUrl && <img src={imageUrl} className='c-summary-column__image' />\n    }\n    <h3 className='c-summary-column__heading'>\n      <TextHeadingSmall>\n        { title }\n      </TextHeadingSmall>\n    </h3>\n    <TextMedium>\n      { text }\n    </TextMedium>\n  </div>\n);\n","export * from './SummaryColumnList.interface';\n\nexport * from './SummaryColumnList';\n","import React, { SFC } from 'react';\n\nimport './SummaryColumnList.scss';\n\nimport {\n  SummaryColumn\n} from './../SummaryColumn';\n\nimport {\n  ISummaryColumnList\n} from './SummaryColumnList.interface';\n\nexport const SummaryColumnList: SFC<ISummaryColumnList> = ({\n  columns\n}) => (\n  <ul className='c-summary-column-list'>\n    {\n      columns.map((column, index) => (\n        <SummaryColumn {...column} key={index} />\n      ))\n    }\n  </ul>\n);\n","import React, { SFC } from 'react';\n\nimport './AboutEatSeasonal.scss';\n\nimport {\n  TextHeadingLarge,\n  TextMedium\n} from '../../components-elements';\n\nexport const AboutEatSeasonal: SFC<{}> = ({}) => (\n  <div className='c-about-eat-seasonal'>\n    <h2 className='c-about-eat-seasonal__heading'>\n      <TextHeadingLarge>\n        About Eat Seasonal\n      </TextHeadingLarge>\n    </h2>\n    <p className='c-about-eat-seasonal__text'>\n      <TextMedium>\n        Eat Seasonal started because we wanted a way to easily see what fruit\n        and vegetables are in seasons. Walking around a supermarket, trying to\n        plan seasonal meals becomes much easier when you can quickly access\n        information on everything that's in season through your phone.\n      </TextMedium>\n    </p>\n    <p className='c-about-eat-seasonal__text'>\n      <TextMedium>\n        The app and website give you quick and simple view of all the food\n        currently in seasons. They also provide a recipes section including\n        carefully selected recipes which use ingredients which are mostly in\n        seasons. New recipes are being added all the time!\n      </TextMedium>\n    </p>\n  </div>\n);\n","import React, { SFC } from 'react';\n\nimport './AndroidAppDownload.scss';\n\nexport const AndroidAppDownload: SFC<{}> = () => (\n  <a className='c-android-app-download'\n    href={\n    'https://play.google.com/store/apps/details?id=com.chrisbdev.seasonal&p' +\n      'campaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'\n  }>\n    <img className='c-android-app-download__image'\n      alt='Get it on Google Play'\n      src='https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png'/>\n  </a>\n);\n","import React, { SFC } from 'react';\n\nimport './BottomTabs.scss';\n\nimport {\n  BareButton\n} from '../../components-elements';\nimport { IBottomTabProps } from './BottomTabs.interface';\n\nconst addTabClasses = (isSelected: boolean) => (\n  `c-bottom-tabs__tab ${\n    isSelected\n      ? ' c-bottom-tabs__tab--selected'\n      : ''\n  }`\n);\n\nexport const BottomTabs: SFC<IBottomTabProps> = ({\n  isCurrentTabFood,\n  isCurrentTabRecipes,\n  goToFoodTab,\n  goToRecipesTab\n}) => (\n  <nav className='c-bottom-tabs'>\n    <BareButton\n      className={addTabClasses(isCurrentTabFood)}\n      onClick={goToFoodTab}>\n      Food\n    </BareButton>\n    <BareButton\n      className={addTabClasses(isCurrentTabRecipes)}\n      onClick={goToRecipesTab}>\n      Recipes\n    </BareButton>\n  </nav>\n);\n","import { Action } from 'redux';\n\nexport const GO_TO_WEB_VERSION = 'GO_TO_WEB_VERSION';\nexport function goToWebVersion(): Action {\n  return {\n    type: GO_TO_WEB_VERSION\n  };\n}\n\nexport const GO_BACK_FROM_FOOD_DETAILS = 'GO_BACK_FROM_FOOD_DETAILS';\nexport function goBackFromFoodDetails(): Action {\n  return {\n    type: GO_BACK_FROM_FOOD_DETAILS\n  };\n}\n","import { Action } from 'redux';\n\nexport const GO_TO_FOOD_TAB = 'GO_TO_FOOD_TAB';\nexport function goToFoodTab(): Action {\n  return {\n    type: GO_TO_FOOD_TAB\n  };\n}\n\nexport const GO_TO_RECIPES_TABS = 'GO_TO_RECIPES_TABS';\nexport function goToRecipesTab(): Action {\n  return {\n    type: GO_TO_RECIPES_TABS\n  };\n}\n","export enum TABS {\n  FOOD,\n  RECIPES\n}\n","export const LANDING_URL = '/';\nexport const FOOD_TABLE_URL = '/food';\nexport const FOOD_DETAILS_URL = '/food-details';\n","import { createMatchSelector, RouterRootState } from 'connected-react-router';\nimport { FOOD_DETAILS_URL } from '../../const';\nimport { createSelector } from 'reselect';\n\nexport const selectCurrentFoodDetailsParams = createMatchSelector<\n  RouterRootState,\n  {\n    id: string\n  }\n>(\n  `${FOOD_DETAILS_URL}/:id`\n);\n\nexport const selectCurrentFoodDetailsId = createSelector(\n  selectCurrentFoodDetailsParams,\n  (routeParams) => routeParams && routeParams.params.id\n);\n","import { createSelector } from 'reselect';\nimport { IState } from '../../interfaces';\nimport { TABS } from '../../const';\n\nconst selectWebUiState = (state: IState) => state.webUi;\n\nexport const selectCurrentTab = createSelector(\n  selectWebUiState,\n  (webUiState): TABS => webUiState.currentTab\n);\n\nexport const selectIsCurrentTabFood = createSelector(\n  selectCurrentTab,\n  (currentTab): boolean => currentTab === TABS.FOOD\n);\n\nexport const selectIsCurrentTabRecipes = createSelector(\n  selectCurrentTab,\n  (currentTab): boolean => currentTab === TABS.RECIPES\n);\n","import { ActionsObservable } from 'redux-observable';\n\nimport {\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS,\n  GO_TO_WEB_VERSION\n} from '../actions';\n\nimport {\n  SELECT_SEASON,\n  FOOD_DETAILS_SELECT_SEASON,\n  OPEN_MENU,\n  CLOSE_MENU,\n  RECIPE_ITEM_CLICKED,\n  FOOD_ITEM_CLICKED\n} from '@chrisb-dev/seasonal-shared';\n\nimport {\n  map,\n  filter,\n  ignoreElements\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { Observable } from 'rxjs';\nimport { WebSeasonalEpic } from './seasonal-epic.type';\n\nconst ACTIONS_TO_TRACK = [\n  SELECT_SEASON,\n  FOOD_DETAILS_SELECT_SEASON,\n  OPEN_MENU,\n  CLOSE_MENU,\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS,\n  GO_TO_WEB_VERSION,\n  RECIPE_ITEM_CLICKED,\n  FOOD_ITEM_CLICKED\n];\n\nexport const trackActionEpic$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    filter(({ type }) => ACTIONS_TO_TRACK.includes(type)),\n    map(({ type }) => ga('send', 'event', type, type)),\n    ignoreElements()\n  )\n);\n","import { combineEpics } from 'redux-observable';\n\nimport { rootEpics } from '@chrisb-dev/seasonal-shared';\nimport { trackActionEpic$ } from './tracking.epics';\n\nimport {\n  goToWebVersion$,\n  goToRecipeLink$,\n  goToFoodLink$,\n  goToFoodTable$,\n  goToFoodDetails$,\n  initFoodDetails$\n} from './route.epics';\n\nexport const rootEpic = combineEpics(\n  ...rootEpics,\n  trackActionEpic$,\n  goToWebVersion$,\n  goToRecipeLink$,\n  goToFoodLink$,\n  goToFoodDetails$,\n  initFoodDetails$,\n  goToFoodTable$\n);\n","import { ActionsObservable, ofType, StateObservable } from 'redux-observable';\nimport {\n  mapTo, withLatestFrom, map, filter\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { Observable } from 'rxjs';\nimport {\n  GO_TO_WEB_VERSION,\n  GO_BACK_FROM_FOOD_DETAILS\n} from '../actions';\nimport {\n  RECIPE_ITEM_CLICKED,\n  IRecipeItemClicked,\n  FOOD_ITEM_CLICKED,\n  IFoodItemClicked,\n  FOOD_DETAILS_SELECT_SEASON,\n  SELECT_SEASON,\n  setCurrentFoodDetailsDataStart,\n  INIT_APP,\n  selectCurrentSeasonRecipesById\n} from '@chrisb-dev/seasonal-shared';\nimport { push } from 'connected-react-router';\nimport { FOOD_TABLE_URL, FOOD_DETAILS_URL } from '../../const';\nimport { IState } from '../../interfaces';\nimport { selectCurrentFoodDetailsId } from '../selectors';\nimport { WebSeasonalEpic } from './seasonal-epic.type';\n\nexport const goToWebVersion$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(GO_TO_WEB_VERSION),\n    mapTo(push(FOOD_TABLE_URL))\n  )\n);\n\nexport const goToRecipeLink$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(RECIPE_ITEM_CLICKED),\n    withLatestFrom(state$),\n    map(([\n      action,\n      state\n    ]) => selectCurrentSeasonRecipesById(\n        (action as IRecipeItemClicked).recipeItemId\n      )(state)\n    ),\n    map((recipe) => {\n      if (recipe) {\n        window.open(recipe.linkUrl, '_blank');\n      }\n      return { type: '' };\n    })\n  )\n);\n\nexport const goToFoodLink$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(FOOD_ITEM_CLICKED),\n    map((action) => (\n      push(`${FOOD_DETAILS_URL}/${(action as IFoodItemClicked).foodItemId}`)\n    ))\n  )\n);\n\nexport const goToFoodDetails$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(FOOD_ITEM_CLICKED),\n    map((action) => (\n      setCurrentFoodDetailsDataStart((action as IFoodItemClicked).foodItemId)\n    ))\n  )\n);\n\nexport const initFoodDetails$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(INIT_APP),\n    withLatestFrom(state$),\n    map(([, state]) => selectCurrentFoodDetailsId(state)),\n    filter((foodDetailsId) => Boolean(foodDetailsId)),\n    map((foodDetailsId) => setCurrentFoodDetailsDataStart(foodDetailsId!))\n  )\n);\n\nexport const goToFoodTable$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      GO_BACK_FROM_FOOD_DETAILS,\n      FOOD_DETAILS_SELECT_SEASON,\n      SELECT_SEASON\n    ),\n    mapTo(push(FOOD_TABLE_URL))\n  )\n);\n","import {\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS\n} from '../actions';\nimport { IWebUiState } from '../../interfaces';\nimport { Action } from 'redux';\nimport { TABS } from '../../const';\n\nconst getDefaultState = (): IWebUiState => ({\n  currentTab: TABS.FOOD\n});\n\nexport function webUiReducer(\n  state = getDefaultState(),\n  action: Action\n): IWebUiState {\n  switch (action.type) {\n    case GO_TO_FOOD_TAB:\n      return {\n        ...state,\n        currentTab: TABS.FOOD\n      };\n    case GO_TO_RECIPES_TABS:\n      return {\n        ...state,\n        currentTab: TABS.RECIPES\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  Action,\n  applyMiddleware,\n  combineReducers,\n  createStore,\n  compose\n} from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\n\nimport {\n  allReducers\n} from '@chrisb-dev/seasonal-shared';\n\nimport { webUiReducer } from './web-ui.reducer';\n\nimport {\n  rootEpic\n} from '../epics';\n\nimport { IState } from '../../interfaces';\n\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { createHashHistory } from 'history';\n\nconst epicMiddleware = createEpicMiddleware<Action, Action, IState, {}>();\nexport const storeHistory = createHashHistory();\n\nexport const store = createStore(\n  combineReducers({\n    ...allReducers,\n    router: connectRouter(storeHistory),\n    webUi: webUiReducer\n  }),\n  compose(\n    applyMiddleware(\n      routerMiddleware(storeHistory),\n      epicMiddleware\n    )\n  )\n);\nepicMiddleware.run(rootEpic);\n","import { connect } from 'react-redux';\nimport {\n  BottomTabs\n} from './BottomTabs';\nimport {\n  goToFoodTab,\n  goToRecipesTab,\n  selectIsCurrentTabFood,\n  selectIsCurrentTabRecipes\n} from '../../store';\nimport {\n  IBottomTabDispatchProps,\n  IBottomTabInputProps\n} from './BottomTabs.interface';\nimport { Dispatch } from 'redux';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (\n  state: IState\n): IBottomTabInputProps => ({\n  isCurrentTabFood: selectIsCurrentTabFood(state),\n  isCurrentTabRecipes: selectIsCurrentTabRecipes(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IBottomTabDispatchProps => ({\n  goToFoodTab: () => dispatch(goToFoodTab()),\n  goToRecipesTab: () => dispatch(goToRecipesTab())\n});\n\nexport const BottomTabsConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BottomTabs);\n","import { connect } from 'react-redux';\nimport {\n  CurrentSeasonName\n} from './CurrentSeasonName';\nimport {\n  selectCurrentSeasonName,\n  selectIsCurrentSeasonLoading\n} from '@chrisb-dev/seasonal-shared';\nimport {\n  ICurrentSeasonName\n} from './CurrentSeasonName.interface';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (\n  state: IState\n): ICurrentSeasonName => ({\n  currentSeasonName: selectCurrentSeasonName(state),\n  isLoading: selectIsCurrentSeasonLoading(state)\n});\n\nexport const CurrentSeasonNameConnecter = connect(\n  mapStateToProps\n)(CurrentSeasonName);\n","import React, { SFC } from 'react';\n\nimport './CurrentSeasonName.scss';\n\nimport {\n  TextHeadingSmall\n} from '../../components-elements';\nimport { ICurrentSeasonName } from './CurrentSeasonName.interface';\n\nexport const CurrentSeasonName: SFC<ICurrentSeasonName> = ({\n  currentSeasonName,\n  isLoading\n}) => (\n  !isLoading\n    ? <TextHeadingSmall className='c-current-season-name'>\n      {currentSeasonName}\n    </TextHeadingSmall>\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodDetailsLoader\n} from './FoodDetailsLoader';\nimport {\n  selectIsFoodDataOrBasicSeasonsLoading\n} from '@chrisb-dev/seasonal-shared';\n\nimport { IState } from '../../interfaces';\nimport {\n  IFoodDetailsLoaderInputProps\n} from './FoodDetailsLoader.interface';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodDetailsLoaderInputProps => ({\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state)\n});\n\nexport const FoodDetailsLoaderConnecter = connect(\n  mapStateToProps\n)(FoodDetailsLoader);\n","import React from 'react';\n\nimport './FoodDetailsLoader.scss';\n\nimport {\n  LoadingSpinner\n} from '../../components-elements';\n\nimport {\n  IFoodDetailsLoaderInputProps\n} from './FoodDetailsLoader.interface';\n\nexport const FoodDetailsLoader = ({\n  isLoading\n}: IFoodDetailsLoaderInputProps) => (\n  isLoading\n    ? <div className='c-food-details-loader'>\n      <LoadingSpinner />\n    </div>\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodDetailsTopSection\n} from './FoodDetailsTopSection';\nimport {\n  goBackFromFoodDetails\n} from '../../store';\nimport {\n  selectCurrentFoodDetailsName,\n  selectCurrentFoodDetailsImageUrl,\n  selectIsFoodDataOrBasicSeasonsLoading\n} from '@chrisb-dev/seasonal-shared';\n\nimport { IState } from '../../interfaces';\nimport {\n  IFoodDetailsTopSectionInputProps,\n  IFoodDetailsTopSectionDispatchProps\n} from './FoodDetailsTopSection.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodDetailsTopSectionInputProps => ({\n  foodImageUrl: selectCurrentFoodDetailsImageUrl(state),\n  foodName: selectCurrentFoodDetailsName(state),\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IFoodDetailsTopSectionDispatchProps => ({\n  onGoBack: () => dispatch(goBackFromFoodDetails())\n});\n\nexport const FoodDetailsTopSectionConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FoodDetailsTopSection);\n","import React from 'react';\n\nimport './FoodDetailsTopSection.scss';\n\nimport {\n  ArrowIcon,\n  BareButton,\n  TextHeadingMedium\n} from '../../components-elements';\n\nimport {\n  IFoodDetailsTopSectionProps\n} from './FoodDetailsTopSection.interface';\n\nexport const FoodDetailsTopSection = ({\n  foodImageUrl,\n  foodName,\n  isLoading,\n  onGoBack\n}: IFoodDetailsTopSectionProps) => (\n  !isLoading\n    ? <div className='c-food-details-top-section'>\n    <div className='c-food-details-top-section__top-bar'>\n      <BareButton\n        className='c-food-details-top-section__back-button'\n        onClick={onGoBack}>\n        <ArrowIcon />\n      </BareButton>\n      <TextHeadingMedium className='c-food-details-top-section__food-name'>\n        {foodName}\n      </TextHeadingMedium>\n    </div>\n    {\n      foodImageUrl && <img src={foodImageUrl}\n        className='c-food-details-top-section__food-image'/>\n    }\n  </div>\n  : null\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodTable\n} from './FoodTable';\nimport {\n  selectIsCurrentTabFood\n} from '../../store';\nimport {\n  selectIsCurrentSeasonLoading,\n  selectVisibleRecipeData,\n  selectVisibleFoodData,\n  foodItemClicked,\n  recipeItemClicked\n} from '@chrisb-dev/seasonal-shared';\nimport { IState } from '../../interfaces';\nimport {\n  IFoodTableInputProps,\n  IFoodTableDispatchProps\n} from './FoodTable.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodTableInputProps => {\n  return {\n    food: selectVisibleFoodData(state),\n    isCurrentTabFood: selectIsCurrentTabFood(state),\n    isLoading: selectIsCurrentSeasonLoading(state),\n    recipes: selectVisibleRecipeData(state)\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IFoodTableDispatchProps => {\n  return {\n    onFoodClick: (foodItemId) => dispatch(foodItemClicked(foodItemId)),\n    onRecipeClick: (recipeItemId) => dispatch(recipeItemClicked(recipeItemId))\n  };\n};\n\nexport const FoodTableConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FoodTable);\n","import React from 'react';\n\nimport './FoodTable.scss';\n\nimport {\n  ImageGrid\n} from '../../components-layout';\n\nimport {\n  LoadingSpinner\n} from '../../components-elements';\nimport { IFoodTableProps } from './FoodTable.interface';\n\nexport const FoodTable = ({\n  isCurrentTabFood,\n  isLoading,\n  food,\n  recipes,\n  onFoodClick,\n  onRecipeClick\n}: IFoodTableProps) => (\n  isLoading\n    ? <div className='c-food-table__loading-spinner-wrapper'>\n      <LoadingSpinner />\n    </div>\n    : isCurrentTabFood\n      ? <ImageGrid data={food} onClick={onFoodClick} />\n      : <ImageGrid data={recipes} onClick={onRecipeClick} />\n);\n","import { connect } from 'react-redux';\nimport {\n  Header\n} from './Header';\nimport {\n  openMenu\n} from '@chrisb-dev/seasonal-shared';\nimport { IHeaderDispatchProps } from './Header.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IHeaderDispatchProps => ({\n  onMenuOpen: () => dispatch(openMenu())\n});\n\nexport const HeaderConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Header);\n","import React, { SFC } from 'react';\n\nimport './Header.scss';\n\nimport {\n  BareButton,\n  BurgerIcon,\n  TextHeadingLarge\n} from '../../components-elements';\nimport {\n  SearchBarConnecter\n} from '../';\nimport { IHeaderDispatchProps } from './Header.interface';\n\nexport const Header: SFC<IHeaderDispatchProps> = ({\n  onMenuOpen\n}) => (\n  <header className='c-header'>\n    <BareButton className='c-header__btn' onClick={onMenuOpen}>\n      <BurgerIcon />\n    </BareButton>\n    <h1 className='c-header__text'>\n      <TextHeadingLarge>\n        Eat Seasonal\n      </TextHeadingLarge>\n    </h1>\n    <SearchBarConnecter />\n  </header>\n);\n","import React, { SFC } from 'react';\n\nimport './PageLayout.scss';\n\nexport const PageLayout: SFC<{}> = ({\n  children\n}) => (\n  <div className='c-page-layout'>\n    { children }\n  </div>\n);\n","import React from 'react';\n\nimport './SeasonMenu.scss';\n\nimport {\n  BareButton,\n  CrossIcon,\n  TextMedium,\n  LoadingSpinner\n} from '../../components-elements';\n\nimport {\n  fadeInOutAnimation\n} from '../../helpers';\nimport { PoseGroup } from 'react-pose';\nimport { ISeasonMenuProps } from './SeasonMenu.interface';\n\nconst OverlayFadeInOutAnimation = fadeInOutAnimation();\n\nexport const SeasonMenu = ({\n  allBasicSeasonData,\n  currentSeasonIndex,\n  isLoading,\n  isMenuOpen,\n  onSeasonSelected,\n  onClose\n}: ISeasonMenuProps) => (\n  <div>\n    <PoseGroup>\n      {\n        isMenuOpen &&\n        <OverlayFadeInOutAnimation key='season-menu-overlay'\n          className='c-season-menu__overlay'\n          onClick={onClose} />\n      }\n    </PoseGroup>\n    <nav\n      className={`c-season-menu ${isMenuOpen ? 'c-season-menu--is-open' : ''}`}>\n      {\n        !isLoading\n          ? allBasicSeasonData && allBasicSeasonData.map(({ name }, index) => (\n              <BareButton\n                key={name}\n                className={\n                  `c-season-menu__button ${\n                    index === currentSeasonIndex\n                      ? 'c-season-menu__button--selected'\n                      : ''\n                    }`}\n                onClick={() => onSeasonSelected(index)}>\n                <TextMedium>{ name }</TextMedium>\n              </BareButton>\n            ))\n          : <div className='c-season-menu__loading-spinner-wrapper'>\n            <LoadingSpinner />\n          </div>\n      }\n      <BareButton className='c-season-menu__close-btn'\n        onClick={onClose}>\n        <CrossIcon />\n      </BareButton>\n    </nav>\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  SeasonMenu\n} from './SeasonMenu';\nimport {\n  selectIsMenuOpen,\n  closeMenu,\n  selectAllBasicSeasonData,\n  selectIsBasicSeasonDataLoading,\n  selectSeason,\n  selectCurrentSeasonIndex\n} from '@chrisb-dev/seasonal-shared';\n\nimport { IState } from '../../interfaces';\nimport {\n  ISeasonMenuInputProps,\n  ISeasonMenuDispatchProps\n} from './SeasonMenu.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): ISeasonMenuInputProps => ({\n  allBasicSeasonData: selectAllBasicSeasonData(state),\n  currentSeasonIndex: selectCurrentSeasonIndex(state),\n  isLoading: selectIsBasicSeasonDataLoading(state),\n  isMenuOpen: selectIsMenuOpen(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISeasonMenuDispatchProps => ({\n  onClose: () => dispatch(closeMenu()),\n  onSeasonSelected: (seasonIndex: number) => dispatch(selectSeason(seasonIndex))\n});\n\nexport const SeasonMenuConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SeasonMenu);\n","import React, { SFC } from 'react';\nimport { PageLayout } from '../../components-layout/PageLayout/PageLayout';\nimport { HeaderConnecter } from '../Header/Header.connector';\nimport { SeasonMenuConnecter } from '../SeasonMenu/SeasonMenu.connector';\n\nexport const PageWithMenu: SFC<{}> = ({\n  children\n}) => (\n  <PageLayout>\n    <HeaderConnecter />\n    <SeasonMenuConnecter />\n    { children }\n  </PageLayout>\n);\n","import React, { SFC } from 'react';\n\nimport './SearchBar.scss';\n\nimport { ISearchBarProps } from './SearchBar.interface';\nimport {\n  Input\n} from '../../components-elements';\n\nimport {\n  BareButton,\n  CrossIcon,\n  MagnifyingGlassIcon\n} from '../../components-elements';\n\nconst getSearchBarClassName = (isSearchBarVisible: boolean) => (\n  'c-search-bar' +\n    (\n      isSearchBarVisible\n        ? ' c-search-bar--show-full'\n        : ''\n    )\n);\n\nconst focusOnInputIfSearchVisible = (\n  ref: HTMLDivElement | undefined,\n  isSearchBarVisible: boolean\n) => {\n  if (ref && isSearchBarVisible) {\n    const input = ref.querySelector('input');\n    if (input) {\n      input.focus();\n    }\n  }\n};\n\nexport const SearchBar: SFC<ISearchBarProps> = ({\n  isSearchBarVisible,\n  onHideSearchBar,\n  onSearchChanged,\n  onShowSearchBar\n}) => (\n  <div className={getSearchBarClassName(isSearchBarVisible)}\n    ref={\n      (ref: HTMLDivElement) => (\n        focusOnInputIfSearchVisible(ref, isSearchBarVisible)\n      )\n    }>\n    <Input className='c-search-bar__input'\n      onChange={(newSearchTerm) => onSearchChanged(newSearchTerm)}\n      placeholder='Search' />\n    {\n      isSearchBarVisible\n        ? <BareButton className='c-search-bar__search-button'\n            onClick={onHideSearchBar}>\n            <CrossIcon />\n          </BareButton>\n        : <BareButton className='c-search-bar__search-button'\n            onClick={onShowSearchBar}>\n            <MagnifyingGlassIcon />\n          </BareButton>\n    }\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  SearchBar\n} from './SearchBar';\nimport {\n  searchBarChanged,\n  selectIsSearchBarVisible,\n  showSearchBar,\n  hideSearchBar\n} from '@chrisb-dev/seasonal-shared';\nimport {\n  ISearchBarDispatchProps,\n  ISearchBarInputProps\n} from './SearchBar.interface';\nimport { Dispatch } from 'redux';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (state: IState): ISearchBarInputProps => ({\n  isSearchBarVisible: selectIsSearchBarVisible(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISearchBarDispatchProps => ({\n  onHideSearchBar: () => dispatch(hideSearchBar()),\n  onSearchChanged: (newSearchTerm: string) => (\n    dispatch((searchBarChanged(newSearchTerm)))\n  ),\n  onShowSearchBar: () => dispatch(showSearchBar())\n});\n\nexport const SearchBarConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchBar);\n","import { connect } from 'react-redux';\nimport {\n  SeasonsForFood\n} from './SeasonsForFood';\nimport {\n  selectSeasonsSelectedForFood,\n  selectIsFoodDataOrBasicSeasonsLoading,\n  foodDetailsSelectSeason\n} from '@chrisb-dev/seasonal-shared';\n\nimport { IState } from '../../interfaces';\nimport {\n  ISeasonForFoodInputProps,\n  ISeasonForFoodDispatchProps\n} from './SeasonsForFood.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): ISeasonForFoodInputProps => ({\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state),\n  seasonsSelectedForFood: selectSeasonsSelectedForFood(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISeasonForFoodDispatchProps => ({\n  onSeasonSelected: (seasonIndex: number) => (\n    dispatch(foodDetailsSelectSeason(seasonIndex))\n  )\n});\n\nexport const SeasonsForFoodConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SeasonsForFood);\n","import React, { Fragment } from 'react';\n\nimport './SeasonsForFood.scss';\n\nimport {\n  TextMedium,\n  TextHeadingMedium,\n  TextSmall,\n  BareButton\n} from '../../components-elements';\n\nimport { ISeasonForFoodProps } from './SeasonsForFood.interface';\n\nexport const SeasonsForFood = ({\n  isLoading,\n  seasonsSelectedForFood,\n  onSeasonSelected\n}: ISeasonForFoodProps) => (\n  !isLoading\n    ? <Fragment>\n    <TextHeadingMedium\n      className='c-season-for-food__list-heading'>\n      When are they in season?\n    </TextHeadingMedium>\n    <div className='c-season-for-food__list'>\n      {\n        seasonsSelectedForFood && seasonsSelectedForFood.map((\n          {\n            isSelected,\n            name\n          },\n          seasonIndex\n        ) => (\n          <BareButton\n            key={name}\n            className={\n              `c-season-for-food__season` +\n                (\n                  isSelected\n                    ? ` c-season-for-food__season--selected`\n                    : ''\n                )\n              }\n            onClick={ () => onSeasonSelected(seasonIndex) }>\n            <TextMedium>\n              { name.substring(0, 3) }\n            </TextMedium>\n          </BareButton>\n        ))\n      }\n    </div>\n    <div\n      className={`c-season-food__in-season-key ` +\n        `c-season-food__in-season-key--in-season`\n      }>\n      <TextSmall className='c-season-food__in-season-key__text'>\n        In season\n      </TextSmall>\n    </div>\n    <div\n      className='c-season-food__in-season-key'>\n      <TextSmall className='c-season-food__in-season-key__text'>\n        Not in season\n      </TextSmall>\n    </div>\n  </Fragment>\n  : null\n);\n","import { connect } from 'react-redux';\nimport {\n  ViewWebAppVersion\n} from './ViewWebAppVersion';\nimport {\n  goToWebVersion\n} from '../../store';\nimport { IViewWebAppVersionDispatchProps } from './ViewWebAppVersion.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IViewWebAppVersionDispatchProps => ({\n  onGoToWebVersion: () => dispatch((goToWebVersion()))\n});\n\nexport const ViewWebAppVersionConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewWebAppVersion);\n","import React, { SFC } from 'react';\n\nimport {\n  PrimaryButton\n} from '../../components-elements';\n\nimport {\n  IViewWebAppVersionDispatchProps\n} from './ViewWebAppVersion.interface';\n\nexport const ViewWebAppVersion: SFC<IViewWebAppVersionDispatchProps> = ({\n  onGoToWebVersion\n}) => (\n  <PrimaryButton onClick={onGoToWebVersion}>\n    To web version\n  </PrimaryButton>\n);\n","import React, { SFC } from 'react';\n\nimport './ViewAppLinks.scss';\n\nimport {\n  AndroidAppDownload\n} from '../AndroidAppDownload/AndroidAppDownload';\n\nimport {\n  ViewWebAppVersionConnector\n} from '../ViewWebAppVersion/ViewWebAppVersion.connector';\n\nexport const ViewAppLinks: SFC<{}> = () => (\n  <div className='c-view-app-links'>\n    <AndroidAppDownload />\n    <ViewWebAppVersionConnector />\n  </div>\n);\n","import React, { SFC } from 'react';\n\nimport './WhyEatSeasonal.scss';\n\nimport {\n  TextHeadingLarge\n} from '../../components-elements';\n\nimport {\n  ISummaryColumnList,\n  SummaryColumnList\n} from '../../components-layout';\n\nimport columns from './why-eat-seasonal-columns.json';\n\nconst summaryColumns: ISummaryColumnList = {\n  columns\n};\n\nexport const WhyEatSeasonal: SFC<{}> = ({}) => (\n  <div className='c-why-eat-seasonal'>\n    <h2 className='c-why-eat-seasonal__heading'>\n      <TextHeadingLarge>\n        Why Eat Seasonal?\n      </TextHeadingLarge>\n    </h2>\n    <SummaryColumnList {...summaryColumns} />\n  </div>\n);\n","import React from 'react';\n\nimport './FoodDetailsPage.scss';\n\nimport {\n  FoodDetailsLoaderConnecter,\n  FoodDetailsTopSectionConnecter,\n  PageWithMenu,\n  SeasonsForFoodConnecter\n} from '../../components-main';\n\nexport const FoodDetailsPage = () => (\n  <PageWithMenu>\n    <div className='c-food-details-page__main'>\n      <FoodDetailsTopSectionConnecter />\n      <FoodDetailsLoaderConnecter />\n      <SeasonsForFoodConnecter />\n    </div>\n  </PageWithMenu>\n);\n","import React from 'react';\n\nimport './FoodTablePage.scss';\n\nimport {\n  BottomTabsConnecter,\n  CurrentSeasonNameConnecter,\n  FoodTableConnecter,\n  PageWithMenu\n} from '../../components-main';\n\nexport const FoodTablePage = () => (\n  <PageWithMenu>\n    <div className='c-food-table-page__main'>\n      <CurrentSeasonNameConnecter />\n      <FoodTableConnecter />\n      <BottomTabsConnecter />\n    </div>\n  </PageWithMenu>\n);\n","import React from 'react';\n\nimport './IntroPage.scss';\n\nimport {\n  AboutEatSeasonal,\n  ViewAppLinks,\n  WhyEatSeasonal\n} from '../../components-main';\n\nexport const IntroPage = () => (\n  <div className='c-intro-page'>\n    <div className='c-intro-page__top-section'>\n      <img className='c-intro-page__splash-image' src='/splash.png'/>\n      <ViewAppLinks />\n    </div>\n    <AboutEatSeasonal />\n    <WhyEatSeasonal />\n    <div className='c-intro-page__mobile-extra-app-links'>\n      <ViewAppLinks />\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport {\n  IntroPage,\n  FoodTablePage,\n  FoodDetailsPage\n} from '../components-pages';\nimport './App.scss';\n\nimport { Provider } from 'react-redux';\nimport { store, storeHistory } from '../store/reducers';\n\nimport { Route, Switch } from 'react-router';\n\nimport {\n  FOOD_TABLE_URL,\n  LANDING_URL,\n  FOOD_DETAILS_URL\n} from '../const';\n\nimport { ConnectedRouter } from 'connected-react-router';\n\nexport const App = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={storeHistory}>\n      <div className='c-app'>\n        <Switch>\n          <Route path={LANDING_URL} component={IntroPage} exact />\n          <Route path={FOOD_TABLE_URL} component={FoodTablePage} />\n          <Route path={`${FOOD_DETAILS_URL}/:id`} component={FoodDetailsPage} />\n        </Switch>\n      </div>\n    </ConnectedRouter>\n  </Provider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './styles/index.scss';\nimport { App } from './components-app/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\nif (rootElement && rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}