{"version":3,"sources":["components-layout/ImageGridItem/ImageGridItem.tsx","components-layout/SummaryColumn/index.ts","components-layout/ImageGrid/ImageGrid.tsx","components-layout/SummaryColumn/SummaryColumn.tsx","components-layout/SummaryColumnList/index.ts","components-layout/SummaryColumnList/SummaryColumnList.tsx","components-layout/SeasonNameView/SeasonNameView.tsx","components-layout/index.ts","components-main/AboutEatSeasonal/AboutEatSeasonal.tsx","components-main/AndroidAppDownload/AndroidAppDownload.tsx","components-main/BottomTabs/BottomTabs.tsx","store/actions/route.actions.ts","store/actions/web-ui.actions.ts","const/tabs.enum.ts","const/urls.const.ts","store/selectors/route.selectors.ts","store/selectors/web-ui.selectors.ts","store/epics/tracking.epics.ts","store/epics/index.ts","store/epics/route.epics.ts","store/epics/settings.epics.ts","store/reducers/web-ui.reducer.ts","store/reducers/index.ts","components-main/BottomTabs/BottomTabs.connector.ts","components-main/CurrentSeasonName/CurrentSeasonName.connector.ts","components-main/CurrentSeasonName/CurrentSeasonName.tsx","components-main/DietaryFilters/DietaryFilters.tsx","components-main/DietaryFilters/DietaryFilters.connector.ts","components-main/FoodDetailsLoader/FoodDetailsLoader.connector.ts","components-main/FoodDetailsLoader/FoodDetailsLoader.tsx","components-main/FoodDetailsTopSection/FoodDetailsTopSection.connector.ts","components-main/FoodDetailsTopSection/FoodDetailsTopSection.tsx","components-main/FoodTable/FoodTable.connector.ts","components-main/FoodTable/FoodTable.tsx","components-main/Header/Header.connector.ts","components-main/Header/Header.tsx","components-layout/PageLayout/PageLayout.tsx","components-main/SeasonMenu/SeasonMenu.tsx","components-main/SeasonMenu/SeasonMenu.connector.ts","components-main/PageWithMenu/PageWithMenu.tsx","components-main/RecipesForFood/RecipesForFood.connector.ts","components-main/RecipesForFood/RecipesForFood.tsx","components-main/RecipeTable/RecipeTable.connector.ts","components-main/RecipeTable/RecipeTable.tsx","components-main/SearchBar/SearchBar.tsx","components-main/SearchBar/SearchBar.connector.ts","components-main/SeasonsForFood/SeasonsForFood.connector.ts","components-main/SeasonsForFood/SeasonsForFood.tsx","components-main/ViewWebAppVersion/ViewWebAppVersion.connector.ts","components-main/ViewWebAppVersion/ViewWebAppVersion.tsx","components-main/ViewAppLinks/ViewAppLinks.tsx","components-main/WhyEatSeasonal/WhyEatSeasonal.tsx","components-main/AllSeasons/AllSeasons.connector.ts","components-main/AllSeasons/AllSeasons.tsx","components-main/AllSeasonsGraph/AllSeasonsGraph.connector.ts","components-main/AllSeasonsGraph/AllSeasonsGraph.tsx","components-pages/FoodDetailsPage/FoodDetailsPage.tsx","components-pages/FoodTablePage/FoodTablePage.tsx","components-pages/IntroPage/IntroPage.tsx","components-pages/AllSeasonsPage/AllSeasonsPage.tsx","components-app/App.tsx","serviceWorker.js","index.tsx","helpers/Animations/animations.const.ts","helpers/Animations/fade.animations.ts","helpers/functions/make-promise-cancelable.ts","helpers/functions/stored-data.ts","helpers/index.ts","services/image-loader.service.ts","components-elements/BackgroundImageWithLoadingSpinner/BackgroundImageWithLoadingSpinner.tsx","components-elements/Buttons/BareButton.tsx","components-elements/Buttons/PrimaryButton.tsx","components-elements/Icons/ArrowIcon.tsx","components-elements/Icons/BurgerIcon.tsx","components-elements/Icons/CrossIcon.tsx","components-elements/Icons/MagnifyingGlassIcon.tsx","components-elements/Input/Input.tsx","components-elements/Input/RadioButton.tsx","components-elements/Input/RadioButtonGroup.tsx","components-elements/LoadingSpinner/LoadingSpinner.tsx","components-elements/Text/TextHeadingLarge.tsx","components-elements/Text/TextHeadingMedium.tsx","components-elements/Text/TextHeadingSmall.tsx","components-elements/Text/TextMedium.tsx","components-elements/Text/TextSmall.tsx","components-elements/index.ts"],"names":["__webpack_require__","d","__webpack_exports__","ImageGridItem","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_elements__WEBPACK_IMPORTED_MODULE_2__","_ref","id","imageUrlSmall","onClick","name","skipAnimation","a","createElement","className","src","_SummaryColumn__WEBPACK_IMPORTED_MODULE_0__","_SummaryColumn_interface__WEBPACK_IMPORTED_MODULE_1__","o","ImageGrid","_ImageGridItem_ImageGridItem__WEBPACK_IMPORTED_MODULE_2__","_components_elements__WEBPACK_IMPORTED_MODULE_3__","data","length","map","item","Object","assign","key","SummaryColumn","imageUrl","text","title","_SummaryColumnList_interface__WEBPACK_IMPORTED_MODULE_0__","_SummaryColumnList__WEBPACK_IMPORTED_MODULE_1__","SummaryColumnList","_SummaryColumn__WEBPACK_IMPORTED_MODULE_2__","columns","column","index","SeasonNameView","_ImageGrid_ImageGrid__WEBPACK_IMPORTED_MODULE_1__","_SummaryColumnList__WEBPACK_IMPORTED_MODULE_3__","_SeasonNameView_SeasonNameView__WEBPACK_IMPORTED_MODULE_4__","AboutEatSeasonal","objectDestructuringEmpty","react_default","components_elements","AndroidAppDownload","href","alt","addTabClasses","isSelected","concat","GO_TO_WEB_VERSION","GO_BACK_FROM_FOOD_DETAILS","GO_TO_FOOD_TAB","GO_TO_RECIPES_TABS","TABS","selectCurrentFoodDetailsParams","createMatchSelector","selectCurrentFoodDetailsId","createSelector","routeParams","params","selectCurrentPath","state","getLocation","location","pathname","selectIsCurrentRouteAllSeasons","path","selectCurrentTab","webUi","webUiState","currentTab","selectIsCurrentTabFood","FOOD","selectIsCurrentTabRecipes","RECIPES","ACTIONS_TO_TRACK","SELECT_SEASON","FOOD_DETAILS_SELECT_SEASON","OPEN_MENU","CLOSE_MENU","RECIPE_ITEM_CLICKED","FOOD_ITEM_CLICKED","rootEpic","combineEpics","apply","toConsumableArray","rootEpics","actions$","pipe","filter","type","includes","_ref2","ga","ignoreElements","ofType","mapTo","push","state$","withLatestFrom","slicedToArray","action","selectCurrentSeasonRecipesById","recipeItemId","recipe","window","open","linkUrl","foodItemId","setCurrentFoodDetailsStart","goBack","INIT_APP","_ref3","foodDetailsId","Boolean","GO_TO_ALL_SEASONS_VIEW","debounceTime","_ref5","isRouteAllSeasons","setAllSeasonsWithFoodStart","getStoredData","settings","initSettings","SET_DIET_TYPE","selectSettingsState","tap","settingsState","setStoredData","getDefaultState","epicMiddleware","createEpicMiddleware","storeHistory","createHashHistory","store","createStore","combineReducers","objectSpread","allReducers","router","connectRouter","arguments","undefined","compose","applyMiddleware","routerMiddleware","run","BottomTabsConnecter","connect","isCurrentTabFood","isCurrentTabRecipes","dispatch","goToFoodTab","goToRecipesTab","CurrentSeasonNameConnecter","currentSeasonName","selectCurrentSeasonName","isLoading","selectIsCurrentSeasonFoodLoading","components_layout","radioButtons","label","value","DIET_TYPE","ALL","VEGETARIAN","VEGAN","DietaryFiltersConnector","dietType","selectSettingsDietType","update","setDietType","groupName","selectedValue","onChange","newValue","FoodDetailsLoaderConnecter","selectIsFoodDataOrBasicSeasonsLoading","FoodDetailsTopSectionConnecter","foodImageUrl","selectCurrentFoodDetailsImageUrl","foodName","selectCurrentFoodDetailsName","onGoBack","FoodTableConnecter","food","selectVisibleFoodData","onFoodClick","foodItemClicked","HeaderConnecter","onMenuOpen","openMenu","SearchBarConnecter","PageLayout","children","OverlayFadeInOutAnimation","fadeInOutAnimation","SeasonMenuConnecter","allBasicSeasonData","selectAllBasicSeasons","currentSeasonIndex","selectCurrentSeasonIndex","isCurrentRouteAllSeasons","selectIsBasicSeasonsLoading","isMenuOpen","selectIsMenuOpen","onAllSeasonsSelected","goToAllSeasonsView","onClose","closeMenu","onSeasonSelected","seasonIndex","selectSeason","react_pose_es","react","PageWithMenu","PageLayout_PageLayout_PageLayout","RecipesForFoodConnecter","currentFoodDetailsRecipes","selectVisibleRecipesForFoodDetailsData","onRecipeSelected","recipeId","foodDetailsSelectRecipe","RecipeTableConnecter","selectIsCurrentSeasonRecipesLoading","recipes","selectVisibleRecipeData","onRecipeClick","recipeItemClicked","getSearchBarClassName","isSearchBarVisible","selectIsSearchBarVisible","onHideSearchBar","hideSearchBar","onSearchChanged","newSearchTerm","searchBarChanged","onShowSearchBar","showSearchBar","ref","input","querySelector","focus","focusOnInputIfSearchVisible","placeholder","SeasonsForFoodConnecter","seasonsSelectedForFood","selectSeasonsSelectedForFood","foodDetailsSelectSeason","substring","ViewWebAppVersionConnector","onGoToWebVersion","ViewAppLinks","AndroidAppDownload_AndroidAppDownload_AndroidAppDownload","summaryColumns","WhyEatSeasonal","AllSeasonsConnector","hasMoreSeasonsInAllSeasonsView","selectHasMoreSeasonsInAllSeasonsView","selectIsAllSeasonsFoodLoading","seasons","selectAllSeasonsVisibleFoodData","increaseNumberOfAllFoodSeasonsInView","react_infinite_scroller_default","pageStart","loadMore","hasMore","loader","AllSeasonsGraphConnector","foodInSeasonGraphData","selectFoodInSeasonGraphData","es6","width","height","dataKey","allowDecimals","fill","FoodDetailsPage","PageWithMenu_PageWithMenu","FoodTablePage","IntroPage","ViewAppLinks_ViewAppLinks_ViewAppLinks","AboutEatSeasonal_AboutEatSeasonal_AboutEatSeasonal","WhyEatSeasonal_WhyEatSeasonal_WhyEatSeasonal","AllSeasonsPage","App","es","esm","history","react_router","component","exact","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","rootElement","document","getElementById","hasChildNodes","hydrate","App_App","render","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","_ref$enterDelay","enterDelay","_ref$exitDelay","exitDelay","_ref$enterDuration","enterDuration","_ref$exitDuration","exitDuration","_ref$type","posed","enter","delay","opacity","transition","duration","exit","makePromiseCancelable","promise","hasCancelled","Promise","resolve","reject","val","isCanceled","cancel","localStorage","setItem","JSON","stringify","storedData","getItem","parse","fade_animations_fadeInOutAnimation","loadingImages","loadImage","imageSrc","image","createImageOnLoadPromise","FadeInOutAnimation","BackgroundImageWithLoadingSpinner","_Component","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadImagePromise","isVisible","inherits","createClass","_this2","setState","backgroundImage","style","getBackgroundImageStyle","LoadingSpinner_LoadingSpinner_LoadingSpinner","Component","BareButton","PrimaryButton","ArrowIcon","viewBox","strokeLinecap","strokeWidth","stroke","x1","y1","x2","y2","BurgerIcon","y","CrossIcon","points","MagnifyingGlassIcon","Input","_onChange","_x","toString","event","target","RadioButton","defaulToChecked","htmlFor","defaultChecked","RadioButtonGroup","radioButtonClassName","RadioButton_RadioButton","LoadingSpinner","TextHeadingLarge","TextHeadingMedium","TextHeadingSmall","TextMedium","TextSmall","BackgroundImageWithLoadingSpinner_BackgroundImageWithLoadingSpinner_BackgroundImageWithLoadingSpinner","BareButton_BareButton","PrimaryButton_PrimaryButton","ArrowIcon_ArrowIcon","BurgerIcon_BurgerIcon","CrossIcon_CrossIcon","MagnifyingGlassIcon_MagnifyingGlassIcon","Input_Input_Input","RadioButtonGroup_RadioButtonGroup","TextHeadingLarge_TextHeadingLarge","TextHeadingMedium_TextHeadingMedium","TextHeadingSmall_TextHeadingSmall","TextMedium_TextMedium","TextSmall_TextSmall"],"mappings":"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","file":"static/js/main.14e39c7c.chunk.js","sourcesContent":["import React, { FC } from 'react';\n\nimport './ImageGridItem.scss';\n\nimport {\n  TextMedium\n} from '../../components-elements';\n\nimport {\n  BackgroundImageWithLoadingSpinner\n} from '../../components-elements';\nimport { IImageGridItem } from './ImageGridItem.interface';\n\nexport const ImageGridItem: FC<IImageGridItem> = ({\n  id,\n  imageUrlSmall,\n  onClick,\n  name,\n  skipAnimation\n}) => (\n  <div onClick={() => onClick && onClick(id)}\n    className='c-image-grid-item'>\n    <div className='c-image-grid-item__inner'>\n      <div className='c-image-grid-item__image'>\n        <BackgroundImageWithLoadingSpinner\n          src={imageUrlSmall} skipAnimation={skipAnimation}/>\n      </div>\n      <TextMedium className='c-image-grid-item__text'>\n        {name}\n      </TextMedium>\n    </div>\n  </div>\n);\n","export * from './SummaryColumn';\n\nexport * from './SummaryColumn.interface';\n","import React, { FC } from 'react';\n\nimport './ImageGrid.scss';\n\nimport {\n  ImageGridItem\n} from '../ImageGridItem/ImageGridItem';\nimport { IImageGrid } from './ImageGrid.interface';\nimport { TextMedium } from '../../components-elements';\n\nexport const ImageGrid: FC<IImageGrid> = ({\n  data,\n  onClick,\n  skipAnimation\n}) => (\n  <div className='c-image-grid'>\n    {\n      data && data.length\n        ? data.map((item) => (\n          <ImageGridItem\n            key={item.name}\n            {...item}\n            onClick={onClick}\n            skipAnimation={skipAnimation}/>\n        ))\n        : <TextMedium className='c-image-grid__no-results'>\n            No results found\n          </TextMedium>\n    }\n  </div>\n);\n","import React, { FC } from 'react';\n\nimport './SummaryColumn.scss';\n\nimport {\n  TextMedium,\n  TextHeadingSmall\n} from '../../components-elements';\n\nimport {\n  ISummaryColumn\n} from './SummaryColumn.interface';\n\nexport const SummaryColumn: FC<ISummaryColumn> = ({\n  imageUrl,\n  text,\n  title\n}) => (\n  <div className='c-summary-column'>\n    {\n      imageUrl && <img src={imageUrl} className='c-summary-column__image' />\n    }\n    <h3 className='c-summary-column__heading'>\n      <TextHeadingSmall>\n        { title }\n      </TextHeadingSmall>\n    </h3>\n    <TextMedium>\n      { text }\n    </TextMedium>\n  </div>\n);\n","export * from './SummaryColumnList.interface';\n\nexport * from './SummaryColumnList';\n","import React, { FC } from 'react';\n\nimport './SummaryColumnList.scss';\n\nimport {\n  SummaryColumn\n} from './../SummaryColumn';\n\nimport {\n  ISummaryColumnList\n} from './SummaryColumnList.interface';\n\nexport const SummaryColumnList: FC<ISummaryColumnList> = ({\n  columns\n}) => (\n  <ul className='c-summary-column-list'>\n    {\n      columns.map((column, index) => (\n        <SummaryColumn {...column} key={index} />\n      ))\n    }\n  </ul>\n);\n","import React, { FC } from 'react';\nimport './SeasonNameView.scss';\nimport {\n  ISeasonNameViewProps\n} from './SeasonNameView.interface';\nimport { TextHeadingSmall } from '../../components-elements';\n\nexport const SeasonNameView: FC<ISeasonNameViewProps> = ({\n  name\n}) => (\n  <TextHeadingSmall className='c-season-name-view'>\n    {name}\n  </TextHeadingSmall>\n);\n","export * from './ImageGridItem/ImageGridItem';\n\nexport * from './ImageGrid/ImageGrid';\n\nexport * from './SummaryColumn';\n\nexport * from './SummaryColumnList';\n\nexport * from './SeasonNameView/SeasonNameView';\n","import React, { FC } from 'react';\n\nimport './AboutEatSeasonal.scss';\n\nimport {\n  TextHeadingLarge,\n  TextMedium\n} from '../../components-elements';\n\nexport const AboutEatSeasonal: FC<{}> = ({}) => (\n  <div className='c-about-eat-seasonal'>\n    <h1 className='c-about-eat-seasonal__heading'>\n      <TextHeadingLarge>\n        About Eat Seasonal\n      </TextHeadingLarge>\n    </h1>\n    <p className='c-about-eat-seasonal__text'>\n      <TextMedium>\n        Eat Seasonal started because we wanted a way to easily see what fruit\n        and vegetables are in seasons. Walking around a supermarket, trying to\n        plan seasonal meals becomes much easier when you can quickly access\n        information on everything that's in season through your phone.\n      </TextMedium>\n    </p>\n    <p className='c-about-eat-seasonal__text'>\n      <TextMedium>\n        The app and website give you quick and simple view of all the food\n        currently in seasons. They also provide a recipes section including\n        carefully selected recipes which use ingredients which are mostly in\n        seasons. New recipes are being added all the time!\n      </TextMedium>\n    </p>\n  </div>\n);\n","import React, { FC } from 'react';\n\nimport './AndroidAppDownload.scss';\n\nexport const AndroidAppDownload: FC<{}> = () => (\n  <a className='c-android-app-download'\n    href={\n    'https://play.google.com/store/apps/details?id=com.chrisbdev.seasonal&p' +\n      'campaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'\n  }>\n    <img className='c-android-app-download__image'\n      alt='Get it on Google Play'\n      src='https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png'/>\n  </a>\n);\n","import React, { FC } from 'react';\n\nimport './BottomTabs.scss';\n\nimport {\n  BareButton\n} from '../../components-elements';\nimport { IBottomTabProps } from './BottomTabs.interface';\n\nconst addTabClasses = (isSelected: boolean) => (\n  `c-bottom-tabs__tab ${\n    isSelected\n      ? ' c-bottom-tabs__tab--selected'\n      : ''\n  }`\n);\n\nexport const BottomTabs: FC<IBottomTabProps> = ({\n  isCurrentTabFood,\n  isCurrentTabRecipes,\n  goToFoodTab,\n  goToRecipesTab\n}) => (\n  <nav className='c-bottom-tabs'>\n    <BareButton\n      className={addTabClasses(isCurrentTabFood)}\n      onClick={goToFoodTab}>\n      Food\n    </BareButton>\n    <BareButton\n      className={addTabClasses(isCurrentTabRecipes)}\n      onClick={goToRecipesTab}>\n      Recipes\n    </BareButton>\n  </nav>\n);\n","import { Action } from 'redux';\n\nexport const GO_TO_WEB_VERSION = 'GO_TO_WEB_VERSION';\nexport function goToWebVersion(): Action {\n  return {\n    type: GO_TO_WEB_VERSION\n  };\n}\n\nexport const GO_BACK_FROM_FOOD_DETAILS = 'GO_BACK_FROM_FOOD_DETAILS';\nexport function goBackFromFoodDetails(): Action {\n  return {\n    type: GO_BACK_FROM_FOOD_DETAILS\n  };\n}\n","import { Action } from 'redux';\n\nexport const GO_TO_FOOD_TAB = 'GO_TO_FOOD_TAB';\nexport function goToFoodTab(): Action {\n  return {\n    type: GO_TO_FOOD_TAB\n  };\n}\n\nexport const GO_TO_RECIPES_TABS = 'GO_TO_RECIPES_TABS';\nexport function goToRecipesTab(): Action {\n  return {\n    type: GO_TO_RECIPES_TABS\n  };\n}\n","export enum TABS {\n  FOOD,\n  RECIPES\n}\n","export const LANDING_URL = '/';\nexport const FOOD_TABLE_URL = '/food';\nexport const FOOD_DETAILS_URL = '/food-details';\nexport const ALL_SEASONS_URL = '/all-seasons';\n","import { createMatchSelector, RouterRootState, getLocation } from 'connected-react-router';\nimport { FOOD_DETAILS_URL, ALL_SEASONS_URL } from '../../const';\nimport { createSelector } from 'reselect';\nimport { IState } from '../../interfaces';\n\nexport const selectCurrentFoodDetailsParams = createMatchSelector<\n  RouterRootState,\n  {\n    id: string\n  }\n>(\n  `${FOOD_DETAILS_URL}/:id`\n);\n\nexport const selectCurrentFoodDetailsId = createSelector(\n  selectCurrentFoodDetailsParams,\n  (routeParams) => routeParams && routeParams.params.id\n);\n\nexport const selectCurrentLocation = (state: IState) => getLocation(state);\n\nexport const selectCurrentPath = createSelector(\n  selectCurrentLocation,\n  (location) => location.pathname\n);\n\nexport const selectIsCurrentRouteAllSeasons = createSelector(\n  selectCurrentPath,\n  (path) => path === ALL_SEASONS_URL\n);\n","import { createSelector } from 'reselect';\nimport { IState } from '../../interfaces';\nimport { TABS } from '../../const';\n\nconst selectWebUiState = (state: IState) => state.webUi;\n\nexport const selectCurrentTab = createSelector(\n  selectWebUiState,\n  (webUiState): TABS => webUiState.currentTab\n);\n\nexport const selectIsCurrentTabFood = createSelector(\n  selectCurrentTab,\n  (currentTab): boolean => currentTab === TABS.FOOD\n);\n\nexport const selectIsCurrentTabRecipes = createSelector(\n  selectCurrentTab,\n  (currentTab): boolean => currentTab === TABS.RECIPES\n);\n","import { ActionsObservable } from 'redux-observable';\n\nimport {\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS,\n  GO_TO_WEB_VERSION\n} from '../actions';\n\nimport {\n  SELECT_SEASON,\n  FOOD_DETAILS_SELECT_SEASON,\n  OPEN_MENU,\n  CLOSE_MENU,\n  RECIPE_ITEM_CLICKED,\n  FOOD_ITEM_CLICKED\n} from '@chrisb-dev/seasonal-shared';\n\nimport {\n  map,\n  filter,\n  ignoreElements\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { Observable } from 'rxjs';\nimport { WebSeasonalEpic } from './seasonal-epic.type';\n\nconst ACTIONS_TO_TRACK = [\n  SELECT_SEASON,\n  FOOD_DETAILS_SELECT_SEASON,\n  OPEN_MENU,\n  CLOSE_MENU,\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS,\n  GO_TO_WEB_VERSION,\n  RECIPE_ITEM_CLICKED,\n  FOOD_ITEM_CLICKED\n];\n\nexport const trackActionEpic$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    filter(({ type }) => ACTIONS_TO_TRACK.includes(type)),\n    map(({ type }) => ga('send', 'event', type, type)),\n    ignoreElements()\n  )\n);\n","import { combineEpics } from 'redux-observable';\n\nimport { rootEpics } from '@chrisb-dev/seasonal-shared';\nimport { trackActionEpic$ } from './tracking.epics';\n\nimport {\n  goToWebVersion$,\n  goToRecipeLink$,\n  goToFoodLink$,\n  goToFoodTable$,\n  goToFoodDetails$,\n  initFoodDetails$,\n  initAllSeasonsWithFoodData$,\n  goToAllSeasonsView$,\n  goBack$\n} from './route.epics';\n\nimport {\n  getStoredSettings$,\n  storeSettings$\n} from './settings.epics';\n\nexport const rootEpic = combineEpics(\n  ...rootEpics,\n  trackActionEpic$,\n  goToWebVersion$,\n  goToRecipeLink$,\n  goToFoodLink$,\n  goToFoodDetails$,\n  goBack$,\n  initFoodDetails$,\n  initAllSeasonsWithFoodData$,\n  goToFoodTable$,\n  goToAllSeasonsView$,\n  getStoredSettings$,\n  storeSettings$\n);\n","import { ActionsObservable, ofType, StateObservable } from 'redux-observable';\nimport {\n  mapTo, withLatestFrom, map, filter, debounceTime\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { Observable } from 'rxjs';\nimport {\n  GO_TO_WEB_VERSION,\n  GO_BACK_FROM_FOOD_DETAILS\n} from '../actions';\nimport {\n  GO_TO_ALL_SEASONS_VIEW,\n  RECIPE_ITEM_CLICKED,\n  IRecipeItemClicked,\n  FOOD_ITEM_CLICKED,\n  IFoodItemClicked,\n  FOOD_DETAILS_SELECT_SEASON,\n  SELECT_SEASON,\n  setCurrentFoodDetailsStart,\n  INIT_APP,\n  selectCurrentSeasonRecipesById,\n  setAllSeasonsWithFoodStart\n} from '@chrisb-dev/seasonal-shared';\nimport { push, goBack } from 'connected-react-router';\nimport { FOOD_TABLE_URL, FOOD_DETAILS_URL, ALL_SEASONS_URL } from '../../const';\nimport { IState } from '../../interfaces';\nimport { selectCurrentFoodDetailsId, selectIsCurrentRouteAllSeasons } from '../selectors';\nimport { WebSeasonalEpic } from './seasonal-epic.type';\n\nexport const goToWebVersion$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(GO_TO_WEB_VERSION),\n    mapTo(push(FOOD_TABLE_URL))\n  )\n);\n\nexport const goToRecipeLink$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(RECIPE_ITEM_CLICKED),\n    withLatestFrom(state$),\n    map(([\n      action,\n      state\n    ]) => selectCurrentSeasonRecipesById(\n        (action as IRecipeItemClicked).recipeItemId\n      )(state)\n    ),\n    map((recipe) => {\n      if (recipe) {\n        window.open(recipe.linkUrl, '_blank');\n      }\n      return { type: '' };\n    })\n  )\n);\n\nexport const goToFoodLink$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(FOOD_ITEM_CLICKED),\n    map((action) => (\n      push(`${FOOD_DETAILS_URL}/${(action as IFoodItemClicked).foodItemId}`)\n    ))\n  )\n);\n\nexport const goToFoodDetails$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(FOOD_ITEM_CLICKED),\n    map((action) => (\n      setCurrentFoodDetailsStart((action as IFoodItemClicked).foodItemId)\n    ))\n  )\n);\n\nexport const initFoodDetails$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(INIT_APP),\n    withLatestFrom(state$),\n    map(([, state]) => selectCurrentFoodDetailsId(state)),\n    filter((foodDetailsId) => Boolean(foodDetailsId)),\n    map((foodDetailsId) => setCurrentFoodDetailsStart(foodDetailsId!))\n  )\n);\n\nexport const initAllSeasonsWithFoodData$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      GO_TO_ALL_SEASONS_VIEW,\n      INIT_APP,\n      GO_BACK_FROM_FOOD_DETAILS\n    ),\n    debounceTime(50),\n    withLatestFrom(state$),\n    map(([, state]) => selectIsCurrentRouteAllSeasons(state)),\n    filter((isRouteAllSeasons) => Boolean(isRouteAllSeasons)),\n    mapTo(setAllSeasonsWithFoodStart())\n  )\n);\n\nexport const goToFoodTable$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      FOOD_DETAILS_SELECT_SEASON,\n      SELECT_SEASON\n    ),\n    mapTo(push(FOOD_TABLE_URL))\n  )\n);\n\nexport const goBack$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      GO_BACK_FROM_FOOD_DETAILS\n    ),\n    mapTo(goBack())\n  )\n);\n\nexport const goToAllSeasonsView$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(GO_TO_ALL_SEASONS_VIEW),\n    mapTo(push(ALL_SEASONS_URL))\n  )\n);\n","import { ActionsObservable, ofType, StateObservable } from 'redux-observable';\n\nimport {\n  SET_DIET_TYPE, selectSettingsState, INIT_APP, initSettings, ISettingsState\n} from '@chrisb-dev/seasonal-shared';\n\nimport { IState } from '../../interfaces';\n\nimport {\n  map,\n  ignoreElements,\n  withLatestFrom,\n  tap,\n  filter\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { Observable } from 'rxjs';\nimport { WebSeasonalEpic } from './seasonal-epic.type';\nimport { setStoredData, getStoredData } from '../../helpers';\n\nconst settingsStorageKey = 'seasonalSettings';\n\nexport const storeSettings$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(SET_DIET_TYPE),\n    withLatestFrom(state$),\n    map(([, state]) => selectSettingsState(state)),\n    tap((settingsState) => setStoredData(settingsStorageKey, settingsState)),\n    ignoreElements()\n  )\n);\n\nexport const getStoredSettings$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(INIT_APP),\n    map(() => getStoredData<ISettingsState>(settingsStorageKey)),\n    filter(Boolean),\n    map((settings) => initSettings(settings as ISettingsState))\n  )\n);\n","import {\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS\n} from '../actions';\nimport { IWebUiState } from '../../interfaces';\nimport { Action } from 'redux';\nimport { TABS } from '../../const';\n\nconst getDefaultState = (): IWebUiState => ({\n  currentTab: TABS.FOOD\n});\n\nexport function webUiReducer(\n  state = getDefaultState(),\n  action: Action\n): IWebUiState {\n  switch (action.type) {\n    case GO_TO_FOOD_TAB:\n      return {\n        ...state,\n        currentTab: TABS.FOOD\n      };\n    case GO_TO_RECIPES_TABS:\n      return {\n        ...state,\n        currentTab: TABS.RECIPES\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  Action,\n  applyMiddleware,\n  combineReducers,\n  createStore,\n  compose\n} from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\n\nimport {\n  allReducers\n} from '@chrisb-dev/seasonal-shared';\n\nimport { webUiReducer } from './web-ui.reducer';\n\nimport {\n  rootEpic\n} from '../epics';\n\nimport { IState } from '../../interfaces';\n\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { createHashHistory } from 'history';\n\nconst epicMiddleware = createEpicMiddleware<Action, Action, IState, {}>();\nexport const storeHistory = createHashHistory();\n\nexport const store = createStore(\n  combineReducers({\n    ...allReducers,\n    router: connectRouter(storeHistory),\n    webUi: webUiReducer\n  }),\n  compose(\n    applyMiddleware(\n      routerMiddleware(storeHistory),\n      epicMiddleware\n    )\n  )\n);\nepicMiddleware.run(rootEpic);\n","import { connect } from 'react-redux';\nimport {\n  BottomTabs\n} from './BottomTabs';\nimport {\n  goToFoodTab,\n  goToRecipesTab,\n  selectIsCurrentTabFood,\n  selectIsCurrentTabRecipes\n} from '../../store';\nimport {\n  IBottomTabDispatchProps,\n  IBottomTabInputProps\n} from './BottomTabs.interface';\nimport { Dispatch } from 'redux';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (\n  state: IState\n): IBottomTabInputProps => ({\n  isCurrentTabFood: selectIsCurrentTabFood(state),\n  isCurrentTabRecipes: selectIsCurrentTabRecipes(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IBottomTabDispatchProps => ({\n  goToFoodTab: () => dispatch(goToFoodTab()),\n  goToRecipesTab: () => dispatch(goToRecipesTab())\n});\n\nexport const BottomTabsConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BottomTabs);\n","import { connect } from 'react-redux';\nimport {\n  CurrentSeasonName\n} from './CurrentSeasonName';\nimport {\n  selectCurrentSeasonName,\n  selectIsCurrentSeasonFoodLoading\n} from '@chrisb-dev/seasonal-shared';\nimport {\n  ICurrentSeasonName\n} from './CurrentSeasonName.interface';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (\n  state: IState\n): ICurrentSeasonName => ({\n  currentSeasonName: selectCurrentSeasonName(state),\n  isLoading: selectIsCurrentSeasonFoodLoading(state)\n});\n\nexport const CurrentSeasonNameConnecter = connect(\n  mapStateToProps\n)(CurrentSeasonName);\n","import React, { FC } from 'react';\n\nimport './CurrentSeasonName.scss';\n\nimport { ICurrentSeasonName } from './CurrentSeasonName.interface';\nimport { SeasonNameView } from '../../components-layout';\n\nexport const CurrentSeasonName: FC<ICurrentSeasonName> = ({\n  currentSeasonName,\n  isLoading\n}) => (\n  !isLoading\n    ? <SeasonNameView name={currentSeasonName} />\n    : null\n);\n","import React, { FC } from 'react';\n\nimport './DietaryFilters.scss';\n\nimport {\n  IDietaryFiltersProps\n} from './DietaryFilters.interface';\nimport { DIET_TYPE } from '@chrisb-dev/seasonal-shared';\nimport { RadioButtonGroup } from '../../components-elements';\n\nconst radioButtons = [{\n  label: 'All',\n  value: DIET_TYPE.ALL\n}, {\n  label: 'Vegetarian',\n  value: DIET_TYPE.VEGETARIAN\n}, {\n  label: 'Vegan',\n  value: DIET_TYPE.VEGAN\n}];\n\nexport const DietaryFilters: FC<IDietaryFiltersProps> = ({\n  dietType,\n  update\n}) => (\n  <div className='c-dietary-filters'>\n    <RadioButtonGroup\n      groupName='dietary-filter'\n      radioButtons={radioButtons}\n      selectedValue={dietType}\n      onChange={(newValue) => update(newValue as DIET_TYPE)}\n    />\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  DietaryFilters\n} from './DietaryFilters';\n\nimport { IState } from '../../interfaces';\nimport {\n  IDietaryFiltersInputProps,\n  IDietaryFiltersDispatchProps\n} from './DietaryFilters.interface';\nimport { Dispatch } from 'redux';\nimport {\n  setDietType, selectSettingsDietType, DIET_TYPE\n} from '@chrisb-dev/seasonal-shared';\n\nconst mapStateToProps = (\n  state: IState\n): IDietaryFiltersInputProps => ({\n  dietType: selectSettingsDietType(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IDietaryFiltersDispatchProps => ({\n  update: (dietType: DIET_TYPE) => dispatch(setDietType(dietType))\n});\n\nexport const DietaryFiltersConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DietaryFilters);\n","import { connect } from 'react-redux';\nimport {\n  FoodDetailsLoader\n} from './FoodDetailsLoader';\nimport {\n  selectIsFoodDataOrBasicSeasonsLoading\n} from '@chrisb-dev/seasonal-shared';\n\nimport { IState } from '../../interfaces';\nimport {\n  IFoodDetailsLoaderInputProps\n} from './FoodDetailsLoader.interface';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodDetailsLoaderInputProps => ({\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state)\n});\n\nexport const FoodDetailsLoaderConnecter = connect(\n  mapStateToProps\n)(FoodDetailsLoader);\n","import React, { FC } from 'react';\n\nimport './FoodDetailsLoader.scss';\n\nimport {\n  LoadingSpinner\n} from '../../components-elements';\n\nimport {\n  IFoodDetailsLoaderInputProps\n} from './FoodDetailsLoader.interface';\n\nexport const FoodDetailsLoader: FC<IFoodDetailsLoaderInputProps> = ({\n  isLoading\n}) => (\n  isLoading\n    ? <div className='c-food-details-loader'>\n      <LoadingSpinner />\n    </div>\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodDetailsTopSection\n} from './FoodDetailsTopSection';\nimport {\n  goBackFromFoodDetails\n} from '../../store';\nimport {\n  selectCurrentFoodDetailsName,\n  selectCurrentFoodDetailsImageUrl,\n  selectIsFoodDataOrBasicSeasonsLoading\n} from '@chrisb-dev/seasonal-shared';\n\nimport { IState } from '../../interfaces';\nimport {\n  IFoodDetailsTopSectionInputProps,\n  IFoodDetailsTopSectionDispatchProps\n} from './FoodDetailsTopSection.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodDetailsTopSectionInputProps => ({\n  foodImageUrl: selectCurrentFoodDetailsImageUrl(state),\n  foodName: selectCurrentFoodDetailsName(state),\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IFoodDetailsTopSectionDispatchProps => ({\n  onGoBack: () => dispatch(goBackFromFoodDetails())\n});\n\nexport const FoodDetailsTopSectionConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FoodDetailsTopSection);\n","import React, { FC } from 'react';\n\nimport './FoodDetailsTopSection.scss';\n\nimport {\n  ArrowIcon,\n  BareButton,\n  TextHeadingMedium\n} from '../../components-elements';\n\nimport {\n  IFoodDetailsTopSectionProps\n} from './FoodDetailsTopSection.interface';\n\nexport const FoodDetailsTopSection: FC<IFoodDetailsTopSectionProps> = ({\n  foodImageUrl,\n  foodName,\n  isLoading,\n  onGoBack\n}) => (\n  !isLoading\n    ? <div className='c-food-details-top-section'>\n    <div className='c-food-details-top-section__top-bar'>\n      <BareButton\n        className='c-food-details-top-section__back-button'\n        onClick={onGoBack}>\n        <ArrowIcon />\n      </BareButton>\n      <TextHeadingMedium className='c-food-details-top-section__food-name'>\n        {foodName}\n      </TextHeadingMedium>\n    </div>\n    {\n      foodImageUrl && <img src={foodImageUrl}\n        className='c-food-details-top-section__food-image'/>\n    }\n  </div>\n  : null\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodTable\n} from './FoodTable';\nimport {\n  selectIsCurrentTabFood\n} from '../../store';\nimport {\n  selectIsCurrentSeasonFoodLoading,\n  selectVisibleFoodData,\n  foodItemClicked\n} from '@chrisb-dev/seasonal-shared';\nimport { IState } from '../../interfaces';\nimport {\n  IFoodTableInputProps,\n  IFoodTableDispatchProps\n} from './FoodTable.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodTableInputProps => {\n  return {\n    food: selectVisibleFoodData(state),\n    isCurrentTabFood: selectIsCurrentTabFood(state),\n    isLoading: selectIsCurrentSeasonFoodLoading(state)\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IFoodTableDispatchProps => {\n  return {\n    onFoodClick: (foodItemId) => dispatch(foodItemClicked(foodItemId))\n  };\n};\n\nexport const FoodTableConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FoodTable);\n","import React, { FC } from 'react';\n\nimport './FoodTable.scss';\n\nimport {\n  ImageGrid\n} from '../../components-layout';\n\nimport {\n  LoadingSpinner\n} from '../../components-elements';\nimport { IFoodTableProps } from './FoodTable.interface';\n\nexport const FoodTable: FC<IFoodTableProps> = ({\n  isCurrentTabFood,\n  isLoading,\n  food,\n  onFoodClick\n}) => (\n  isCurrentTabFood\n    ? isLoading\n      ? <div className='c-food-table__loading-spinner-wrapper'>\n        <LoadingSpinner />\n      </div>\n      : <ImageGrid data={food} onClick={onFoodClick} />\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  Header\n} from './Header';\nimport {\n  openMenu\n} from '@chrisb-dev/seasonal-shared';\nimport { IHeaderDispatchProps } from './Header.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IHeaderDispatchProps => ({\n  onMenuOpen: () => dispatch(openMenu())\n});\n\nexport const HeaderConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Header);\n","import React, { FC } from 'react';\n\nimport './Header.scss';\n\nimport {\n  BareButton,\n  BurgerIcon,\n  TextHeadingLarge\n} from '../../components-elements';\nimport {\n  SearchBarConnecter\n} from '../';\nimport { IHeaderDispatchProps } from './Header.interface';\n\nexport const Header: FC<IHeaderDispatchProps> = ({\n  onMenuOpen\n}) => (\n  <header className='c-header'>\n    <BareButton className='c-header__btn' onClick={onMenuOpen}>\n      <BurgerIcon />\n    </BareButton>\n    <h1 className='c-header__text'>\n      <TextHeadingLarge>\n        Eat Seasonal\n      </TextHeadingLarge>\n    </h1>\n    <SearchBarConnecter />\n  </header>\n);\n","import React, { FC } from 'react';\n\nimport './PageLayout.scss';\n\nexport const PageLayout: FC<{}> = ({\n  children\n}) => (\n  <div className='c-page-layout'>\n    { children }\n  </div>\n);\n","import React, { Fragment, FC } from 'react';\n\nimport './SeasonMenu.scss';\n\nimport {\n  BareButton,\n  CrossIcon,\n  TextMedium,\n  LoadingSpinner\n} from '../../components-elements';\n\nimport {\n  fadeInOutAnimation\n} from '../../helpers';\nimport { PoseGroup } from 'react-pose';\nimport { ISeasonMenuProps } from './SeasonMenu.interface';\n\nconst OverlayFadeInOutAnimation = fadeInOutAnimation();\n\nexport const SeasonMenu: FC<ISeasonMenuProps> = ({\n  allBasicSeasonData,\n  currentSeasonIndex,\n  isCurrentRouteAllSeasons,\n  isLoading,\n  isMenuOpen,\n  onSeasonSelected,\n  onClose,\n  onAllSeasonsSelected\n}) => (\n  <div>\n    <PoseGroup>\n      {\n        isMenuOpen &&\n        <OverlayFadeInOutAnimation key='season-menu-overlay'\n          className='c-season-menu__overlay'\n          onClick={onClose} />\n      }\n    </PoseGroup>\n    <nav\n      className={`c-season-menu ${isMenuOpen ? 'c-season-menu--is-open' : ''}`}>\n      {\n        !isLoading\n          ? <Fragment>\n              { allBasicSeasonData &&\n                  allBasicSeasonData.map(({ name }, index) => (\n                  <BareButton\n                    key={name}\n                    className={\n                      `c-season-menu__button ${\n                        !isCurrentRouteAllSeasons &&\n                        index === currentSeasonIndex\n                          ? 'c-season-menu__button--selected'\n                          : ''\n                        }`}\n                    onClick={() => onSeasonSelected(index)}>\n                    <TextMedium>{ name }</TextMedium>\n                  </BareButton>\n                ))\n              }\n              <BareButton className={\n                `c-season-menu__button ${\n                  isCurrentRouteAllSeasons\n                    ? 'c-season-menu__button--selected'\n                    : ''\n                }`\n                }\n                onClick={onAllSeasonsSelected}>\n                <TextMedium>All seasons</TextMedium>\n              </BareButton>\n          </Fragment>\n          : <div className='c-season-menu__loading-spinner-wrapper'>\n            <LoadingSpinner />\n          </div>\n      }\n      <BareButton className='c-season-menu__close-btn'\n        onClick={onClose}>\n        <CrossIcon />\n      </BareButton>\n    </nav>\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  SeasonMenu\n} from './SeasonMenu';\nimport {\n  selectIsMenuOpen,\n  closeMenu,\n  selectAllBasicSeasons,\n  selectIsBasicSeasonsLoading,\n  selectSeason,\n  selectCurrentSeasonIndex,\n  goToAllSeasonsView\n} from '@chrisb-dev/seasonal-shared';\n\nimport { IState } from '../../interfaces';\nimport {\n  ISeasonMenuInputProps,\n  ISeasonMenuDispatchProps\n} from './SeasonMenu.interface';\nimport { Dispatch } from 'redux';\n\nimport { selectIsCurrentRouteAllSeasons } from '../../store';\n\nconst mapStateToProps = (\n  state: IState\n): ISeasonMenuInputProps => ({\n  allBasicSeasonData: selectAllBasicSeasons(state),\n  currentSeasonIndex: selectCurrentSeasonIndex(state),\n  isCurrentRouteAllSeasons: selectIsCurrentRouteAllSeasons(state),\n  isLoading: selectIsBasicSeasonsLoading(state),\n  isMenuOpen: selectIsMenuOpen(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISeasonMenuDispatchProps => ({\n  onAllSeasonsSelected: () => dispatch(goToAllSeasonsView()),\n  onClose: () => dispatch(closeMenu()),\n  onSeasonSelected: (\n    seasonIndex: number\n  ) => dispatch(selectSeason(seasonIndex))\n});\n\nexport const SeasonMenuConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SeasonMenu);\n","import React, { FC } from 'react';\nimport { PageLayout } from '../../components-layout/PageLayout/PageLayout';\nimport { HeaderConnecter } from '../Header/Header.connector';\nimport { SeasonMenuConnecter } from '../SeasonMenu/SeasonMenu.connector';\n\nexport const PageWithMenu: FC<{}> = ({\n  children\n}) => (\n  <PageLayout>\n    <HeaderConnecter />\n    <SeasonMenuConnecter />\n    { children }\n  </PageLayout>\n);\n","import { connect } from 'react-redux';\nimport {\n  RecipesForFood\n} from './RecipesForFood';\nimport {\n  selectIsFoodDataOrBasicSeasonsLoading,\n  selectVisibleRecipesForFoodDetailsData,\n  foodDetailsSelectRecipe\n} from '@chrisb-dev/seasonal-shared';\n\nimport { IState } from '../../interfaces';\nimport {\n  IRecipesForFoodInputProps,\n  IRecipesForFoodDispatchProps\n} from './RecipesForFood.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): IRecipesForFoodInputProps => ({\n  currentFoodDetailsRecipes: selectVisibleRecipesForFoodDetailsData(state),\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IRecipesForFoodDispatchProps => ({\n  onRecipeSelected: (recipeId: string) => (\n    dispatch(foodDetailsSelectRecipe(recipeId))\n  )\n});\n\nexport const RecipesForFoodConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RecipesForFood);\n","import React, { FC } from 'react';\n\nimport './RecipesForFood.scss';\n\nimport { IRecipesForFoodProps } from './RecipesForFood.interface';\nimport { ImageGrid } from '../../components-layout';\nimport { TextHeadingSmall } from '../../components-elements';\nimport { DietaryFiltersConnector } from '../DietaryFilters/DietaryFilters.connector';\n\nexport const RecipesForFood: FC<IRecipesForFoodProps> = ({\n  isLoading,\n  currentFoodDetailsRecipes,\n  onRecipeSelected\n}) => (\n  !isLoading && currentFoodDetailsRecipes && currentFoodDetailsRecipes.length > 0\n    ? <div className='c-recipes-for-food'>\n      <TextHeadingSmall className='c-recipes-for-food__heading'>\n        Recipes\n      </TextHeadingSmall>\n      <DietaryFiltersConnector />\n      <ImageGrid data={currentFoodDetailsRecipes} onClick={onRecipeSelected} />\n    </div>\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  RecipeTable\n} from './RecipeTable';\nimport {\n  selectIsCurrentTabFood\n} from '../../store';\nimport {\n  selectVisibleRecipeData,\n  recipeItemClicked,\n  selectIsCurrentSeasonRecipesLoading\n} from '@chrisb-dev/seasonal-shared';\nimport { IState } from '../../interfaces';\nimport {\n  IRecipeTableInputProps,\n  IRecipeTableDispatchProps\n} from './RecipeTable.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): IRecipeTableInputProps => {\n  return {\n    isCurrentTabFood: selectIsCurrentTabFood(state),\n    isLoading: selectIsCurrentSeasonRecipesLoading(state),\n    recipes: selectVisibleRecipeData(state)\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IRecipeTableDispatchProps => {\n  return {\n    onRecipeClick: (recipeItemId) => dispatch(recipeItemClicked(recipeItemId))\n  };\n};\n\nexport const RecipeTableConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RecipeTable);\n","import React, { FC } from 'react';\n\nimport './RecipeTable.scss';\n\nimport {\n  ImageGrid\n} from '../../components-layout';\n\nimport {\n  LoadingSpinner\n} from '../../components-elements';\nimport { IRecipeTableProps } from './RecipeTable.interface';\nimport { DietaryFiltersConnector } from '../DietaryFilters/DietaryFilters.connector';\n\nexport const RecipeTable: FC<IRecipeTableProps> = ({\n  isCurrentTabFood,\n  isLoading,\n  recipes,\n  onRecipeClick\n}) => (\n  !isCurrentTabFood\n    ? <div>\n      <DietaryFiltersConnector />\n      {\n        isLoading\n        ? <div className='c-food-table__loading-spinner-wrapper'>\n          <LoadingSpinner />\n        </div>\n        : <ImageGrid data={recipes} onClick={onRecipeClick} />\n      }\n    </div>\n    : null\n);\n","import React, { FC } from 'react';\n\nimport './SearchBar.scss';\n\nimport { ISearchBarProps } from './SearchBar.interface';\nimport {\n  Input\n} from '../../components-elements';\n\nimport {\n  BareButton,\n  CrossIcon,\n  MagnifyingGlassIcon\n} from '../../components-elements';\n\nconst getSearchBarClassName = (isSearchBarVisible: boolean) => (\n  'c-search-bar' +\n    (\n      isSearchBarVisible\n        ? ' c-search-bar--show-full'\n        : ''\n    )\n);\n\nconst focusOnInputIfSearchVisible = (\n  ref: HTMLDivElement | undefined,\n  isSearchBarVisible: boolean\n) => {\n  if (ref && isSearchBarVisible) {\n    const input = ref.querySelector('input');\n    if (input) {\n      input.focus();\n    }\n  }\n};\n\nexport const SearchBar: FC<ISearchBarProps> = ({\n  isSearchBarVisible,\n  onHideSearchBar,\n  onSearchChanged,\n  onShowSearchBar\n}) => (\n  <div className={getSearchBarClassName(isSearchBarVisible)}\n    ref={\n      (ref: HTMLDivElement) => (\n        focusOnInputIfSearchVisible(ref, isSearchBarVisible)\n      )\n    }>\n    <Input className='c-search-bar__input'\n      onChange={(newSearchTerm) => onSearchChanged(newSearchTerm)}\n      placeholder='Search' />\n    {\n      isSearchBarVisible\n        ? <BareButton className='c-search-bar__search-button'\n            onClick={onHideSearchBar}>\n            <CrossIcon />\n          </BareButton>\n        : <BareButton className='c-search-bar__search-button'\n            onClick={onShowSearchBar}>\n            <MagnifyingGlassIcon />\n          </BareButton>\n    }\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  SearchBar\n} from './SearchBar';\nimport {\n  searchBarChanged,\n  selectIsSearchBarVisible,\n  showSearchBar,\n  hideSearchBar\n} from '@chrisb-dev/seasonal-shared';\nimport {\n  ISearchBarDispatchProps,\n  ISearchBarInputProps\n} from './SearchBar.interface';\nimport { Dispatch } from 'redux';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (state: IState): ISearchBarInputProps => ({\n  isSearchBarVisible: selectIsSearchBarVisible(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISearchBarDispatchProps => ({\n  onHideSearchBar: () => dispatch(hideSearchBar()),\n  onSearchChanged: (newSearchTerm: string) => (\n    dispatch((searchBarChanged(newSearchTerm)))\n  ),\n  onShowSearchBar: () => dispatch(showSearchBar())\n});\n\nexport const SearchBarConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchBar);\n","import { connect } from 'react-redux';\nimport {\n  SeasonsForFood\n} from './SeasonsForFood';\nimport {\n  selectSeasonsSelectedForFood,\n  selectIsFoodDataOrBasicSeasonsLoading,\n  foodDetailsSelectSeason\n} from '@chrisb-dev/seasonal-shared';\n\nimport { IState } from '../../interfaces';\nimport {\n  ISeasonForFoodInputProps,\n  ISeasonForFoodDispatchProps\n} from './SeasonsForFood.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): ISeasonForFoodInputProps => ({\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state),\n  seasonsSelectedForFood: selectSeasonsSelectedForFood(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISeasonForFoodDispatchProps => ({\n  onSeasonSelected: (seasonIndex: number) => (\n    dispatch(foodDetailsSelectSeason(seasonIndex))\n  )\n});\n\nexport const SeasonsForFoodConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SeasonsForFood);\n","import React, { Fragment, FC } from 'react';\n\nimport './SeasonsForFood.scss';\n\nimport {\n  TextMedium,\n  TextSmall,\n  BareButton,\n  TextHeadingSmall\n} from '../../components-elements';\n\nimport { ISeasonForFoodProps } from './SeasonsForFood.interface';\n\nexport const SeasonsForFood: FC<ISeasonForFoodProps> = ({\n  isLoading,\n  seasonsSelectedForFood,\n  onSeasonSelected\n}) => (\n  !isLoading\n    ? <Fragment>\n    <TextHeadingSmall\n      className='c-season-for-food__list-heading'>\n      When are they in season?\n    </TextHeadingSmall>\n    <div className='c-season-for-food__list'>\n      {\n        seasonsSelectedForFood && seasonsSelectedForFood.map((\n          {\n            isSelected,\n            name\n          },\n          seasonIndex\n        ) => (\n          <BareButton\n            key={name}\n            className={\n              `c-season-for-food__season` +\n                (\n                  isSelected\n                    ? ` c-season-for-food__season--selected`\n                    : ''\n                )\n              }\n            onClick={ () => onSeasonSelected(seasonIndex) }>\n            <TextMedium>\n              { name.substring(0, 3) }\n            </TextMedium>\n          </BareButton>\n        ))\n      }\n    </div>\n    <div\n      className={`c-season-food__in-season-key ` +\n        `c-season-food__in-season-key--in-season`\n      }>\n      <TextSmall className='c-season-food__in-season-key__text'>\n        In season\n      </TextSmall>\n    </div>\n    <div\n      className='c-season-food__in-season-key'>\n      <TextSmall className='c-season-food__in-season-key__text'>\n        Not in season\n      </TextSmall>\n    </div>\n  </Fragment>\n  : null\n);\n","import { connect } from 'react-redux';\nimport {\n  ViewWebAppVersion\n} from './ViewWebAppVersion';\nimport {\n  goToWebVersion\n} from '../../store';\nimport { IViewWebAppVersionDispatchProps } from './ViewWebAppVersion.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IViewWebAppVersionDispatchProps => ({\n  onGoToWebVersion: () => dispatch((goToWebVersion()))\n});\n\nexport const ViewWebAppVersionConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewWebAppVersion);\n","import React, { FC } from 'react';\n\nimport {\n  PrimaryButton\n} from '../../components-elements';\n\nimport {\n  IViewWebAppVersionDispatchProps\n} from './ViewWebAppVersion.interface';\n\nexport const ViewWebAppVersion: FC<IViewWebAppVersionDispatchProps> = ({\n  onGoToWebVersion\n}) => (\n  <PrimaryButton onClick={onGoToWebVersion}>\n    To web version\n  </PrimaryButton>\n);\n","import React, { FC } from 'react';\n\nimport './ViewAppLinks.scss';\n\nimport {\n  AndroidAppDownload\n} from '../AndroidAppDownload/AndroidAppDownload';\n\nimport {\n  ViewWebAppVersionConnector\n} from '../ViewWebAppVersion/ViewWebAppVersion.connector';\n\nexport const ViewAppLinks: FC<{}> = () => (\n  <div className='c-view-app-links'>\n    <AndroidAppDownload />\n    <ViewWebAppVersionConnector />\n  </div>\n);\n","import React, { FC } from 'react';\n\nimport './WhyEatSeasonal.scss';\n\nimport {\n  TextHeadingLarge\n} from '../../components-elements';\n\nimport {\n  ISummaryColumnList,\n  SummaryColumnList\n} from '../../components-layout';\n\nimport columns from './why-eat-seasonal-columns.json';\n\nconst summaryColumns: ISummaryColumnList = {\n  columns\n};\n\nexport const WhyEatSeasonal: FC<{}> = ({}) => (\n  <div className='c-why-eat-seasonal'>\n    <h2 className='c-why-eat-seasonal__heading'>\n      <TextHeadingLarge>\n        Why Eat Seasonal?\n      </TextHeadingLarge>\n    </h2>\n    <SummaryColumnList {...summaryColumns} />\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  AllSeasons\n} from './AllSeasons';\n\nimport { IState } from '../../interfaces';\nimport {\n  IAllSeasonsInputProps,\n  IAllSeasonsDispatchProps\n} from './AllSeasons.interface';\nimport { Dispatch } from 'redux';\nimport {\n  foodItemClicked,\n  selectAllSeasonsVisibleFoodData,\n  selectIsAllSeasonsFoodLoading,\n  increaseNumberOfAllFoodSeasonsInView,\n  selectHasMoreSeasonsInAllSeasonsView\n} from '@chrisb-dev/seasonal-shared';\n\nconst mapStateToProps = (\n  state: IState\n): IAllSeasonsInputProps => ({\n  hasMoreSeasonsInAllSeasonsView: selectHasMoreSeasonsInAllSeasonsView(state),\n  isLoading: selectIsAllSeasonsFoodLoading(state),\n  seasons: selectAllSeasonsVisibleFoodData(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IAllSeasonsDispatchProps => ({\n  increaseNumberOfAllFoodSeasonsInView: () => (\n    dispatch(increaseNumberOfAllFoodSeasonsInView())\n  ),\n  onFoodClick: (foodItemId: string) => dispatch(foodItemClicked(foodItemId))\n});\n\nexport const AllSeasonsConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AllSeasons);\n","import React, { FC } from 'react';\nimport './AllSeasons.scss';\nimport {\n  IAllSeasonsProps\n} from './AllSeasons.interface';\nimport { SeasonNameView, ImageGrid } from '../../components-layout';\nimport { LoadingSpinner } from '../../components-elements';\n\nimport InfiniteScroll from 'react-infinite-scroller';\n\nexport const AllSeasons: FC<IAllSeasonsProps> = ({\n  isLoading,\n  onFoodClick,\n  seasons,\n  hasMoreSeasonsInAllSeasonsView,\n  increaseNumberOfAllFoodSeasonsInView\n}) => (\n  isLoading\n  ? <div className='c-all-seasons__loading-spinner-wrapper'>\n    <LoadingSpinner />\n  </div>\n  : <div className='c-all-seasons'>\n    <InfiniteScroll\n      pageStart={0}\n      loadMore={increaseNumberOfAllFoodSeasonsInView}\n      hasMore={hasMoreSeasonsInAllSeasonsView}\n      loader={<LoadingSpinner key='all-seasons-spinner' />}>\n    {\n      seasons && seasons.map(({ name, food }) => (\n        <div className='c-all-seasons__season' key={name}>\n          <SeasonNameView name={name}></SeasonNameView>\n          <ImageGrid data={food}\n            onClick={onFoodClick} skipAnimation={true} />\n        </div>\n      ))\n    }\n    </InfiniteScroll>\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  AllSeasonsGraph\n} from './AllSeasonsGraph';\n\nimport { IState } from '../../interfaces';\nimport {\n  IAllSeasonsGraphInputProps\n} from './AllSeasonsGraph.interface';\nimport {\n  selectFoodInSeasonGraphData\n} from '@chrisb-dev/seasonal-shared';\n\nconst mapStateToProps = (\n  state: IState\n): IAllSeasonsGraphInputProps => ({\n  foodInSeasonGraphData: selectFoodInSeasonGraphData(state)\n});\n\nexport const AllSeasonsGraphConnector = connect(\n  mapStateToProps\n)(AllSeasonsGraph);\n","import React, { FC } from 'react';\nimport './AllSeasonsGraph.scss';\nimport {\n  IAllSeasonsGraphInputProps\n} from './AllSeasonsGraph.interface';\nimport {\n  BarChart,\n  XAxis,\n  Tooltip,\n  ResponsiveContainer,\n  Bar,\n  YAxis\n} from 'recharts';\nimport { TextHeadingMedium, TextMedium } from '../../components-elements';\n\nexport const AllSeasonsGraph: FC<IAllSeasonsGraphInputProps> = ({\n  foodInSeasonGraphData\n}) => (\n  foodInSeasonGraphData\n    ? <div className='c-all-seasons-graph'>\n        <TextHeadingMedium className='c-all-seasons-graph__heading'>\n          Number of food items in seasons\n        </TextHeadingMedium>\n        <ResponsiveContainer width='100%' height={400}>\n          <BarChart data={foodInSeasonGraphData}>\n            <XAxis dataKey='name' />\n            <YAxis\n              dataKey='Number of food items in season'\n              allowDecimals={false} />\n            <Tooltip />\n            <Bar dataKey='Number of food items in season' fill='#5CB5CD' />\n          </BarChart>\n        </ResponsiveContainer>\n        <TextMedium className='c-all-seasons-graph__text'>\n          Enter some text in the search bar to find when certain items are in season\n        </TextMedium>\n      </div>\n    : null\n);\n","import React, { FC } from 'react';\n\nimport './FoodDetailsPage.scss';\n\nimport {\n  FoodDetailsLoaderConnecter,\n  FoodDetailsTopSectionConnecter,\n  PageWithMenu,\n  SeasonsForFoodConnecter,\n  RecipesForFoodConnecter\n} from '../../components-main';\n\nexport const FoodDetailsPage: FC<{}> = () => (\n  <PageWithMenu>\n    <div className='c-food-details-page__main'>\n      <FoodDetailsTopSectionConnecter />\n      <FoodDetailsLoaderConnecter />\n      <RecipesForFoodConnecter />\n      <SeasonsForFoodConnecter />\n    </div>\n  </PageWithMenu>\n);\n","import React, { FC } from 'react';\n\nimport './FoodTablePage.scss';\n\nimport {\n  BottomTabsConnecter,\n  CurrentSeasonNameConnecter,\n  FoodTableConnecter,\n  PageWithMenu,\n  RecipeTableConnecter\n} from '../../components-main';\n\nexport const FoodTablePage: FC<{}> = () => (\n  <PageWithMenu>\n    <div className='c-food-table-page__main'>\n      <CurrentSeasonNameConnecter />\n      <FoodTableConnecter />\n      <RecipeTableConnecter />\n      <BottomTabsConnecter />\n    </div>\n  </PageWithMenu>\n);\n","import React, { FC } from 'react';\n\nimport './IntroPage.scss';\n\nimport {\n  AboutEatSeasonal,\n  ViewAppLinks,\n  WhyEatSeasonal\n} from '../../components-main';\n\nexport const IntroPage: FC<{}> = () => (\n  <div className='c-intro-page'>\n    <div className='c-intro-page__top-section'>\n      <img className='c-intro-page__splash-image' src='/splash.png'/>\n      <ViewAppLinks />\n    </div>\n    <AboutEatSeasonal />\n    <WhyEatSeasonal />\n    <div className='c-intro-page__mobile-extra-app-links'>\n      <ViewAppLinks />\n    </div>\n  </div>\n);\n","import React, { FC } from 'react';\nimport {\n  PageWithMenu,\n  AllSeasonsConnector,\n  AllSeasonsGraphConnector\n} from '../../components-main';\n\nimport './AllSeasonsPage.scss';\n\nexport const AllSeasonsPage: FC<{}> = () => (\n  <PageWithMenu>\n    <div className='c-all-seasons-page'>\n      <AllSeasonsGraphConnector />\n      <AllSeasonsConnector />\n    </div>\n  </PageWithMenu>\n);\n","import React, { FC } from 'react';\n\nimport {\n  IntroPage,\n  FoodTablePage,\n  FoodDetailsPage,\n  AllSeasonsPage\n} from '../components-pages';\nimport './App.scss';\n\nimport { Provider } from 'react-redux';\nimport { store, storeHistory } from '../store/reducers';\n\nimport { Route, Switch } from 'react-router';\n\nimport {\n  FOOD_TABLE_URL,\n  LANDING_URL,\n  FOOD_DETAILS_URL,\n  ALL_SEASONS_URL\n} from '../const';\n\nimport { ConnectedRouter } from 'connected-react-router';\n\nexport const App: FC<{}> = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={storeHistory}>\n      <div className='c-app'>\n        <Switch>\n          <Route path={LANDING_URL} component={IntroPage} exact />\n          <Route path={FOOD_TABLE_URL} component={FoodTablePage} />\n          <Route path={`${FOOD_DETAILS_URL}/:id`} component={FoodDetailsPage} />\n          <Route path={ALL_SEASONS_URL} component={AllSeasonsPage} />\n        </Switch>\n      </div>\n    </ConnectedRouter>\n  </Provider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './styles/index.scss';\nimport { App } from './components-app/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\nif (rootElement && rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","export const DEFAULT_ANIMATION_TIME = 500;\n","import posed from 'react-pose';\n\nimport {\n  DEFAULT_ANIMATION_TIME\n} from './animations.const';\n\nexport const fadeInOutAnimation = ({\n  enterDelay = 0,\n  exitDelay = 0,\n  enterDuration = DEFAULT_ANIMATION_TIME,\n  exitDuration = DEFAULT_ANIMATION_TIME,\n  type = 'div'\n} = {}) => posed[type]({\n  enter: {\n    delay: enterDelay,\n    opacity: 1,\n    transition: {\n      duration: enterDuration\n    }\n  },\n  exit: {\n    delay: exitDelay,\n    opacity: 0,\n    transition: {\n      duration: exitDuration\n    }\n  }\n});\n","import { ICancelablePromise } from '../../interfaces';\n\nexport const makePromiseCancelable = <T>(\n  promise: Promise<T>\n): ICancelablePromise<T> => {\n  let hasCancelled = false;\n\n  const wrappedPromise = new Promise<T>((resolve, reject) => {\n      promise.then(\n          (val) => hasCancelled ? reject({isCanceled: true}) : resolve(val),\n          (error) => hasCancelled ? reject({isCanceled: true}) : reject(error)\n      );\n  });\n\n  return {\n      promise: wrappedPromise,\n      cancel() {\n          hasCancelled = true;\n      }\n  };\n};\n","export const setStoredData = <T>(key: string, data: T) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\nexport const getStoredData = <T>(key: string): T | null => {\n  const storedData = localStorage.getItem(key);\n  return storedData && JSON.parse(storedData);\n};\n","export * from './Animations';\n\nexport * from './functions';\n","const loadingImages = [];\n\nconst createImageOnLoadPromise = (\n  imageSrc: string\n): Promise<HTMLImageElement> => {\n  return new Promise((resolve) => {\n    const image = document.createElement('img');\n    image.src = imageSrc;\n    loadingImages.push(image);\n    image.addEventListener('load', () => {\n      resolve(image);\n    });\n  });\n};\n\nexport const loadImage = (\n  imageSrc: string\n): Promise<HTMLImageElement> => {\n  const onLoadPromise = createImageOnLoadPromise(imageSrc);\n  return onLoadPromise;\n};\n","import React, { Component } from 'react';\n\nimport './BackgroundImageWithLoadingSpinner.scss';\n\nimport {\n  loadImage\n} from '../../services/image-loader.service';\n\nimport {\n  LoadingSpinner\n} from '../../components-elements';\n\nimport {\n  fadeInOutAnimation, makePromiseCancelable\n} from '../../helpers';\n\nimport { PoseGroup } from 'react-pose';\nimport { ICancelablePromise } from '../../interfaces';\n\nconst FadeInOutAnimation = fadeInOutAnimation();\n\ninterface IBackgroundImageWithLoadingSpinnerPropsInterface {\n  src: string;\n  skipAnimation?: boolean;\n}\ninterface IBackgroundImageWithLoadingSpinnerStateInterface {\n  isVisible: boolean;\n}\n\nexport class BackgroundImageWithLoadingSpinner\nextends Component<\n  IBackgroundImageWithLoadingSpinnerPropsInterface,\n  IBackgroundImageWithLoadingSpinnerStateInterface\n> {\n  public loadImagePromise: ICancelablePromise<HTMLImageElement> | null = null;\n\n  constructor(props: IBackgroundImageWithLoadingSpinnerPropsInterface) {\n    super(props);\n    this.state = {\n      isVisible: false\n    };\n  }\n\n  public componentDidMount() {\n    this.loadImagePromise = makePromiseCancelable(loadImage(this.props.src));\n    this.loadImagePromise.promise.then(() => {\n      this.setState({\n        isVisible: true\n      });\n    }, () => undefined);\n  }\n\n  public componentWillUnmount() {\n    if (this.loadImagePromise) {\n      this.loadImagePromise.cancel();\n    }\n  }\n\n  public getBackgroundImageStyle() {\n    return { backgroundImage: `url(${this.props.src})` };\n  }\n\n  public render() {\n    return !this.props.skipAnimation\n      ? (\n        <PoseGroup>\n          {\n            this.state.isVisible\n              ? <FadeInOutAnimation key='background-image-fade-in-out'\n                className='c-background-image-with-loading-spinner'\n                style={this.getBackgroundImageStyle()}>\n                { this.props.children }\n              </FadeInOutAnimation>\n              : <FadeInOutAnimation key='loading-spinner-fade-in-out'\n                className='c-background-image-with-loading-spinner'>\n                <LoadingSpinner />\n              </FadeInOutAnimation>\n          }\n        </PoseGroup>\n      )\n      : <div className='c-background-image-with-loading-spinner'\n          style={this.getBackgroundImageStyle()} />;\n  }\n}\n","import React, { FC } from 'react';\nimport './BareButton.scss';\n\nexport const BareButton: FC<{\n  className?: string,\n  onClick?: () => void\n}> = ({\n  className,\n  children,\n  onClick\n}) => (\n  <button className={`${(className || '')} c-bare-button`} onClick={onClick}>\n    { children }\n  </button>\n);\n","import React, { FC } from 'react';\nimport './PrimaryButton.scss';\n\nexport const PrimaryButton: FC<{\n  className?: string,\n  onClick?: () => void\n}> = ({\n  className,\n  children,\n  onClick\n}) => (\n  <button className={`${(className || '')} c-primary-button`}\n    onClick={onClick}>\n    { children }\n  </button>\n);\n","import React, { FC } from 'react';\nimport './icon.scss';\n\nexport const ArrowIcon: FC<{}> = () => (\n  <svg className='c-icon' viewBox='0 0 24 24'>\n    <g strokeLinecap='round' strokeWidth='2' stroke='#000'>\n      <line x1='1' y1='11' x2='6' y2='5' />\n      <line x1='1' y1='11' x2='6' y2='17' />\n      <line x1='2' y1='11' x2='22' y2='11' />\n    </g>\n  </svg>\n);\n","import React, { FC } from 'react';\nimport './icon.scss';\n\nexport const BurgerIcon: FC<{}> = () => (\n  <svg viewBox='0 0 24 24' className='c-icon'>\n    <rect height='2' width='24' y='5'></rect>\n    <rect height='2' width='24' y='11'></rect>\n    <rect height='2' width='24' y='17'></rect>\n  </svg>\n);\n","import React, { FC } from 'react';\nimport './icon.scss';\n\nexport const CrossIcon: FC<{}> = () => (\n  <svg className='c-icon' viewBox='0 0 24 24'>\n    {/* tslint:disable-next-line */}\n    <polygon points='19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12' />\n  </svg>\n);\n","import React, { FC } from 'react';\nimport './icon.scss';\n\nexport const MagnifyingGlassIcon: FC<{}> = () => (\n  <svg className='c-icon' viewBox='0 0 32 32'>\n    {/* tslint:disable-next-line */}\n    <path d='M19.4271164,21.4271164 C18.0372495,22.4174803 16.3366522,23 14.5,23 C9.80557939,23 6,19.1944206 6,14.5 C6,9.80557939 9.80557939,6 14.5,6 C19.1944206,6 23,9.80557939 23,14.5 C23,16.3366522 22.4174803,18.0372495 21.4271164,19.4271164 L27.0119176,25.0119176 C27.5621186,25.5621186 27.5575313,26.4424687 27.0117185,26.9882815 L26.9882815,27.0117185 C26.4438648,27.5561352 25.5576204,27.5576204 25.0119176,27.0119176 L19.4271164,21.4271164 L19.4271164,21.4271164 Z M14.5,21 C18.0898511,21 21,18.0898511 21,14.5 C21,10.9101489 18.0898511,8 14.5,8 C10.9101489,8 8,10.9101489 8,14.5 C8,18.0898511 10.9101489,21 14.5,21 L14.5,21 Z' />\n  </svg>\n);\n","import React, { FC } from 'react';\nimport './Input.scss';\n\nexport const Input: FC<{\n  className?: string,\n  type?: 'text' | 'number',\n  placeholder?: string,\n  onChange: (newValue: string) => void\n}> = ({\n  children,\n  className,\n  type = 'text',\n  placeholder,\n  onChange\n}) => (\n  <input\n    className={`${(className || '')} c-input`}\n    placeholder={placeholder}\n    type={type}\n    onChange={(event) => onChange(event.target.value)}>\n    { children }\n  </input>\n);\n","import React, { FC } from 'react';\nimport './RadioButton.scss';\n\nexport const RadioButton: FC<{\n  className?: string,\n  defaulToChecked?: boolean,\n  groupName: string,\n  value: string,\n  label: string\n}> = ({\n  className,\n  defaulToChecked,\n  groupName,\n  value,\n  label\n}) => (\n  <label\n    htmlFor={value}\n    className={`${(className || '')} c-radio-button ${\n      defaulToChecked ? 'c-radio-button--selected' : ''\n    }`}>\n    <input\n      className='c-radio-button__input'\n      defaultChecked={defaulToChecked}\n      id={value}\n      type='radio'\n      name={groupName}\n      value={value} />\n    {label}\n  </label>\n);\n","import React, { FC } from 'react';\n\nimport { RadioButton } from './RadioButton';\n\nimport './RadioButtonGroup.scss';\n\nexport const RadioButtonGroup: FC<{\n  className?: string,\n  radioButtonClassName?: string,\n  groupName: string,\n  radioButtons: Array<{\n    value: string,\n    label: string\n  }>,\n  selectedValue?: string,\n  onChange: (newValue: string) => void\n}> = ({\n  className,\n  radioButtonClassName,\n  selectedValue,\n  groupName,\n  radioButtons,\n  onChange\n}) => (\n  <div\n    className={`${(className || '')} c-radio-button-group`}\n    onChange={\n      (event) => onChange((event.target as HTMLInputElement).value)\n    }>\n    {\n      radioButtons.map(({ value, label }) => (\n        <RadioButton\n          key={value}\n          className={radioButtonClassName}\n          defaulToChecked={selectedValue === value}\n          groupName={groupName}\n          value={value}\n          label={label}\n        />\n      ))\n    }\n  </div>\n);\n","import React, { FC } from 'react';\n\nimport './LoadingSpinner.scss';\n\nexport const LoadingSpinner: FC<{}> = () => (\n  <div className='c-loading-spinner'>\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n  </div>\n);\n","import React, { FC } from 'react';\nimport './TextHeadingLarge.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextHeadingLarge: FC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-heading-large`}>\n    { children }\n  </span>\n);\n","import React, { FC } from 'react';\nimport './TextHeadingMedium.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextHeadingMedium: FC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-heading-medium`}>\n    { children }\n  </span>\n);\n","import React, { FC } from 'react';\nimport './TextHeadingSmall.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextHeadingSmall: FC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-heading-small`}>\n    { children }\n  </span>\n);\n","import React, { FC } from 'react';\nimport './TextMedium.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextMedium: FC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-medium`}>\n    { children }\n  </span>\n);\n","import React, { FC } from 'react';\nimport './TextSmall.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextSmall: FC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-small`}>\n    { children }\n  </span>\n);\n","export * from './BackgroundImageWithLoadingSpinner/BackgroundImageWithLoadingSpinner';\n\nexport * from './Buttons';\n\nexport * from './Icons';\n\nexport * from './Input';\n\nexport * from './LoadingSpinner/LoadingSpinner';\n\nexport * from './Text';\n"],"sourceRoot":""}