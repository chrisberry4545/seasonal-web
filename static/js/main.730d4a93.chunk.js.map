{"version":3,"sources":["helpers/Animations/animations.const.ts","helpers/Animations/fade.animations.ts","helpers/functions/make-promise-cancelable.ts","helpers/index.ts","components-layout/ImageGridItem/ImageGridItem.tsx","components-layout/SummaryColumn/index.ts","components-layout/ImageGrid/ImageGrid.tsx","components-layout/SummaryColumn/SummaryColumn.tsx","components-layout/SummaryColumnList/index.ts","components-layout/SummaryColumnList/SummaryColumnList.tsx","components-layout/SeasonNameView/SeasonNameView.tsx","components-layout/index.ts","components-main/AboutEatSeasonal/AboutEatSeasonal.tsx","components-main/AndroidAppDownload/AndroidAppDownload.tsx","components-main/BottomTabs/BottomTabs.tsx","store/actions/route.actions.ts","store/actions/web-ui.actions.ts","const/tabs.enum.ts","const/urls.const.ts","store/selectors/route.selectors.ts","store/selectors/web-ui.selectors.ts","store/epics/tracking.epics.ts","store/epics/index.ts","store/epics/route.epics.ts","store/reducers/web-ui.reducer.ts","store/reducers/index.ts","components-main/BottomTabs/BottomTabs.connector.ts","components-main/CurrentSeasonName/CurrentSeasonName.connector.ts","components-main/CurrentSeasonName/CurrentSeasonName.tsx","components-main/FoodDetailsLoader/FoodDetailsLoader.connector.ts","components-main/FoodDetailsLoader/FoodDetailsLoader.tsx","components-main/FoodDetailsTopSection/FoodDetailsTopSection.connector.ts","components-main/FoodDetailsTopSection/FoodDetailsTopSection.tsx","components-main/FoodTable/FoodTable.connector.ts","components-main/FoodTable/FoodTable.tsx","components-main/Header/Header.connector.ts","components-main/Header/Header.tsx","components-layout/PageLayout/PageLayout.tsx","components-main/SeasonMenu/SeasonMenu.tsx","components-main/SeasonMenu/SeasonMenu.connector.ts","components-main/PageWithMenu/PageWithMenu.tsx","components-main/SearchBar/SearchBar.tsx","components-main/SearchBar/SearchBar.connector.ts","components-main/SeasonsForFood/SeasonsForFood.connector.ts","components-main/SeasonsForFood/SeasonsForFood.tsx","components-main/ViewWebAppVersion/ViewWebAppVersion.connector.ts","components-main/ViewWebAppVersion/ViewWebAppVersion.tsx","components-main/ViewAppLinks/ViewAppLinks.tsx","components-main/WhyEatSeasonal/WhyEatSeasonal.tsx","components-main/AllSeasons/AllSeasons.connector.ts","components-main/AllSeasons/AllSeasons.tsx","components-main/AllSeasonsGraph/AllSeasonsGraph.connector.ts","components-main/AllSeasonsGraph/AllSeasonsGraph.tsx","components-pages/FoodDetailsPage/FoodDetailsPage.tsx","components-pages/FoodTablePage/FoodTablePage.tsx","components-pages/IntroPage/IntroPage.tsx","components-pages/AllSeasonsPage/AllSeasonsPage.tsx","components-app/App.tsx","serviceWorker.js","index.tsx","services/image-loader.service.ts","components-elements/BackgroundImageWithLoadingSpinner/BackgroundImageWithLoadingSpinner.tsx","components-elements/Buttons/BareButton.tsx","components-elements/Buttons/PrimaryButton.tsx","components-elements/Icons/ArrowIcon.tsx","components-elements/Icons/BurgerIcon.tsx","components-elements/Icons/CrossIcon.tsx","components-elements/Icons/MagnifyingGlassIcon.tsx","components-elements/Input/Input.tsx","components-elements/LoadingSpinner/LoadingSpinner.tsx","components-elements/Text/TextHeadingLarge.tsx","components-elements/Text/TextHeadingMedium.tsx","components-elements/Text/TextHeadingSmall.tsx","components-elements/Text/TextMedium.tsx","components-elements/Text/TextSmall.tsx","components-elements/index.ts"],"names":["fadeInOutAnimation","_ref","arguments","length","undefined","_ref$enterDelay","enterDelay","_ref$exitDelay","exitDelay","_ref$enterDuration","enterDuration","_ref$exitDuration","exitDuration","_ref$type","type","posed","enter","delay","opacity","transition","duration","exit","makePromiseCancelable","promise","hasCancelled","Promise","resolve","reject","then","val","isCanceled","error","cancel","__webpack_require__","d","__webpack_exports__","fade_animations_fadeInOutAnimation","ImageGridItem","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_elements__WEBPACK_IMPORTED_MODULE_2__","id","imageUrlSmall","onClick","name","skipAnimation","a","createElement","className","src","_SummaryColumn__WEBPACK_IMPORTED_MODULE_0__","_SummaryColumn_interface__WEBPACK_IMPORTED_MODULE_1__","o","ImageGrid","_ImageGridItem_ImageGridItem__WEBPACK_IMPORTED_MODULE_2__","_components_elements__WEBPACK_IMPORTED_MODULE_3__","data","map","item","Object","assign","key","SummaryColumn","imageUrl","text","title","_SummaryColumnList_interface__WEBPACK_IMPORTED_MODULE_0__","_SummaryColumnList__WEBPACK_IMPORTED_MODULE_1__","SummaryColumnList","_SummaryColumn__WEBPACK_IMPORTED_MODULE_2__","columns","column","index","SeasonNameView","_ImageGrid_ImageGrid__WEBPACK_IMPORTED_MODULE_1__","_SummaryColumnList__WEBPACK_IMPORTED_MODULE_3__","_SeasonNameView_SeasonNameView__WEBPACK_IMPORTED_MODULE_4__","AboutEatSeasonal","objectDestructuringEmpty","react_default","components_elements","AndroidAppDownload","href","alt","addTabClasses","isSelected","concat","GO_TO_WEB_VERSION","GO_BACK_FROM_FOOD_DETAILS","GO_TO_FOOD_TAB","GO_TO_RECIPES_TABS","TABS","selectCurrentFoodDetailsParams","createMatchSelector","selectCurrentFoodDetailsId","createSelector","routeParams","params","selectCurrentPath","state","getLocation","location","pathname","selectIsCurrentRouteAllSeasons","path","selectCurrentTab","webUi","webUiState","currentTab","selectIsCurrentTabFood","FOOD","selectIsCurrentTabRecipes","RECIPES","ACTIONS_TO_TRACK","SELECT_SEASON","FOOD_DETAILS_SELECT_SEASON","OPEN_MENU","CLOSE_MENU","RECIPE_ITEM_CLICKED","FOOD_ITEM_CLICKED","rootEpic","combineEpics","apply","toConsumableArray","rootEpics","actions$","pipe","filter","includes","_ref2","ga","ignoreElements","ofType","mapTo","push","state$","withLatestFrom","slicedToArray","action","selectCurrentSeasonRecipesById","recipeItemId","recipe","window","open","linkUrl","foodItemId","setCurrentFoodDetailsDataStart","goBack","INIT_APP","_ref3","foodDetailsId","Boolean","GO_TO_ALL_SEASONS_VIEW","debounceTime","_ref5","isRouteAllSeasons","setAllSeasonsWithFoodDataStart","getDefaultState","epicMiddleware","createEpicMiddleware","storeHistory","createHashHistory","store","createStore","combineReducers","objectSpread","allReducers","router","connectRouter","compose","applyMiddleware","routerMiddleware","run","BottomTabsConnecter","connect","isCurrentTabFood","isCurrentTabRecipes","dispatch","goToFoodTab","goToRecipesTab","CurrentSeasonNameConnecter","currentSeasonName","selectCurrentSeasonName","isLoading","selectIsCurrentSeasonLoading","components_layout","FoodDetailsLoaderConnecter","selectIsFoodDataOrBasicSeasonsLoading","FoodDetailsTopSectionConnecter","foodImageUrl","selectCurrentFoodDetailsImageUrl","foodName","selectCurrentFoodDetailsName","onGoBack","FoodTableConnecter","food","selectVisibleFoodData","recipes","selectVisibleRecipeData","onFoodClick","foodItemClicked","onRecipeClick","recipeItemClicked","HeaderConnecter","onMenuOpen","openMenu","SearchBarConnecter","PageLayout","children","OverlayFadeInOutAnimation","SeasonMenuConnecter","allBasicSeasonData","selectAllBasicSeasonData","currentSeasonIndex","selectCurrentSeasonIndex","isCurrentRouteAllSeasons","selectIsBasicSeasonDataLoading","isMenuOpen","selectIsMenuOpen","onAllSeasonsSelected","goToAllSeasonsView","onClose","closeMenu","onSeasonSelected","seasonIndex","selectSeason","react_pose_es","react","PageWithMenu","PageLayout_PageLayout_PageLayout","getSearchBarClassName","isSearchBarVisible","selectIsSearchBarVisible","onHideSearchBar","hideSearchBar","onSearchChanged","newSearchTerm","searchBarChanged","onShowSearchBar","showSearchBar","ref","input","querySelector","focus","focusOnInputIfSearchVisible","onChange","placeholder","SeasonsForFoodConnecter","seasonsSelectedForFood","selectSeasonsSelectedForFood","foodDetailsSelectSeason","substring","ViewWebAppVersionConnector","onGoToWebVersion","ViewAppLinks","AndroidAppDownload_AndroidAppDownload_AndroidAppDownload","summaryColumns","WhyEatSeasonal","AllSeasonsConnector","hasMoreSeasonsInAllSeasonsView","selectHasMoreSeasonsInAllSeasonsView","selectIsAllSeasonsWithFoodDataLoading","seasons","selectAllSeasonsVisibleFoodData","increaseNumberOfAllFoodSeasonsInView","react_infinite_scroller_default","pageStart","loadMore","hasMore","loader","AllSeasonsGraphConnector","foodInSeasonGraphData","selectFoodInSeasonGraphData","es6","width","height","dataKey","allowDecimals","fill","FoodDetailsPage","PageWithMenu_PageWithMenu","FoodTablePage","IntroPage","ViewAppLinks_ViewAppLinks_ViewAppLinks","AboutEatSeasonal_AboutEatSeasonal_AboutEatSeasonal","WhyEatSeasonal_WhyEatSeasonal_WhyEatSeasonal","AllSeasonsPage","App","es","esm","history","react_router","component","exact","isLocalhost","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","rootElement","document","getElementById","hasChildNodes","hydrate","App_App","render","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","loadingImages","loadImage","imageSrc","image","createImageOnLoadPromise","FadeInOutAnimation","BackgroundImageWithLoadingSpinner","_Component","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","loadImagePromise","isVisible","inherits","createClass","value","_this2","setState","backgroundImage","style","getBackgroundImageStyle","LoadingSpinner_LoadingSpinner_LoadingSpinner","Component","BareButton","PrimaryButton","ArrowIcon","viewBox","strokeLinecap","strokeWidth","stroke","x1","y1","x2","y2","BurgerIcon","y","CrossIcon","points","MagnifyingGlassIcon","Input","_onChange","_x","toString","event","target","LoadingSpinner","TextHeadingLarge","TextHeadingMedium","TextHeadingSmall","TextMedium","TextSmall","BackgroundImageWithLoadingSpinner_BackgroundImageWithLoadingSpinner_BackgroundImageWithLoadingSpinner","BareButton_BareButton","PrimaryButton_PrimaryButton","ArrowIcon_ArrowIcon","BurgerIcon_BurgerIcon","CrossIcon_CrossIcon","MagnifyingGlassIcon_MagnifyingGlassIcon","Input_Input_Input","TextHeadingLarge_TextHeadingLarge","TextHeadingMedium_TextHeadingMedium","TextHeadingSmall_TextHeadingSmall","TextMedium_TextMedium","TextSmall_TextSmall"],"mappings":"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","file":"static/js/main.730d4a93.chunk.js","sourcesContent":["export const DEFAULT_ANIMATION_TIME = 500;\n","import posed from 'react-pose';\n\nimport {\n  DEFAULT_ANIMATION_TIME\n} from './animations.const';\n\nexport const fadeInOutAnimation = ({\n  enterDelay = 0,\n  exitDelay = 0,\n  enterDuration = DEFAULT_ANIMATION_TIME,\n  exitDuration = DEFAULT_ANIMATION_TIME,\n  type = 'div'\n} = {}) => posed[type]({\n  enter: {\n    delay: enterDelay,\n    opacity: 1,\n    transition: {\n      duration: enterDuration\n    }\n  },\n  exit: {\n    delay: exitDelay,\n    opacity: 0,\n    transition: {\n      duration: exitDuration\n    }\n  }\n});\n","import { ICancelablePromise } from '../../interfaces';\n\nexport const makePromiseCancelable = <T>(\n  promise: Promise<T>\n): ICancelablePromise<T> => {\n  let hasCancelled = false;\n\n  const wrappedPromise = new Promise<T>((resolve, reject) => {\n      promise.then(\n          (val) => hasCancelled ? reject({isCanceled: true}) : resolve(val),\n          (error) => hasCancelled ? reject({isCanceled: true}) : reject(error)\n      );\n  });\n\n  return {\n      promise: wrappedPromise,\n      cancel() {\n          hasCancelled = true;\n      }\n  };\n};\n","export * from './Animations';\n\nexport * from './functions';\n","import React, { FC } from 'react';\n\nimport './ImageGridItem.scss';\n\nimport {\n  TextMedium\n} from '../../components-elements';\n\nimport {\n  BackgroundImageWithLoadingSpinner\n} from '../../components-elements';\nimport { IImageGridItem } from './ImageGridItem.interface';\n\nexport const ImageGridItem: FC<IImageGridItem> = ({\n  id,\n  imageUrlSmall,\n  onClick,\n  name,\n  skipAnimation\n}) => (\n  <div onClick={() => onClick && onClick(id)}\n    className='c-image-grid-item'>\n    <div className='c-image-grid-item__inner'>\n      <div className='c-image-grid-item__image'>\n        <BackgroundImageWithLoadingSpinner\n          src={imageUrlSmall} skipAnimation={skipAnimation}/>\n      </div>\n      <TextMedium className='c-image-grid-item__text'>\n        {name}\n      </TextMedium>\n    </div>\n  </div>\n);\n","export * from './SummaryColumn';\n\nexport * from './SummaryColumn.interface';\n","import React, { FC } from 'react';\n\nimport './ImageGrid.scss';\n\nimport {\n  ImageGridItem\n} from '../ImageGridItem/ImageGridItem';\nimport { IImageGrid } from './ImageGrid.interface';\nimport { TextMedium } from '../../components-elements';\n\nexport const ImageGrid: FC<IImageGrid> = ({\n  data,\n  onClick,\n  skipAnimation\n}) => (\n  <div className='c-image-grid'>\n    {\n      data && data.length\n        ? data.map((item) => (\n          <ImageGridItem\n            key={item.name}\n            {...item}\n            onClick={onClick}\n            skipAnimation={skipAnimation} />\n        ))\n        : <TextMedium className='c-image-grid__no-results'>\n            No results found\n          </TextMedium>\n    }\n  </div>\n);\n","import React, { FC } from 'react';\n\nimport './SummaryColumn.scss';\n\nimport {\n  TextMedium,\n  TextHeadingSmall\n} from '../../components-elements';\n\nimport {\n  ISummaryColumn\n} from './SummaryColumn.interface';\n\nexport const SummaryColumn: FC<ISummaryColumn> = ({\n  imageUrl,\n  text,\n  title\n}) => (\n  <div className='c-summary-column'>\n    {\n      imageUrl && <img src={imageUrl} className='c-summary-column__image' />\n    }\n    <h3 className='c-summary-column__heading'>\n      <TextHeadingSmall>\n        { title }\n      </TextHeadingSmall>\n    </h3>\n    <TextMedium>\n      { text }\n    </TextMedium>\n  </div>\n);\n","export * from './SummaryColumnList.interface';\n\nexport * from './SummaryColumnList';\n","import React, { FC } from 'react';\n\nimport './SummaryColumnList.scss';\n\nimport {\n  SummaryColumn\n} from './../SummaryColumn';\n\nimport {\n  ISummaryColumnList\n} from './SummaryColumnList.interface';\n\nexport const SummaryColumnList: FC<ISummaryColumnList> = ({\n  columns\n}) => (\n  <ul className='c-summary-column-list'>\n    {\n      columns.map((column, index) => (\n        <SummaryColumn {...column} key={index} />\n      ))\n    }\n  </ul>\n);\n","import React, { FC } from 'react';\nimport './SeasonNameView.scss';\nimport {\n  ISeasonNameViewProps\n} from './SeasonNameView.interface';\nimport { TextHeadingSmall } from '../../components-elements';\n\nexport const SeasonNameView: FC<ISeasonNameViewProps> = ({\n  name\n}) => (\n  <TextHeadingSmall className='c-season-name-view'>\n    {name}\n  </TextHeadingSmall>\n);\n","export * from './ImageGridItem/ImageGridItem';\n\nexport * from './ImageGrid/ImageGrid';\n\nexport * from './SummaryColumn';\n\nexport * from './SummaryColumnList';\n\nexport * from './SeasonNameView/SeasonNameView';\n","import React, { FC } from 'react';\n\nimport './AboutEatSeasonal.scss';\n\nimport {\n  TextHeadingLarge,\n  TextMedium\n} from '../../components-elements';\n\nexport const AboutEatSeasonal: FC<{}> = ({}) => (\n  <div className='c-about-eat-seasonal'>\n    <h1 className='c-about-eat-seasonal__heading'>\n      <TextHeadingLarge>\n        About Eat Seasonal\n      </TextHeadingLarge>\n    </h1>\n    <p className='c-about-eat-seasonal__text'>\n      <TextMedium>\n        Eat Seasonal started because we wanted a way to easily see what fruit\n        and vegetables are in seasons. Walking around a supermarket, trying to\n        plan seasonal meals becomes much easier when you can quickly access\n        information on everything that's in season through your phone.\n      </TextMedium>\n    </p>\n    <p className='c-about-eat-seasonal__text'>\n      <TextMedium>\n        The app and website give you quick and simple view of all the food\n        currently in seasons. They also provide a recipes section including\n        carefully selected recipes which use ingredients which are mostly in\n        seasons. New recipes are being added all the time!\n      </TextMedium>\n    </p>\n  </div>\n);\n","import React, { FC } from 'react';\n\nimport './AndroidAppDownload.scss';\n\nexport const AndroidAppDownload: FC<{}> = () => (\n  <a className='c-android-app-download'\n    href={\n    'https://play.google.com/store/apps/details?id=com.chrisbdev.seasonal&p' +\n      'campaignid=MKT-Other-global-all-co-prtnr-py-PartBadge-Mar2515-1'\n  }>\n    <img className='c-android-app-download__image'\n      alt='Get it on Google Play'\n      src='https://play.google.com/intl/en_us/badges/images/generic/en_badge_web_generic.png'/>\n  </a>\n);\n","import React, { FC } from 'react';\n\nimport './BottomTabs.scss';\n\nimport {\n  BareButton\n} from '../../components-elements';\nimport { IBottomTabProps } from './BottomTabs.interface';\n\nconst addTabClasses = (isSelected: boolean) => (\n  `c-bottom-tabs__tab ${\n    isSelected\n      ? ' c-bottom-tabs__tab--selected'\n      : ''\n  }`\n);\n\nexport const BottomTabs: FC<IBottomTabProps> = ({\n  isCurrentTabFood,\n  isCurrentTabRecipes,\n  goToFoodTab,\n  goToRecipesTab\n}) => (\n  <nav className='c-bottom-tabs'>\n    <BareButton\n      className={addTabClasses(isCurrentTabFood)}\n      onClick={goToFoodTab}>\n      Food\n    </BareButton>\n    <BareButton\n      className={addTabClasses(isCurrentTabRecipes)}\n      onClick={goToRecipesTab}>\n      Recipes\n    </BareButton>\n  </nav>\n);\n","import { Action } from 'redux';\n\nexport const GO_TO_WEB_VERSION = 'GO_TO_WEB_VERSION';\nexport function goToWebVersion(): Action {\n  return {\n    type: GO_TO_WEB_VERSION\n  };\n}\n\nexport const GO_BACK_FROM_FOOD_DETAILS = 'GO_BACK_FROM_FOOD_DETAILS';\nexport function goBackFromFoodDetails(): Action {\n  return {\n    type: GO_BACK_FROM_FOOD_DETAILS\n  };\n}\n","import { Action } from 'redux';\n\nexport const GO_TO_FOOD_TAB = 'GO_TO_FOOD_TAB';\nexport function goToFoodTab(): Action {\n  return {\n    type: GO_TO_FOOD_TAB\n  };\n}\n\nexport const GO_TO_RECIPES_TABS = 'GO_TO_RECIPES_TABS';\nexport function goToRecipesTab(): Action {\n  return {\n    type: GO_TO_RECIPES_TABS\n  };\n}\n","export enum TABS {\n  FOOD,\n  RECIPES\n}\n","export const LANDING_URL = '/';\nexport const FOOD_TABLE_URL = '/food';\nexport const FOOD_DETAILS_URL = '/food-details';\nexport const ALL_SEASONS_URL = '/all-seasons';\n","import { createMatchSelector, RouterRootState, getLocation } from 'connected-react-router';\nimport { FOOD_DETAILS_URL, ALL_SEASONS_URL } from '../../const';\nimport { createSelector } from 'reselect';\nimport { IState } from '../../interfaces';\n\nexport const selectCurrentFoodDetailsParams = createMatchSelector<\n  RouterRootState,\n  {\n    id: string\n  }\n>(\n  `${FOOD_DETAILS_URL}/:id`\n);\n\nexport const selectCurrentFoodDetailsId = createSelector(\n  selectCurrentFoodDetailsParams,\n  (routeParams) => routeParams && routeParams.params.id\n);\n\nexport const selectCurrentLocation = (state: IState) => getLocation(state);\n\nexport const selectCurrentPath = createSelector(\n  selectCurrentLocation,\n  (location) => location.pathname\n);\n\nexport const selectIsCurrentRouteAllSeasons = createSelector(\n  selectCurrentPath,\n  (path) => path === ALL_SEASONS_URL\n);\n","import { createSelector } from 'reselect';\nimport { IState } from '../../interfaces';\nimport { TABS } from '../../const';\n\nconst selectWebUiState = (state: IState) => state.webUi;\n\nexport const selectCurrentTab = createSelector(\n  selectWebUiState,\n  (webUiState): TABS => webUiState.currentTab\n);\n\nexport const selectIsCurrentTabFood = createSelector(\n  selectCurrentTab,\n  (currentTab): boolean => currentTab === TABS.FOOD\n);\n\nexport const selectIsCurrentTabRecipes = createSelector(\n  selectCurrentTab,\n  (currentTab): boolean => currentTab === TABS.RECIPES\n);\n","import { ActionsObservable } from 'redux-observable';\n\nimport {\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS,\n  GO_TO_WEB_VERSION\n} from '../actions';\n\nimport {\n  SELECT_SEASON,\n  FOOD_DETAILS_SELECT_SEASON,\n  OPEN_MENU,\n  CLOSE_MENU,\n  RECIPE_ITEM_CLICKED,\n  FOOD_ITEM_CLICKED\n} from '@chrisb-dev/seasonal-shared';\n\nimport {\n  map,\n  filter,\n  ignoreElements\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { Observable } from 'rxjs';\nimport { WebSeasonalEpic } from './seasonal-epic.type';\n\nconst ACTIONS_TO_TRACK = [\n  SELECT_SEASON,\n  FOOD_DETAILS_SELECT_SEASON,\n  OPEN_MENU,\n  CLOSE_MENU,\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS,\n  GO_TO_WEB_VERSION,\n  RECIPE_ITEM_CLICKED,\n  FOOD_ITEM_CLICKED\n];\n\nexport const trackActionEpic$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    filter(({ type }) => ACTIONS_TO_TRACK.includes(type)),\n    map(({ type }) => ga('send', 'event', type, type)),\n    ignoreElements()\n  )\n);\n","import { combineEpics } from 'redux-observable';\n\nimport { rootEpics } from '@chrisb-dev/seasonal-shared';\nimport { trackActionEpic$ } from './tracking.epics';\n\nimport {\n  goToWebVersion$,\n  goToRecipeLink$,\n  goToFoodLink$,\n  goToFoodTable$,\n  goToFoodDetails$,\n  initFoodDetails$,\n  initAllSeasonsWithFoodData$,\n  goToAllSeasonsView$,\n  goBack$\n} from './route.epics';\n\nexport const rootEpic = combineEpics(\n  ...rootEpics,\n  trackActionEpic$,\n  goToWebVersion$,\n  goToRecipeLink$,\n  goToFoodLink$,\n  goToFoodDetails$,\n  goBack$,\n  initFoodDetails$,\n  initAllSeasonsWithFoodData$,\n  goToFoodTable$,\n  goToAllSeasonsView$\n);\n","import { ActionsObservable, ofType, StateObservable } from 'redux-observable';\nimport {\n  mapTo, withLatestFrom, map, filter, debounceTime\n} from 'rxjs/operators';\nimport { Action } from 'redux';\nimport { Observable } from 'rxjs';\nimport {\n  GO_TO_WEB_VERSION,\n  GO_BACK_FROM_FOOD_DETAILS\n} from '../actions';\nimport {\n  GO_TO_ALL_SEASONS_VIEW,\n  RECIPE_ITEM_CLICKED,\n  IRecipeItemClicked,\n  FOOD_ITEM_CLICKED,\n  IFoodItemClicked,\n  FOOD_DETAILS_SELECT_SEASON,\n  SELECT_SEASON,\n  setCurrentFoodDetailsDataStart,\n  INIT_APP,\n  selectCurrentSeasonRecipesById,\n  setAllSeasonsWithFoodDataStart\n} from '@chrisb-dev/seasonal-shared';\nimport { push, goBack } from 'connected-react-router';\nimport { FOOD_TABLE_URL, FOOD_DETAILS_URL, ALL_SEASONS_URL } from '../../const';\nimport { IState } from '../../interfaces';\nimport { selectCurrentFoodDetailsId, selectIsCurrentRouteAllSeasons } from '../selectors';\nimport { WebSeasonalEpic } from './seasonal-epic.type';\n\nexport const goToWebVersion$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(GO_TO_WEB_VERSION),\n    mapTo(push(FOOD_TABLE_URL))\n  )\n);\n\nexport const goToRecipeLink$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(RECIPE_ITEM_CLICKED),\n    withLatestFrom(state$),\n    map(([\n      action,\n      state\n    ]) => selectCurrentSeasonRecipesById(\n        (action as IRecipeItemClicked).recipeItemId\n      )(state)\n    ),\n    map((recipe) => {\n      if (recipe) {\n        window.open(recipe.linkUrl, '_blank');\n      }\n      return { type: '' };\n    })\n  )\n);\n\nexport const goToFoodLink$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(FOOD_ITEM_CLICKED),\n    map((action) => (\n      push(`${FOOD_DETAILS_URL}/${(action as IFoodItemClicked).foodItemId}`)\n    ))\n  )\n);\n\nexport const goToFoodDetails$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(FOOD_ITEM_CLICKED),\n    map((action) => (\n      setCurrentFoodDetailsDataStart((action as IFoodItemClicked).foodItemId)\n    ))\n  )\n);\n\nexport const initFoodDetails$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(INIT_APP),\n    withLatestFrom(state$),\n    map(([, state]) => selectCurrentFoodDetailsId(state)),\n    filter((foodDetailsId) => Boolean(foodDetailsId)),\n    map((foodDetailsId) => setCurrentFoodDetailsDataStart(foodDetailsId!))\n  )\n);\n\nexport const initAllSeasonsWithFoodData$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>,\n  state$: StateObservable<IState>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      GO_TO_ALL_SEASONS_VIEW,\n      INIT_APP,\n      GO_BACK_FROM_FOOD_DETAILS\n    ),\n    debounceTime(50),\n    withLatestFrom(state$),\n    map(([, state]) => selectIsCurrentRouteAllSeasons(state)),\n    filter((isRouteAllSeasons) => Boolean(isRouteAllSeasons)),\n    mapTo(setAllSeasonsWithFoodDataStart())\n  )\n);\n\nexport const goToFoodTable$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      FOOD_DETAILS_SELECT_SEASON,\n      SELECT_SEASON\n    ),\n    mapTo(push(FOOD_TABLE_URL))\n  )\n);\n\nexport const goBack$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(\n      GO_BACK_FROM_FOOD_DETAILS\n    ),\n    mapTo(goBack())\n  )\n);\n\nexport const goToAllSeasonsView$: WebSeasonalEpic = (\n  actions$: ActionsObservable<Action>\n): Observable<Action> => (\n  actions$.pipe(\n    ofType(GO_TO_ALL_SEASONS_VIEW),\n    mapTo(push(ALL_SEASONS_URL))\n  )\n);\n","import {\n  GO_TO_FOOD_TAB,\n  GO_TO_RECIPES_TABS\n} from '../actions';\nimport { IWebUiState } from '../../interfaces';\nimport { Action } from 'redux';\nimport { TABS } from '../../const';\n\nconst getDefaultState = (): IWebUiState => ({\n  currentTab: TABS.FOOD\n});\n\nexport function webUiReducer(\n  state = getDefaultState(),\n  action: Action\n): IWebUiState {\n  switch (action.type) {\n    case GO_TO_FOOD_TAB:\n      return {\n        ...state,\n        currentTab: TABS.FOOD\n      };\n    case GO_TO_RECIPES_TABS:\n      return {\n        ...state,\n        currentTab: TABS.RECIPES\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  Action,\n  applyMiddleware,\n  combineReducers,\n  createStore,\n  compose\n} from 'redux';\nimport { createEpicMiddleware } from 'redux-observable';\n\nimport {\n  allReducers\n} from '@chrisb-dev/seasonal-shared';\n\nimport { webUiReducer } from './web-ui.reducer';\n\nimport {\n  rootEpic\n} from '../epics';\n\nimport { IState } from '../../interfaces';\n\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { createHashHistory } from 'history';\n\nconst epicMiddleware = createEpicMiddleware<Action, Action, IState, {}>();\nexport const storeHistory = createHashHistory();\n\nexport const store = createStore(\n  combineReducers({\n    ...allReducers,\n    router: connectRouter(storeHistory),\n    webUi: webUiReducer\n  }),\n  compose(\n    applyMiddleware(\n      routerMiddleware(storeHistory),\n      epicMiddleware\n    )\n  )\n);\nepicMiddleware.run(rootEpic);\n","import { connect } from 'react-redux';\nimport {\n  BottomTabs\n} from './BottomTabs';\nimport {\n  goToFoodTab,\n  goToRecipesTab,\n  selectIsCurrentTabFood,\n  selectIsCurrentTabRecipes\n} from '../../store';\nimport {\n  IBottomTabDispatchProps,\n  IBottomTabInputProps\n} from './BottomTabs.interface';\nimport { Dispatch } from 'redux';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (\n  state: IState\n): IBottomTabInputProps => ({\n  isCurrentTabFood: selectIsCurrentTabFood(state),\n  isCurrentTabRecipes: selectIsCurrentTabRecipes(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IBottomTabDispatchProps => ({\n  goToFoodTab: () => dispatch(goToFoodTab()),\n  goToRecipesTab: () => dispatch(goToRecipesTab())\n});\n\nexport const BottomTabsConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BottomTabs);\n","import { connect } from 'react-redux';\nimport {\n  CurrentSeasonName\n} from './CurrentSeasonName';\nimport {\n  selectCurrentSeasonName,\n  selectIsCurrentSeasonLoading\n} from '@chrisb-dev/seasonal-shared';\nimport {\n  ICurrentSeasonName\n} from './CurrentSeasonName.interface';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (\n  state: IState\n): ICurrentSeasonName => ({\n  currentSeasonName: selectCurrentSeasonName(state),\n  isLoading: selectIsCurrentSeasonLoading(state)\n});\n\nexport const CurrentSeasonNameConnecter = connect(\n  mapStateToProps\n)(CurrentSeasonName);\n","import React, { FC } from 'react';\n\nimport './CurrentSeasonName.scss';\n\nimport { ICurrentSeasonName } from './CurrentSeasonName.interface';\nimport { SeasonNameView } from '../../components-layout';\n\nexport const CurrentSeasonName: FC<ICurrentSeasonName> = ({\n  currentSeasonName,\n  isLoading\n}) => (\n  !isLoading\n    ? <SeasonNameView name={currentSeasonName} />\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodDetailsLoader\n} from './FoodDetailsLoader';\nimport {\n  selectIsFoodDataOrBasicSeasonsLoading\n} from '@chrisb-dev/seasonal-shared';\n\nimport { IState } from '../../interfaces';\nimport {\n  IFoodDetailsLoaderInputProps\n} from './FoodDetailsLoader.interface';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodDetailsLoaderInputProps => ({\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state)\n});\n\nexport const FoodDetailsLoaderConnecter = connect(\n  mapStateToProps\n)(FoodDetailsLoader);\n","import React, { FC } from 'react';\n\nimport './FoodDetailsLoader.scss';\n\nimport {\n  LoadingSpinner\n} from '../../components-elements';\n\nimport {\n  IFoodDetailsLoaderInputProps\n} from './FoodDetailsLoader.interface';\n\nexport const FoodDetailsLoader: FC<IFoodDetailsLoaderInputProps> = ({\n  isLoading\n}) => (\n  isLoading\n    ? <div className='c-food-details-loader'>\n      <LoadingSpinner />\n    </div>\n    : null\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodDetailsTopSection\n} from './FoodDetailsTopSection';\nimport {\n  goBackFromFoodDetails\n} from '../../store';\nimport {\n  selectCurrentFoodDetailsName,\n  selectCurrentFoodDetailsImageUrl,\n  selectIsFoodDataOrBasicSeasonsLoading\n} from '@chrisb-dev/seasonal-shared';\n\nimport { IState } from '../../interfaces';\nimport {\n  IFoodDetailsTopSectionInputProps,\n  IFoodDetailsTopSectionDispatchProps\n} from './FoodDetailsTopSection.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodDetailsTopSectionInputProps => ({\n  foodImageUrl: selectCurrentFoodDetailsImageUrl(state),\n  foodName: selectCurrentFoodDetailsName(state),\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IFoodDetailsTopSectionDispatchProps => ({\n  onGoBack: () => dispatch(goBackFromFoodDetails())\n});\n\nexport const FoodDetailsTopSectionConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FoodDetailsTopSection);\n","import React, { FC } from 'react';\n\nimport './FoodDetailsTopSection.scss';\n\nimport {\n  ArrowIcon,\n  BareButton,\n  TextHeadingMedium\n} from '../../components-elements';\n\nimport {\n  IFoodDetailsTopSectionProps\n} from './FoodDetailsTopSection.interface';\n\nexport const FoodDetailsTopSection: FC<IFoodDetailsTopSectionProps> = ({\n  foodImageUrl,\n  foodName,\n  isLoading,\n  onGoBack\n}) => (\n  !isLoading\n    ? <div className='c-food-details-top-section'>\n    <div className='c-food-details-top-section__top-bar'>\n      <BareButton\n        className='c-food-details-top-section__back-button'\n        onClick={onGoBack}>\n        <ArrowIcon />\n      </BareButton>\n      <TextHeadingMedium className='c-food-details-top-section__food-name'>\n        {foodName}\n      </TextHeadingMedium>\n    </div>\n    {\n      foodImageUrl && <img src={foodImageUrl}\n        className='c-food-details-top-section__food-image'/>\n    }\n  </div>\n  : null\n);\n","import { connect } from 'react-redux';\nimport {\n  FoodTable\n} from './FoodTable';\nimport {\n  selectIsCurrentTabFood\n} from '../../store';\nimport {\n  selectIsCurrentSeasonLoading,\n  selectVisibleRecipeData,\n  selectVisibleFoodData,\n  foodItemClicked,\n  recipeItemClicked\n} from '@chrisb-dev/seasonal-shared';\nimport { IState } from '../../interfaces';\nimport {\n  IFoodTableInputProps,\n  IFoodTableDispatchProps\n} from './FoodTable.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): IFoodTableInputProps => {\n  return {\n    food: selectVisibleFoodData(state),\n    isCurrentTabFood: selectIsCurrentTabFood(state),\n    isLoading: selectIsCurrentSeasonLoading(state),\n    recipes: selectVisibleRecipeData(state)\n  };\n};\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IFoodTableDispatchProps => {\n  return {\n    onFoodClick: (foodItemId) => dispatch(foodItemClicked(foodItemId)),\n    onRecipeClick: (recipeItemId) => dispatch(recipeItemClicked(recipeItemId))\n  };\n};\n\nexport const FoodTableConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(FoodTable);\n","import React, { FC } from 'react';\n\nimport './FoodTable.scss';\n\nimport {\n  ImageGrid\n} from '../../components-layout';\n\nimport {\n  LoadingSpinner\n} from '../../components-elements';\nimport { IFoodTableProps } from './FoodTable.interface';\n\nexport const FoodTable: FC<IFoodTableProps> = ({\n  isCurrentTabFood,\n  isLoading,\n  food,\n  recipes,\n  onFoodClick,\n  onRecipeClick\n}) => (\n  isLoading\n    ? <div className='c-food-table__loading-spinner-wrapper'>\n      <LoadingSpinner />\n    </div>\n    : isCurrentTabFood\n      ? <ImageGrid data={food} onClick={onFoodClick} />\n      : <ImageGrid data={recipes} onClick={onRecipeClick} />\n);\n","import { connect } from 'react-redux';\nimport {\n  Header\n} from './Header';\nimport {\n  openMenu\n} from '@chrisb-dev/seasonal-shared';\nimport { IHeaderDispatchProps } from './Header.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IHeaderDispatchProps => ({\n  onMenuOpen: () => dispatch(openMenu())\n});\n\nexport const HeaderConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Header);\n","import React, { FC } from 'react';\n\nimport './Header.scss';\n\nimport {\n  BareButton,\n  BurgerIcon,\n  TextHeadingLarge\n} from '../../components-elements';\nimport {\n  SearchBarConnecter\n} from '../';\nimport { IHeaderDispatchProps } from './Header.interface';\n\nexport const Header: FC<IHeaderDispatchProps> = ({\n  onMenuOpen\n}) => (\n  <header className='c-header'>\n    <BareButton className='c-header__btn' onClick={onMenuOpen}>\n      <BurgerIcon />\n    </BareButton>\n    <h1 className='c-header__text'>\n      <TextHeadingLarge>\n        Eat Seasonal\n      </TextHeadingLarge>\n    </h1>\n    <SearchBarConnecter />\n  </header>\n);\n","import React, { FC } from 'react';\n\nimport './PageLayout.scss';\n\nexport const PageLayout: FC<{}> = ({\n  children\n}) => (\n  <div className='c-page-layout'>\n    { children }\n  </div>\n);\n","import React, { Fragment, FC } from 'react';\n\nimport './SeasonMenu.scss';\n\nimport {\n  BareButton,\n  CrossIcon,\n  TextMedium,\n  LoadingSpinner\n} from '../../components-elements';\n\nimport {\n  fadeInOutAnimation\n} from '../../helpers';\nimport { PoseGroup } from 'react-pose';\nimport { ISeasonMenuProps } from './SeasonMenu.interface';\n\nconst OverlayFadeInOutAnimation = fadeInOutAnimation();\n\nexport const SeasonMenu: FC<ISeasonMenuProps> = ({\n  allBasicSeasonData,\n  currentSeasonIndex,\n  isCurrentRouteAllSeasons,\n  isLoading,\n  isMenuOpen,\n  onSeasonSelected,\n  onClose,\n  onAllSeasonsSelected\n}) => (\n  <div>\n    <PoseGroup>\n      {\n        isMenuOpen &&\n        <OverlayFadeInOutAnimation key='season-menu-overlay'\n          className='c-season-menu__overlay'\n          onClick={onClose} />\n      }\n    </PoseGroup>\n    <nav\n      className={`c-season-menu ${isMenuOpen ? 'c-season-menu--is-open' : ''}`}>\n      {\n        !isLoading\n          ? <Fragment>\n              { allBasicSeasonData &&\n                  allBasicSeasonData.map(({ name }, index) => (\n                  <BareButton\n                    key={name}\n                    className={\n                      `c-season-menu__button ${\n                        !isCurrentRouteAllSeasons &&\n                        index === currentSeasonIndex\n                          ? 'c-season-menu__button--selected'\n                          : ''\n                        }`}\n                    onClick={() => onSeasonSelected(index)}>\n                    <TextMedium>{ name }</TextMedium>\n                  </BareButton>\n                ))\n              }\n              <BareButton className={\n                `c-season-menu__button ${\n                  isCurrentRouteAllSeasons\n                    ? 'c-season-menu__button--selected'\n                    : ''\n                }`\n                }\n                onClick={onAllSeasonsSelected}>\n                <TextMedium>All seasons</TextMedium>\n              </BareButton>\n          </Fragment>\n          : <div className='c-season-menu__loading-spinner-wrapper'>\n            <LoadingSpinner />\n          </div>\n      }\n      <BareButton className='c-season-menu__close-btn'\n        onClick={onClose}>\n        <CrossIcon />\n      </BareButton>\n    </nav>\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  SeasonMenu\n} from './SeasonMenu';\nimport {\n  selectIsMenuOpen,\n  closeMenu,\n  selectAllBasicSeasonData,\n  selectIsBasicSeasonDataLoading,\n  selectSeason,\n  selectCurrentSeasonIndex,\n  goToAllSeasonsView\n} from '@chrisb-dev/seasonal-shared';\n\nimport { IState } from '../../interfaces';\nimport {\n  ISeasonMenuInputProps,\n  ISeasonMenuDispatchProps\n} from './SeasonMenu.interface';\nimport { Dispatch } from 'redux';\n\nimport { selectIsCurrentRouteAllSeasons } from '../../store';\n\nconst mapStateToProps = (\n  state: IState\n): ISeasonMenuInputProps => ({\n  allBasicSeasonData: selectAllBasicSeasonData(state),\n  currentSeasonIndex: selectCurrentSeasonIndex(state),\n  isCurrentRouteAllSeasons: selectIsCurrentRouteAllSeasons(state),\n  isLoading: selectIsBasicSeasonDataLoading(state),\n  isMenuOpen: selectIsMenuOpen(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISeasonMenuDispatchProps => ({\n  onAllSeasonsSelected: () => dispatch(goToAllSeasonsView()),\n  onClose: () => dispatch(closeMenu()),\n  onSeasonSelected: (\n    seasonIndex: number\n  ) => dispatch(selectSeason(seasonIndex))\n});\n\nexport const SeasonMenuConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SeasonMenu);\n","import React, { FC } from 'react';\nimport { PageLayout } from '../../components-layout/PageLayout/PageLayout';\nimport { HeaderConnecter } from '../Header/Header.connector';\nimport { SeasonMenuConnecter } from '../SeasonMenu/SeasonMenu.connector';\n\nexport const PageWithMenu: FC<{}> = ({\n  children\n}) => (\n  <PageLayout>\n    <HeaderConnecter />\n    <SeasonMenuConnecter />\n    { children }\n  </PageLayout>\n);\n","import React, { FC } from 'react';\n\nimport './SearchBar.scss';\n\nimport { ISearchBarProps } from './SearchBar.interface';\nimport {\n  Input\n} from '../../components-elements';\n\nimport {\n  BareButton,\n  CrossIcon,\n  MagnifyingGlassIcon\n} from '../../components-elements';\n\nconst getSearchBarClassName = (isSearchBarVisible: boolean) => (\n  'c-search-bar' +\n    (\n      isSearchBarVisible\n        ? ' c-search-bar--show-full'\n        : ''\n    )\n);\n\nconst focusOnInputIfSearchVisible = (\n  ref: HTMLDivElement | undefined,\n  isSearchBarVisible: boolean\n) => {\n  if (ref && isSearchBarVisible) {\n    const input = ref.querySelector('input');\n    if (input) {\n      input.focus();\n    }\n  }\n};\n\nexport const SearchBar: FC<ISearchBarProps> = ({\n  isSearchBarVisible,\n  onHideSearchBar,\n  onSearchChanged,\n  onShowSearchBar\n}) => (\n  <div className={getSearchBarClassName(isSearchBarVisible)}\n    ref={\n      (ref: HTMLDivElement) => (\n        focusOnInputIfSearchVisible(ref, isSearchBarVisible)\n      )\n    }>\n    <Input className='c-search-bar__input'\n      onChange={(newSearchTerm) => onSearchChanged(newSearchTerm)}\n      placeholder='Search' />\n    {\n      isSearchBarVisible\n        ? <BareButton className='c-search-bar__search-button'\n            onClick={onHideSearchBar}>\n            <CrossIcon />\n          </BareButton>\n        : <BareButton className='c-search-bar__search-button'\n            onClick={onShowSearchBar}>\n            <MagnifyingGlassIcon />\n          </BareButton>\n    }\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  SearchBar\n} from './SearchBar';\nimport {\n  searchBarChanged,\n  selectIsSearchBarVisible,\n  showSearchBar,\n  hideSearchBar\n} from '@chrisb-dev/seasonal-shared';\nimport {\n  ISearchBarDispatchProps,\n  ISearchBarInputProps\n} from './SearchBar.interface';\nimport { Dispatch } from 'redux';\nimport { IState } from '../../interfaces';\n\nconst mapStateToProps = (state: IState): ISearchBarInputProps => ({\n  isSearchBarVisible: selectIsSearchBarVisible(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISearchBarDispatchProps => ({\n  onHideSearchBar: () => dispatch(hideSearchBar()),\n  onSearchChanged: (newSearchTerm: string) => (\n    dispatch((searchBarChanged(newSearchTerm)))\n  ),\n  onShowSearchBar: () => dispatch(showSearchBar())\n});\n\nexport const SearchBarConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SearchBar);\n","import { connect } from 'react-redux';\nimport {\n  SeasonsForFood\n} from './SeasonsForFood';\nimport {\n  selectSeasonsSelectedForFood,\n  selectIsFoodDataOrBasicSeasonsLoading,\n  foodDetailsSelectSeason\n} from '@chrisb-dev/seasonal-shared';\n\nimport { IState } from '../../interfaces';\nimport {\n  ISeasonForFoodInputProps,\n  ISeasonForFoodDispatchProps\n} from './SeasonsForFood.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = (\n  state: IState\n): ISeasonForFoodInputProps => ({\n  isLoading: selectIsFoodDataOrBasicSeasonsLoading(state),\n  seasonsSelectedForFood: selectSeasonsSelectedForFood(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): ISeasonForFoodDispatchProps => ({\n  onSeasonSelected: (seasonIndex: number) => (\n    dispatch(foodDetailsSelectSeason(seasonIndex))\n  )\n});\n\nexport const SeasonsForFoodConnecter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SeasonsForFood);\n","import React, { Fragment, FC } from 'react';\n\nimport './SeasonsForFood.scss';\n\nimport {\n  TextMedium,\n  TextHeadingMedium,\n  TextSmall,\n  BareButton\n} from '../../components-elements';\n\nimport { ISeasonForFoodProps } from './SeasonsForFood.interface';\n\nexport const SeasonsForFood: FC<ISeasonForFoodProps> = ({\n  isLoading,\n  seasonsSelectedForFood,\n  onSeasonSelected\n}) => (\n  !isLoading\n    ? <Fragment>\n    <TextHeadingMedium\n      className='c-season-for-food__list-heading'>\n      When are they in season?\n    </TextHeadingMedium>\n    <div className='c-season-for-food__list'>\n      {\n        seasonsSelectedForFood && seasonsSelectedForFood.map((\n          {\n            isSelected,\n            name\n          },\n          seasonIndex\n        ) => (\n          <BareButton\n            key={name}\n            className={\n              `c-season-for-food__season` +\n                (\n                  isSelected\n                    ? ` c-season-for-food__season--selected`\n                    : ''\n                )\n              }\n            onClick={ () => onSeasonSelected(seasonIndex) }>\n            <TextMedium>\n              { name.substring(0, 3) }\n            </TextMedium>\n          </BareButton>\n        ))\n      }\n    </div>\n    <div\n      className={`c-season-food__in-season-key ` +\n        `c-season-food__in-season-key--in-season`\n      }>\n      <TextSmall className='c-season-food__in-season-key__text'>\n        In season\n      </TextSmall>\n    </div>\n    <div\n      className='c-season-food__in-season-key'>\n      <TextSmall className='c-season-food__in-season-key__text'>\n        Not in season\n      </TextSmall>\n    </div>\n  </Fragment>\n  : null\n);\n","import { connect } from 'react-redux';\nimport {\n  ViewWebAppVersion\n} from './ViewWebAppVersion';\nimport {\n  goToWebVersion\n} from '../../store';\nimport { IViewWebAppVersionDispatchProps } from './ViewWebAppVersion.interface';\nimport { Dispatch } from 'redux';\n\nconst mapStateToProps = () => ({});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IViewWebAppVersionDispatchProps => ({\n  onGoToWebVersion: () => dispatch((goToWebVersion()))\n});\n\nexport const ViewWebAppVersionConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ViewWebAppVersion);\n","import React, { FC } from 'react';\n\nimport {\n  PrimaryButton\n} from '../../components-elements';\n\nimport {\n  IViewWebAppVersionDispatchProps\n} from './ViewWebAppVersion.interface';\n\nexport const ViewWebAppVersion: FC<IViewWebAppVersionDispatchProps> = ({\n  onGoToWebVersion\n}) => (\n  <PrimaryButton onClick={onGoToWebVersion}>\n    To web version\n  </PrimaryButton>\n);\n","import React, { FC } from 'react';\n\nimport './ViewAppLinks.scss';\n\nimport {\n  AndroidAppDownload\n} from '../AndroidAppDownload/AndroidAppDownload';\n\nimport {\n  ViewWebAppVersionConnector\n} from '../ViewWebAppVersion/ViewWebAppVersion.connector';\n\nexport const ViewAppLinks: FC<{}> = () => (\n  <div className='c-view-app-links'>\n    <AndroidAppDownload />\n    <ViewWebAppVersionConnector />\n  </div>\n);\n","import React, { FC } from 'react';\n\nimport './WhyEatSeasonal.scss';\n\nimport {\n  TextHeadingLarge\n} from '../../components-elements';\n\nimport {\n  ISummaryColumnList,\n  SummaryColumnList\n} from '../../components-layout';\n\nimport columns from './why-eat-seasonal-columns.json';\n\nconst summaryColumns: ISummaryColumnList = {\n  columns\n};\n\nexport const WhyEatSeasonal: FC<{}> = ({}) => (\n  <div className='c-why-eat-seasonal'>\n    <h2 className='c-why-eat-seasonal__heading'>\n      <TextHeadingLarge>\n        Why Eat Seasonal?\n      </TextHeadingLarge>\n    </h2>\n    <SummaryColumnList {...summaryColumns} />\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  AllSeasons\n} from './AllSeasons';\n\nimport { IState } from '../../interfaces';\nimport {\n  IAllSeasonsInputProps,\n  IAllSeasonsDispatchProps\n} from './AllSeasons.interface';\nimport { Dispatch } from 'redux';\nimport {\n  foodItemClicked,\n  selectAllSeasonsVisibleFoodData,\n  selectIsAllSeasonsWithFoodDataLoading,\n  increaseNumberOfAllFoodSeasonsInView,\n  selectHasMoreSeasonsInAllSeasonsView\n} from '@chrisb-dev/seasonal-shared';\n\nconst mapStateToProps = (\n  state: IState\n): IAllSeasonsInputProps => ({\n  hasMoreSeasonsInAllSeasonsView: selectHasMoreSeasonsInAllSeasonsView(state),\n  isLoading: selectIsAllSeasonsWithFoodDataLoading(state),\n  seasons: selectAllSeasonsVisibleFoodData(state)\n});\n\nconst mapDispatchToProps = (\n  dispatch: Dispatch\n): IAllSeasonsDispatchProps => ({\n  increaseNumberOfAllFoodSeasonsInView: () => (\n    dispatch(increaseNumberOfAllFoodSeasonsInView())\n  ),\n  onFoodClick: (foodItemId: string) => dispatch(foodItemClicked(foodItemId))\n});\n\nexport const AllSeasonsConnector = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AllSeasons);\n","import React, { FC } from 'react';\nimport './AllSeasons.scss';\nimport {\n  IAllSeasonsProps\n} from './AllSeasons.interface';\nimport { SeasonNameView, ImageGrid } from '../../components-layout';\nimport { LoadingSpinner } from '../../components-elements';\n\nimport InfiniteScroll from 'react-infinite-scroller';\n\nexport const AllSeasons: FC<IAllSeasonsProps> = ({\n  isLoading,\n  onFoodClick,\n  seasons,\n  hasMoreSeasonsInAllSeasonsView,\n  increaseNumberOfAllFoodSeasonsInView\n}) => (\n  isLoading\n  ? <div className='c-all-seasons__loading-spinner-wrapper'>\n    <LoadingSpinner />\n  </div>\n  : <div className='c-all-seasons'>\n    <InfiniteScroll\n      pageStart={0}\n      loadMore={increaseNumberOfAllFoodSeasonsInView}\n      hasMore={hasMoreSeasonsInAllSeasonsView}\n      loader={<LoadingSpinner key='all-seasons-spinner' />}>\n    {\n      seasons && seasons.map(({ name, food }) => (\n        <div className='c-all-seasons__season' key={name}>\n          <SeasonNameView name={name}></SeasonNameView>\n          <ImageGrid data={food}\n            onClick={onFoodClick} skipAnimation={true} />\n        </div>\n      ))\n    }\n    </InfiniteScroll>\n  </div>\n);\n","import { connect } from 'react-redux';\nimport {\n  AllSeasonsGraph\n} from './AllSeasonsGraph';\n\nimport { IState } from '../../interfaces';\nimport {\n  IAllSeasonsGraphInputProps\n} from './AllSeasonsGraph.interface';\nimport {\n  selectFoodInSeasonGraphData\n} from '@chrisb-dev/seasonal-shared';\n\nconst mapStateToProps = (\n  state: IState\n): IAllSeasonsGraphInputProps => ({\n  foodInSeasonGraphData: selectFoodInSeasonGraphData(state)\n});\n\nexport const AllSeasonsGraphConnector = connect(\n  mapStateToProps\n)(AllSeasonsGraph);\n","import React, { FC } from 'react';\nimport './AllSeasonsGraph.scss';\nimport {\n  IAllSeasonsGraphInputProps\n} from './AllSeasonsGraph.interface';\nimport {\n  BarChart,\n  XAxis,\n  Tooltip,\n  ResponsiveContainer,\n  Bar,\n  YAxis\n} from 'recharts';\nimport { TextHeadingMedium, TextMedium } from '../../components-elements';\n\nexport const AllSeasonsGraph: FC<IAllSeasonsGraphInputProps> = ({\n  foodInSeasonGraphData\n}) => (\n  foodInSeasonGraphData\n    ? <div className='c-all-seasons-graph'>\n        <TextHeadingMedium className='c-all-seasons-graph__heading'>\n          Number of food items in seasons\n        </TextHeadingMedium>\n        <ResponsiveContainer width='100%' height={400}>\n          <BarChart data={foodInSeasonGraphData}>\n            <XAxis dataKey='name' />\n            <YAxis\n              dataKey='Number of food items in season'\n              allowDecimals={false} />\n            <Tooltip />\n            <Bar dataKey='Number of food items in season' fill='#5CB5CD' />\n          </BarChart>\n        </ResponsiveContainer>\n        <TextMedium className='c-all-seasons-graph__text'>\n          Enter some text in the search bar to find when certain items are in season\n        </TextMedium>\n      </div>\n    : null\n);\n","import React, { FC } from 'react';\n\nimport './FoodDetailsPage.scss';\n\nimport {\n  FoodDetailsLoaderConnecter,\n  FoodDetailsTopSectionConnecter,\n  PageWithMenu,\n  SeasonsForFoodConnecter\n} from '../../components-main';\n\nexport const FoodDetailsPage: FC<{}> = () => (\n  <PageWithMenu>\n    <div className='c-food-details-page__main'>\n      <FoodDetailsTopSectionConnecter />\n      <FoodDetailsLoaderConnecter />\n      <SeasonsForFoodConnecter />\n    </div>\n  </PageWithMenu>\n);\n","import React, { FC } from 'react';\n\nimport './FoodTablePage.scss';\n\nimport {\n  BottomTabsConnecter,\n  CurrentSeasonNameConnecter,\n  FoodTableConnecter,\n  PageWithMenu\n} from '../../components-main';\n\nexport const FoodTablePage: FC<{}> = () => (\n  <PageWithMenu>\n    <div className='c-food-table-page__main'>\n      <CurrentSeasonNameConnecter />\n      <FoodTableConnecter />\n      <BottomTabsConnecter />\n    </div>\n  </PageWithMenu>\n);\n","import React, { FC } from 'react';\n\nimport './IntroPage.scss';\n\nimport {\n  AboutEatSeasonal,\n  ViewAppLinks,\n  WhyEatSeasonal\n} from '../../components-main';\n\nexport const IntroPage: FC<{}> = () => (\n  <div className='c-intro-page'>\n    <div className='c-intro-page__top-section'>\n      <img className='c-intro-page__splash-image' src='/splash.png'/>\n      <ViewAppLinks />\n    </div>\n    <AboutEatSeasonal />\n    <WhyEatSeasonal />\n    <div className='c-intro-page__mobile-extra-app-links'>\n      <ViewAppLinks />\n    </div>\n  </div>\n);\n","import React, { FC } from 'react';\nimport {\n  PageWithMenu,\n  AllSeasonsConnector,\n  AllSeasonsGraphConnector\n} from '../../components-main';\n\nimport './AllSeasonsPage.scss';\n\nexport const AllSeasonsPage: FC<{}> = () => (\n  <PageWithMenu>\n    <div className='c-all-seasons-page'>\n      <AllSeasonsGraphConnector />\n      <AllSeasonsConnector />\n    </div>\n  </PageWithMenu>\n);\n","import React, { FC } from 'react';\n\nimport {\n  IntroPage,\n  FoodTablePage,\n  FoodDetailsPage,\n  AllSeasonsPage\n} from '../components-pages';\nimport './App.scss';\n\nimport { Provider } from 'react-redux';\nimport { store, storeHistory } from '../store/reducers';\n\nimport { Route, Switch } from 'react-router';\n\nimport {\n  FOOD_TABLE_URL,\n  LANDING_URL,\n  FOOD_DETAILS_URL,\n  ALL_SEASONS_URL\n} from '../const';\n\nimport { ConnectedRouter } from 'connected-react-router';\n\nexport const App: FC<{}> = () => (\n  <Provider store={store}>\n    <ConnectedRouter history={storeHistory}>\n      <div className='c-app'>\n        <Switch>\n          <Route path={LANDING_URL} component={IntroPage} exact />\n          <Route path={FOOD_TABLE_URL} component={FoodTablePage} />\n          <Route path={`${FOOD_DETAILS_URL}/:id`} component={FoodDetailsPage} />\n          <Route path={ALL_SEASONS_URL} component={AllSeasonsPage} />\n        </Switch>\n      </div>\n    </ConnectedRouter>\n  </Provider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './styles/index.scss';\nimport { App } from './components-app/App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\nif (rootElement && rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n","const loadingImages = [];\n\nconst createImageOnLoadPromise = (\n  imageSrc: string\n): Promise<HTMLImageElement> => {\n  return new Promise((resolve) => {\n    const image = document.createElement('img');\n    image.src = imageSrc;\n    loadingImages.push(image);\n    image.addEventListener('load', () => {\n      resolve(image);\n    });\n  });\n};\n\nexport const loadImage = (\n  imageSrc: string\n): Promise<HTMLImageElement> => {\n  const onLoadPromise = createImageOnLoadPromise(imageSrc);\n  return onLoadPromise;\n};\n","import React, { Component } from 'react';\n\nimport './BackgroundImageWithLoadingSpinner.scss';\n\nimport {\n  loadImage\n} from '../../services/image-loader.service';\n\nimport {\n  LoadingSpinner\n} from '../../components-elements';\n\nimport {\n  fadeInOutAnimation, makePromiseCancelable\n} from '../../helpers';\n\nimport { PoseGroup } from 'react-pose';\nimport { ICancelablePromise } from '../../interfaces';\n\nconst FadeInOutAnimation = fadeInOutAnimation();\n\ninterface IBackgroundImageWithLoadingSpinnerPropsInterface {\n  src: string;\n  skipAnimation?: boolean;\n}\ninterface IBackgroundImageWithLoadingSpinnerStateInterface {\n  isVisible: boolean;\n}\n\nexport class BackgroundImageWithLoadingSpinner\nextends Component<\n  IBackgroundImageWithLoadingSpinnerPropsInterface,\n  IBackgroundImageWithLoadingSpinnerStateInterface\n> {\n  public loadImagePromise: ICancelablePromise<HTMLImageElement> | null = null;\n\n  constructor(props: IBackgroundImageWithLoadingSpinnerPropsInterface) {\n    super(props);\n    this.state = {\n      isVisible: false\n    };\n  }\n\n  public componentDidMount() {\n    this.loadImagePromise = makePromiseCancelable(loadImage(this.props.src));\n    this.loadImagePromise.promise.then(() => {\n      this.setState({\n        isVisible: true\n      });\n    }, () => undefined);\n  }\n\n  public componentWillUnmount() {\n    if (this.loadImagePromise) {\n      this.loadImagePromise.cancel();\n    }\n  }\n\n  public getBackgroundImageStyle() {\n    return { backgroundImage: `url(${this.props.src})` };\n  }\n\n  public render() {\n    return !this.props.skipAnimation\n      ? (\n        <PoseGroup>\n          {\n            this.state.isVisible\n              ? <FadeInOutAnimation key='background-image-fade-in-out'\n                className='c-background-image-with-loading-spinner'\n                style={this.getBackgroundImageStyle()}>\n                { this.props.children }\n              </FadeInOutAnimation>\n              : <FadeInOutAnimation key='loading-spinner-fade-in-out'\n                className='c-background-image-with-loading-spinner'>\n                <LoadingSpinner />\n              </FadeInOutAnimation>\n          }\n        </PoseGroup>\n      )\n      : <div className='c-background-image-with-loading-spinner'\n          style={this.getBackgroundImageStyle()} />;\n  }\n}\n","import React, { FC } from 'react';\nimport './BareButton.scss';\n\nexport const BareButton: FC<{\n  className?: string,\n  onClick?: () => void\n}> = ({\n  className,\n  children,\n  onClick\n}) => (\n  <button className={`${(className || '')} c-bare-button`} onClick={onClick}>\n    { children }\n  </button>\n);\n","import React, { FC } from 'react';\nimport './PrimaryButton.scss';\n\nexport const PrimaryButton: FC<{\n  className?: string,\n  onClick?: () => void\n}> = ({\n  className,\n  children,\n  onClick\n}) => (\n  <button className={`${(className || '')} c-primary-button`}\n    onClick={onClick}>\n    { children }\n  </button>\n);\n","import React, { FC } from 'react';\nimport './icon.scss';\n\nexport const ArrowIcon: FC<{}> = () => (\n  <svg className='c-icon' viewBox='0 0 24 24'>\n    <g strokeLinecap='round' strokeWidth='2' stroke='#000'>\n      <line x1='1' y1='11' x2='6' y2='5' />\n      <line x1='1' y1='11' x2='6' y2='17' />\n      <line x1='2' y1='11' x2='22' y2='11' />\n    </g>\n  </svg>\n);\n","import React, { FC } from 'react';\nimport './icon.scss';\n\nexport const BurgerIcon: FC<{}> = () => (\n  <svg viewBox='0 0 24 24' className='c-icon'>\n    <rect height='2' width='24' y='5'></rect>\n    <rect height='2' width='24' y='11'></rect>\n    <rect height='2' width='24' y='17'></rect>\n  </svg>\n);\n","import React, { FC } from 'react';\nimport './icon.scss';\n\nexport const CrossIcon: FC<{}> = () => (\n  <svg className='c-icon' viewBox='0 0 24 24'>\n    {/* tslint:disable-next-line */}\n    <polygon points='19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12' />\n  </svg>\n);\n","import React, { FC } from 'react';\nimport './icon.scss';\n\nexport const MagnifyingGlassIcon: FC<{}> = () => (\n  <svg className='c-icon' viewBox='0 0 32 32'>\n    {/* tslint:disable-next-line */}\n    <path d='M19.4271164,21.4271164 C18.0372495,22.4174803 16.3366522,23 14.5,23 C9.80557939,23 6,19.1944206 6,14.5 C6,9.80557939 9.80557939,6 14.5,6 C19.1944206,6 23,9.80557939 23,14.5 C23,16.3366522 22.4174803,18.0372495 21.4271164,19.4271164 L27.0119176,25.0119176 C27.5621186,25.5621186 27.5575313,26.4424687 27.0117185,26.9882815 L26.9882815,27.0117185 C26.4438648,27.5561352 25.5576204,27.5576204 25.0119176,27.0119176 L19.4271164,21.4271164 L19.4271164,21.4271164 Z M14.5,21 C18.0898511,21 21,18.0898511 21,14.5 C21,10.9101489 18.0898511,8 14.5,8 C10.9101489,8 8,10.9101489 8,14.5 C8,18.0898511 10.9101489,21 14.5,21 L14.5,21 Z' />\n  </svg>\n);\n","import React, { FC } from 'react';\nimport './Input.scss';\n\nexport const Input: FC<{\n  className?: string,\n  type?: 'text' | 'number',\n  placeholder?: string,\n  onChange: (newValue: string) => void\n}> = ({\n  children,\n  className,\n  type = 'text',\n  placeholder,\n  onChange\n}) => (\n  <input\n    className={`${(className || '')} c-input`}\n    placeholder={placeholder}\n    type={type}\n    onChange={(event) => onChange(event.target.value)}>\n    { children }\n  </input>\n);\n","import React, { FC } from 'react';\n\nimport './LoadingSpinner.scss';\n\nexport const LoadingSpinner: FC<{}> = () => (\n  <div className='c-loading-spinner'>\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n    <div className='c-loading-spinner__dot' />\n  </div>\n);\n","import React, { FC } from 'react';\nimport './TextHeadingLarge.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextHeadingLarge: FC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-heading-large`}>\n    { children }\n  </span>\n);\n","import React, { FC } from 'react';\nimport './TextHeadingMedium.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextHeadingMedium: FC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-heading-medium`}>\n    { children }\n  </span>\n);\n","import React, { FC } from 'react';\nimport './TextHeadingSmall.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextHeadingSmall: FC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-heading-small`}>\n    { children }\n  </span>\n);\n","import React, { FC } from 'react';\nimport './TextMedium.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextMedium: FC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-medium`}>\n    { children }\n  </span>\n);\n","import React, { FC } from 'react';\nimport './TextSmall.scss';\nimport { ITextInterface } from './Text.interface';\n\nexport const TextSmall: FC<ITextInterface> = ({\n  className,\n  children\n}) => (\n  <span className={`${(className || '')} c-text-small`}>\n    { children }\n  </span>\n);\n","export * from './BackgroundImageWithLoadingSpinner/BackgroundImageWithLoadingSpinner';\n\nexport * from './Buttons';\n\nexport * from './Icons';\n\nexport * from './Input';\n\nexport * from './LoadingSpinner/LoadingSpinner';\n\nexport * from './Text';\n"],"sourceRoot":""}